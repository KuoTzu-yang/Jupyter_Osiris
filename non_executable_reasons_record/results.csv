3,/mnt/fit-Knowledgezoo/jupyternotebooks/moble@MatchedFiltering/FilteringWidgets.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib notebook
import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
from scipy import signal
import h5py
import ipywidgets as widgets
from IPython.display import display, clear_output, Audio


mpl.rcParams['figure.figsize'] = [14.0, 6.0]
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-68f1e43969c3>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mfrom[0m [0mscipy[0m [0;32mimport[0m [0msignal[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mh5py[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mipywidgets[0m [0;32mas[0m [0mwidgets[0m[0;34m[0m[0m
[1;32m     10[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mclear_output[0m[0;34m,[0m [0mAudio[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'h5py'
ImportError: No module named 'h5py'

Executability                            : False
"
4,/mnt/fit-Knowledgezoo/jupyternotebooks/moble@MatchedFiltering/MatchedFiltering.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# These are for plotting
#%matplotlib notebook
%matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter

# This is an important module whenever you use python for numerics
import numpy as np

# This lets us read LIGO's data file
import h5py

# We'll do some fancy signal processing, which is easier with this
import scipy.signal
from scipy.interpolate import InterpolatedUnivariateSpline

# These are some nice interactive things we'll use in this notebook
from IPython.display import display, Audio, Latex, clear_output
import ipywidgets as widgets

# These are some messy functions I've defined in another file (`utilities.py`)
from utilities import  (fade, derivative, plot_td_and_fd, filter_and_plot, add_notch_filter,
                        filter_cheat, notch_data, bandpass, retrieve_new_data)

# This just sets the default size of our plots
mpl.rcParams['figure.figsize'] = [9.5, 6.0]
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-32b37d2c0d31>[0m in [0;36m<module>[0;34m[0m
[1;32m     12[0m [0;34m[0m[0m
[1;32m     13[0m [0;31m# This lets us read LIGO's data file[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0;32mimport[0m [0mh5py[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0;34m[0m[0m
[1;32m     16[0m [0;31m# We'll do some fancy signal processing, which is easier with this[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'h5py'
ModuleNotFoundError: No module named 'h5py'

Executability                            : False
"
11,/mnt/fit-Knowledgezoo/jupyternotebooks/kwinkunks@notebooks/Fun_with_logs.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from las import LASReader
import matplotlib.pyplot as plt
import numpy as np
% matplotlib inline
------------------

Traceback [0;36m(most recent call last)[0m:

  File [1;32m""/home/dabao/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/IPython/core/interactiveshell.py""[0m, line [1;32m3296[0m, in [1;35mrun_code[0m
    exec(code_obj, self.user_global_ns, self.user_ns)

[0;36m  File [0;32m""<ipython-input-1-81e8a63708ea>""[0;36m, line [0;32m3[0;36m, in [0;35m<module>[0;36m[0m
[0;31m    from las import LASReader[0m

[0;36m  File [0;32m""/mnt/fit-Knowledgezoo/jupyternotebooks/kwinkunks@notebooks/las.py""[0;36m, line [0;32m167[0m
[0;31m    print ""%-16s %-30s [%s]"" % (namestr, ""'"" + item.data + ""'"",[0m
[0m                           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (las.py, line 167)

Executability                            : False
"
16,/mnt/fit-Knowledgezoo/jupyternotebooks/tritemio@notebooks/Derivation of FRET and S correction formulas.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import sympy
from sympy import init_printing, symbols, solve, Eq
init_printing()  # beautiful maths
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f90f29dcd8b1>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0msympy[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0minit_printing[0m[0;34m,[0m [0msymbols[0m[0;34m,[0m [0msolve[0m[0;34m,[0m [0mEq[0m[0;34m[0m[0m
[1;32m      5[0m [0minit_printing[0m[0;34m([0m[0;34m)[0m  [0;31m# beautiful maths[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
28,/mnt/fit-Knowledgezoo/jupyternotebooks/lmcintosh@ipython-notebooks/baccuslab/2016 05-31 writing JSON config file for expt 5-31.ipynb,"3.5
An error occurred while executing the following cell:
------------------
with open('config.json', 'w') as outfile:
    json.dump(stimulus_seq, outfile)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-8-53eb0a0c6302>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m'config.json'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0moutfile[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      2[0m     [0mjson[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0mstimulus_seq[0m[0;34m,[0m [0moutfile[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'config.json'
PermissionError: [Errno 13] Permission denied: 'config.json'

Executability                            : False
"
33,/mnt/fit-Knowledgezoo/jupyternotebooks/SiggyF@notebooks/alcatraz_drifters.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import requests
import toolz
import dateutil.parser
import datetime
import pandas
import logging
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-6b398c032b88>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mtoolz[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mdateutil[0m[0;34m.[0m[0mparser[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
42,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Calculating NQR frequencies.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function

from magres.atoms import MagresAtoms
from magres.constants  import millibarn, megahertz
import numpy, math
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-d6932d6b11c4>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mfrom[0m [0m__future__[0m [0;32mimport[0m [0mprint_function[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0mconstants[0m  [0;32mimport[0m [0mmillibarn[0m[0;34m,[0m [0mmegahertz[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mnumpy[0m[0;34m,[0m [0mmath[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
43,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Getting started (chemical shifts).ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function

from magres.atoms import MagresAtoms
from numpy import mean
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-151de5203e3c>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mfrom[0m [0m__future__[0m [0;32mimport[0m [0mprint_function[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mfrom[0m [0mnumpy[0m [0;32mimport[0m [0mmean[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
44,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Glycine - Plotting chemical shifts.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from magres.atoms import MagresAtoms, MagresAtomsView
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-90c00b5a2494>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m,[0m [0mMagresAtomsView[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
45,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Printing summary tables.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function
import warnings
warnings.filterwarnings(""ignore"") 
%pylab inline

from magres.atoms import MagresAtoms

atoms = MagresAtoms.load_magres('../samples/glycine-relaxed.magres')

print(""We have"", len(atoms), ""atoms"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-9e120f69e018>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'pylab'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;34m[0m[0m
[1;32m     10[0m [0matoms[0m [0;34m=[0m [0mMagresAtoms[0m[0;34m.[0m[0mload_magres[0m[0;34m([0m[0;34m'../samples/glycine-relaxed.magres'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
46,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Processing disordered EFGs.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function
import warnings
warnings.filterwarnings(""ignore"") 
%pylab inline

import os.path
from magres.utils import load_all_magres
from magres.atoms import MagresAtoms
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-48a4c7ba3a3c>[0m in [0;36m<module>[0;34m()[0m
[1;32m      7[0m [0;34m[0m[0m
[1;32m      8[0m [0;32mimport[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m[0m[0m
[0;32m----> 9[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0mutils[0m [0;32mimport[0m [0mload_all_magres[0m[0;34m[0m[0m
[0m[1;32m     10[0m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
47,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Selecting atoms.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function
import warnings
warnings.filterwarnings(""ignore"") 
%pylab inline

from magres.atoms import MagresAtoms
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-5e3eecc1018c>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'pylab'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
48,/mnt/fit-Knowledgezoo/jupyternotebooks/tfgg@magres-format/notebooks/Structural properties.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function
import warnings
warnings.filterwarnings(""ignore"") 
%pylab inline

from magres.atoms import MagresAtoms
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-5e3eecc1018c>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'pylab'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mfrom[0m [0mmagres[0m[0;34m.[0m[0matoms[0m [0;32mimport[0m [0mMagresAtoms[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'magres'
ImportError: No module named 'magres'

Executability                            : False
"
67,/mnt/fit-Knowledgezoo/jupyternotebooks/sr320@LabDocs/jupyter_nbs/sam/20161117_docker_oly_vcf_analysis.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
date
------------------

[0;36m  File [0;32m""<ipython-input-1-cf38163fa452>""[0;36m, line [0;32m3[0m
[0;31m    %%bash[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-cf38163fa452>, line 3)

Executability                            : False
"
72,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/Bessel/DrumHead.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np, scipy as sp, matplotlib.pyplot as plt, seaborn as sns
sns.set_style({'axes.grid' : False})

from mpl_toolkits.mplot3d import Axes3D
from ipywidgets import interact, fixed
from matplotlib import cm
from numpy import sin, cos, arctan, arctan2, array, sqrt, linspace, meshgrid, pi
#%matplotlib inline
import scipy.special
from scipy.special import j0,j1,jn,y0,y1,yn, jn_zeros
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-047ec445a849>[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0;32mfrom[0m [0mmpl_toolkits[0m[0;34m.[0m[0mmplot3d[0m [0;32mimport[0m [0mAxes3D[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0mfixed[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mcm[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mfrom[0m [0mnumpy[0m [0;32mimport[0m [0msin[0m[0;34m,[0m [0mcos[0m[0;34m,[0m [0marctan[0m[0;34m,[0m [0marctan2[0m[0;34m,[0m [0marray[0m[0;34m,[0m [0msqrt[0m[0;34m,[0m [0mlinspace[0m[0;34m,[0m [0mmeshgrid[0m[0;34m,[0m [0mpi[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
75,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/DiffGeo/DesernoReviewProblems.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np, scipy as sp, pandas as pd, seaborn as sns
from ipywidgets import interact, fixed
from matplotlib import pyplot as plt
from numpy import sqrt, cosh, sinh, linspace
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-7225070011e5>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m,[0m [0mscipy[0m [0;32mas[0m [0msp[0m[0;34m,[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m,[0m [0mseaborn[0m [0;32mas[0m [0msns[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0mfixed[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mfrom[0m [0mnumpy[0m [0;32mimport[0m [0msqrt[0m[0;34m,[0m [0mcosh[0m[0;34m,[0m [0msinh[0m[0;34m,[0m [0mlinspace[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
78,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/Fourier/Plucked and Hammered String.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np, scipy as sp, seaborn as sns
#%matplotlib inline
from matplotlib import pyplot as plt
from ipywidgets import interact, fixed
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-d2e0aa1b2aaf>[0m in [0;36m<module>[0;34m[0m
[1;32m      4[0m [0;31m#%matplotlib inline[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0mfixed[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
79,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/Fourier/SinAndCosineSolutions.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
%matplotlib inline
import matplotlib as mpl, numpy as np, pandas as pd, seaborn as sns
from matplotlib import pyplot as plt
------------------

[0;36m  File [0;32m""<ipython-input-1-1b48c51e0c06>""[0;36m, line [0;32m6[0m
[0;31m    from matplotlib import pyplot as plt[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-1b48c51e0c06>, line 6)

Executability                            : False
"
80,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/Laplace/Steady State Temp in Rectangular Plate (analytic).ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
from matplotlib import pyplot as plt
from ipywidgets import interact
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-a8e3d16229b3>[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
84,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/PowerSeries/Taylor Series.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
from numpy import linspace, pi, sin, zeros_like
import scipy as sp
from scipy.misc import factorial
import matplotlib.pyplot as plt
#%matplotlib inline
from matplotlib import animation
from ipywidgets import interact,fixed
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-f797c221a462>[0m in [0;36m<module>[0;34m[0m
[1;32m      8[0m [0;31m#%matplotlib inline[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0manimation[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m[0mfixed[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'matplotlib'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
85,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/PressureWaves/PressureWaveInteractive.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interact
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-4bd86e564de8>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
86,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/SeriesSolutions/Airy.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from ipywidgets import interact
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-781dae66f0ab>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
87,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@MathematicalPhysics/SeriesSolutions/Legendre.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interact
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-4bd86e564de8>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
106,/mnt/fit-Knowledgezoo/jupyternotebooks/DawesLab@LabNotebooks/HIstogram Comparisons.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from plotly.graph_objs import *
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-9-6b439445e344>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mplotly[0m[0;34m.[0m[0mgraph_objs[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mplotly[0m[0;34m.[0m[0moffline[0m [0;32mimport[0m [0mdownload_plotlyjs[0m[0;34m,[0m [0minit_notebook_mode[0m[0;34m,[0m [0mplot[0m[0;34m,[0m [0miplot[0m[0;34m[0m[0m
[1;32m      3[0m [0minit_notebook_mode[0m[0;34m([0m[0mconnected[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'plotly'
ImportError: No module named 'plotly'

Executability                            : False
"
108,/mnt/fit-Knowledgezoo/jupyternotebooks/DawesLab@LabNotebooks/Live widget demo.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib notebook
import pandas as pd  
import matplotlib.pyplot as plt  
from ipywidgets import *  
from IPython.display import display  
import ipywidgets  
plt.style.use('ggplot')

NUMBER_OF_PINGS = 4

#displaying the text widget
text = widgets.Text(description=""Domain to ping"", width=200)  
display(text)

#preparing the plot 
data = pd.DataFrame()  
x = range(1,NUMBER_OF_PINGS+1)  
plots = dict()  
fig, ax = plt.subplots()  
plt.xlabel('iterations')  
plt.ylabel('ms')  
plt.xticks(x)  
plt.show()

#preparing a container to put in created checkbox per domain
checkboxes = []  
cb_container = widgets.HBox()  
display(cb_container)

#add button that updates the graph based on the checkboxes
button = widgets.Button(description=""Update the graph"")

#function to deal with the added domain name
def handle_submit(sender):  
    #a part of the magic inside python : pinging
    res = !ping -c {NUMBER_OF_PINGS} {text.value}
    print(res)
    hits = res.grep('64 bytes').fields(-2).s.replace(""time="","""").split()
    if len(hits) == 0:
        print(""Domain gave error on pinging"")
    else:
         #rebuild plot based on ping result
        data[text.value] = hits
        data[text.value] = data[text.value].astype(float)
        plots[text.value], = ax.plot(x, data[text.value], label=text.value)
        plt.legend()
        plt.draw()
        #add a new checkbox for the new domain
        checkboxes.append(widgets.Checkbox(description = text.value, value=True, width=90))
        cb_container.children=[i for i in checkboxes]
        if len(checkboxes) == 1:
            display(button)

#function to deal with the checkbox update button       
def on_button_clicked(b):  
    for c in cb_container.children:
        if not c.value:
            plots[c.description].set_visible(False)
        else:
            plots[c.description].set_visible(True)
    plt.legend()
    plt.draw()

button.on_click(on_button_clicked)  
text.on_submit(handle_submit)  
plt.show()  
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-4d62ea14ab2c>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0m
[1;32m      8[0m [0;32mimport[0m [0mipywidgets[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
136,/mnt/fit-Knowledgezoo/jupyternotebooks/jhamrick@blog/source/notebooks/reproducible-plots.ipynb,"3.5
An error occurred while executing the following cell:
------------------
url = ""https://gist.githubusercontent.com/jhamrick/cfa18fcd3032ba435ec78a194b1447be/raw/4a4052c56161df8e454a61ab5286a769799c64b8/task_data.csv""
urlretrieve(url, ""task_data.csv"")
print(""Downloaded task_data.csv"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-8b239d8bb9e7>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0murl[0m [0;34m=[0m [0;34m""https://gist.githubusercontent.com/jhamrick/cfa18fcd3032ba435ec78a194b1447be/raw/4a4052c56161df8e454a61ab5286a769799c64b8/task_data.csv""[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0murlretrieve[0m[0;34m([0m[0murl[0m[0;34m,[0m [0;34m""task_data.csv""[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0mprint[0m[0;34m([0m[0;34m""Downloaded task_data.csv""[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    196[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    197[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 198[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    199[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    200[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'task_data.csv'
PermissionError: [Errno 13] Permission denied: 'task_data.csv'

Executability                            : False
"
139,/mnt/fit-Knowledgezoo/jupyternotebooks/roskakori@talks/pygraz/xpathnamespace/XML namespaces and XPath with Python.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from lxml import etree
people_root = etree.parse(people_xml_path)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-34a9f3a9218a>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mlxml[0m [0;32mimport[0m [0metree[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mpeople_root[0m [0;34m=[0m [0metree[0m[0;34m.[0m[0mparse[0m[0;34m([0m[0mpeople_xml_path[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'lxml'
ImportError: No module named 'lxml'

Executability                            : False
"
142,/mnt/fit-Knowledgezoo/jupyternotebooks/roskakori@talks/python_for_testers/Fileformats.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from lxml import etree
people_root = etree.parse(people_xml_path)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-12-34a9f3a9218a>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mlxml[0m [0;32mimport[0m [0metree[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mpeople_root[0m [0;34m=[0m [0metree[0m[0;34m.[0m[0mparse[0m[0;34m([0m[0mpeople_xml_path[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'lxml'
ImportError: No module named 'lxml'

Executability                            : False
"
144,/mnt/fit-Knowledgezoo/jupyternotebooks/roskakori@talks/python_for_testers/Logging.ipynb,"3.5
An error occurred while executing the following cell:
------------------
log = logging.getLogger('numbers')
result = 0
numbers_path = os.path.join('examples', 'numbers.txt')
log.info('read numbers from %s', numbers_path)
line_number = 0
try:
    with open(numbers_path, 'r', encoding='utf-8') as numbers_file:
        for line_number, line in enumerate(numbers_file, 1):
            number_text = line.rstrip('\n\r')
            if number_text != '':
                log.debug('  %d: %s', line_number, number_text)
                result += int(number_text)
    log.info('sum = %d', result)
except FileNotFoundError:
    log.warning('cannot find numbers file %s, using default %d', result)
except OSError as error:
    log.error(error)
except TypeError as error:
    log.error(
        '%s:%d: line must be a number but is: %s',
        config_path, line_number, number_text)
except Exception as error:
    log.exception(error)  # show stack trace for unexpected errors
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-2-689ba4a3c88d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0mlog[0m [0;34m=[0m [0mlogging[0m[0;34m.[0m[0mgetLogger[0m[0;34m([0m[0;34m'numbers'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      2[0m [0mresult[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mnumbers_path[0m [0;34m=[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mjoin[0m[0;34m([0m[0;34m'examples'[0m[0;34m,[0m [0;34m'numbers.txt'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mlog[0m[0;34m.[0m[0minfo[0m[0;34m([0m[0;34m'read numbers from %s'[0m[0;34m,[0m [0mnumbers_path[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0mline_number[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'os' is not defined
NameError: name 'os' is not defined

Executability                            : False
"
151,/mnt/fit-Knowledgezoo/jupyternotebooks/sfstoolbox@data/sphbesselh_zeros/sphHankel_zeros.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline

import mpmath as mp
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.markers import MarkerStyle
from matplotlib.patches import Circle
import scipy.signal as sig

mp.dps = 500
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-5021ba8f60e3>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'matplotlib'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0mmpmath[0m [0;32mas[0m [0mmp[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'mpmath'
ImportError: No module named 'mpmath'

Executability                            : False
"
162,/mnt/fit-Knowledgezoo/jupyternotebooks/roguephysicist@SHGYield/example/sshg-tutorial.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import yaml
import numpy as np
from scipy import constants

# These packages are only for displaying plots in this tutorial
import matplotlib
import matplotlib.pyplot as plt
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-68f277585c9f>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0myaml[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mscipy[0m [0;32mimport[0m [0mconstants[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'yaml'
ModuleNotFoundError: No module named 'yaml'

Executability                            : False
"
179,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/init.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
#sudo timedatectl set-timezone Asia/Tokyo
sudo timedatectl
------------------

[0;36m  File [0;32m""<ipython-input-1-00fc06b10e5c>""[0;36m, line [0;32m5[0m
[0;31m    sudo timedatectl[0m
[0m                   ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-00fc06b10e5c>, line 5)

Executability                            : False
"
181,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/test_bash.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
uname
echo ""ほげ""
------------------

[0;36m  File [0;32m""<ipython-input-1-37de45bc0266>""[0;36m, line [0;32m5[0m
[0;31m    echo ""ほげ""[0m
[0m            ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-37de45bc0266>, line 5)

Executability                            : False
"
184,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Git/basic.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
directory=gittest

### branchesディレクトリの確認
cd ${directory}
echo ""### .git/branches""
echo ""================================================""
ls .git/branches
echo ""================================================""
echo
------------------

[0;36m  File [0;32m""<ipython-input-1-655a02bb9bd6>""[0;36m, line [0;32m7[0m
[0;31m    cd ${directory}[0m
[0m       ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-655a02bb9bd6>, line 7)

Executability                            : False
"
185,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/HelloWorld.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### コンパイル
javac HelloWorld.java

### 実行
java HelloWorld
------------------

[0;36m  File [0;32m""<ipython-input-1-f23cd94b924b>""[0;36m, line [0;32m5[0m
[0;31m    javac HelloWorld.java[0m
[0m                   ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-f23cd94b924b>, line 5)

Executability                            : False
"
186,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/ISBN4-7973-2703-0_IteratorPattern.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=Book

### ソースの編集
cat <<- EOS > ${name}.java
public class ${name} {
    private String name;
    public Book(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }
}
EOS

### コンパイル
#javac ${name}.java
javac -encoding UTF-8 ${name}.java
------------------

[0;36m  File [0;32m""<ipython-input-1-a79df0003050>""[0;36m, line [0;32m8[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-a79df0003050>, line 8)

Executability                            : False
"
187,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/Install.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash

### Ubuntuにjava8をインストール
#sudo apt-get -y install openjdk-8-jdk

### JUnitの取得
#wget http://central.maven.org/maven2/junit/junit/4.11/junit-4.11.jar
------------------


UsageError: Line magic function `%%bash` not found.

Executability                            : False
"
188,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/JUnitTest.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
name=JUnitTest

### ソースの編集
cat <<- EOS > ${name}.java
import static org.junit.Assert.*;
import org.junit.Test;

public class ${name} {
        public static int num(){
                return 10;
        }

        @Test
        public void test(){
                assertEquals(10, num());
        }
}
EOS

### ソースの確認
cat ${name}.java
------------------

[0;36m  File [0;32m""<ipython-input-1-0f923b1796a6>""[0;36m, line [0;32m7[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-0f923b1796a6>, line 7)

Executability                            : False
"
189,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/Work.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=Work

### ソースの確認
cat ${name}.java
------------------

[0;36m  File [0;32m""<ipython-input-1-1cb66c200d99>""[0;36m, line [0;32m8[0m
[0;31m    cat ${name}.java[0m
[0m        ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-1cb66c200d99>, line 8)

Executability                            : False
"
190,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerDBStep1-2.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=PostgresConnect
classpath="".:/root/git_jupyter_notebook/Java/postgresql-42.1.1.jar""

### ソースの編集
cat <<- EOS > ${name}.java
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class ${name} {
  public static void main(String[] args) throws Exception{
    Connection connection = null;
    Statement statement = null;
    ResultSet resultSet = null;
    
    try{
      //# 接続。pg_shadowを表示するため管理者(postgres)
      connection = DriverManager.getConnection(""jdbc:postgresql://10.136.3.189:5432/jsd_test"", ""postgres"", ""pass"");
      statement = connection.createStatement();
      
      //# SQL文発行
      resultSet = statement.executeQuery(""SELECT * FROM pg_shadow"");

      //# 値の取得。resultSetから値を取り出している。fieldsに取り出した値を1行ずつ追加している
      List<String> fields = new ArrayList<String>();
      ResultSetMetaData rsmd = resultSet.getMetaData();
      for (int i = 1; i <= rsmd.getColumnCount(); i++) {
        fields.add(rsmd.getColumnName(i));
      }

      //# 結果の出力
      int rowCount = 0;
      while (resultSet.next()) {
        rowCount++;

        System.out.println(""---------------------------------------------------"");
        System.out.println(""--- Rows:"" + rowCount);
        System.out.println(""---------------------------------------------------"");

        //# 値は、「resultSet.getString(<フィールド名>)」で取得する。
        for (String field : fields) {
          System.out.println(field + "":"" + resultSet.getString(field));
        }
      }
            
    } finally {
      //# 接続を切断する
      if (resultSet != null) {
        resultSet.close();
      }
      if (statement != null) {
        statement.close();
      }
      if (connection != null) {
        connection.close();
      }
    }
  }
}
EOS

### コンパイル
#javac ${name}.java
javac -encoding UTF-8 ${name}.java

### 実行
java -classpath ${classpath} ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-3bae8d8f0600>""[0;36m, line [0;32m9[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-3bae8d8f0600>, line 9)

Executability                            : False
"
191,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerDBStep10.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=ConnectDb
classpath="".:/root/git_jupyter_notebook/Java/postgresql-42.1.1.jar""
#classpath="".:/Users/ftakao2007/jupyter/jupyter_notebook/Java/postgresql-42.1.1.jar""

### ソースの編集
cat <<- EOS > ${name}.java
import java.sql.Connection;
import java.sql.DriverManager;

class ${name} {
  static Connection getConnection() throws Exception{
    Connection con = null;
    
    //# 接続
    con = DriverManager.getConnection(""jdbc:postgresql://localhost:5432/ftakao2007_development"", ""ftakao2007"", ""pass"");
    //#con = DriverManager.getConnection(""jdbc:postgresql://10.136.3.189:5432/jsd_development"", ""jsd"", ""pass"");
    return con;
  }
}
EOS

### コンパイル(デバッグ目的。本来はコンパイルしなくても他のコードをコンパイルすると自動でこのコードもコンパイルされる)
javac -encoding UTF-8 ${name}.java
------------------

[0;36m  File [0;32m""<ipython-input-1-3c37ac744c8b>""[0;36m, line [0;32m10[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-3c37ac744c8b>, line 10)

Executability                            : False
"
192,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerGUIStep1-4.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=GUITest
#classpath="".:/root/git_jupyter_notebook/Java/postgresql-42.1.1.jar""
#classpath="".:/Users/ftakao2007/jupyter/jupyter_notebook/Java/postgresql-42.1.1.jar""


### ソースの編集
cat <<- EOS > ${name}.java

import java.awt.*;
import java.awt.event.*;

class PrefFrame extends Frame {
  //# コンストラクタ
  public PrefFrame(String title) {
    //#フレームのタイトルの設定
    setTitle(title);

    //#ウィンドウを閉じる時のイベント処理。無名クラス
    addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        System.exit(0);
      }
    });
  }
}

public class ${name} {
  public static void main(String args[]){
    //# PrefFrameクラスのインスタンスを生成。コンストラクタを呼び出している
    PrefFrame frm = new PrefFrame(""都道府県マスター"");
    //# Frameクラスから継承したメソッドを利用
    //# ウィンドウの表示位置
    frm.setLocation(300, 200);
    //# ウィンドウのサイズ
    frm.setSize(250, 350);
    //# ウィンドウの背景色
    //# Color.LIGHT_GRAYはColorクラスの定数
    frm.setBackground(Color.LIGHT_GRAY);
    //# ウィンドウを表示する
    frm.setVisible(true);
  }
}
EOS

### コンパイル
#javac ${name}.java
javac -encoding UTF-8 ${name}.java

### 実行
#java -classpath ${classpath} ${name}
java  ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-1ca2d12fd9e3>""[0;36m, line [0;32m11[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-1ca2d12fd9e3>, line 11)

Executability                            : False
"
193,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerGUIStep5_DBGUI.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=GUISql
classpath="".:/home/prefuser/jupyter/python/jupyter_notebook/Java/postgresql-42.1.1.jar""
#classpath="".:/root/git_jupyter_notebook/Java/postgresql-42.1.1.jar""
#classpath="".:/Users/ftakao2007/jupyter/jupyter_notebook/Java/postgresql-42.1.1.jar""


### ソースの編集
cat <<- EOS > ${name}.java

import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
//#import java.util.ArrayList;
//#import java.util.List;

class PrefFrame extends Frame implements ActionListener {
    //# コンポーネントを定義。各クラスのメソッドが利用できるようにメソッド外で定義する
    Label lb1;
    TextArea txtar1;
    Button btn1, btn2, btn3;
    
    public PrefFrame(String title) {
        setTitle(title);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        //# ラベル。BorderLayoutの頭にラベルを表示
        lb1 = new Label(""ボタンをクリックしてください。"",Label.CENTER);
        add(lb1, BorderLayout.NORTH);
        
        //# テキストエリア。BorderLayoutの中央にテキストエリアを表示
        txtar1 = new TextArea();
        add(txtar1, BorderLayout.CENTER);
        
        //# パネル。GridLayoutを指定
        Panel pn1 = new Panel();
        pn1.setLayout(new GridLayout(1, 3));
        
        //# ボタンの設定とパネルへ追加
        btn1 = new Button(""表示"");
        btn1.addActionListener(this);
        pn1.add(btn1);
        
        //# ボタンの設定とパネルへ追加
        btn2 = new Button(""クリア"");
        btn2.addActionListener(this);
        pn1.add(btn2);

        //# ボタンの設定とパネルへ追加
        btn3 = new Button(""終了"");
        btn3.addActionListener(this);
        pn1.add(btn3);
        
        //# パネル。BorderLayoutの下にパネルを表示
        add(pn1, BorderLayout.SOUTH);
    }
  
    //# イベントが発生すると呼び出されるイベントハンドラのactionPerfomed()メソッド
    public void actionPerformed (ActionEvent e) {
        if (e.getSource() == btn1) {
            prefDisplay();
        } else if (e.getSource() == btn2) {
            txtar1.setText("""");
        } else {
            System.exit(0);
        }
    }
    
    //#private void prefDisplay () {
    private void prefDisplay () {
        Statement statement = null;
        ResultSet resultSet = null;
        Connection connection = null;
        
        try {
            //# DB接続
            Class.forName(""org.postgresql.Driver"");
            connection = DriverManager.getConnection(""jdbc:postgresql://10.136.3.189:5432/jsd_development"", ""jsd"", ""pass"");
            statement = connection.createStatement();
            
            //# SQL発行
            resultSet = statement.executeQuery(""SELECT * FROM people"");

            //# 値の取得
            StringBuffer temp = new StringBuffer();

            while(resultSet.next()){
                int id = resultSet.getInt(""id"");
                String name = resultSet.getString(""name"");
                int age = resultSet.getInt(""age"");
                String address = resultSet.getString(""address"");
                temp.append(id + "" \n"" + ""    name: "" + name + ""\n    age: "" + age + ""\n    address: "" + address + ""\n\n"");
            }

            txtar1.setText(temp.toString());

            //# DB切断
            statement.close();
            connection.close();
            connection.close();
            
        } catch(Exception e) {
            System.out.println(""例外発生："" + e );
        }
    }
}

public class $name {
    public static void main(String args[]){
    
        PrefFrame frm = new PrefFrame(""都道府県マスター"");
        //# フレームの設定
        frm.setLocation(300,200);
        frm.setSize(250,350);
        frm.setBackground(Color.LIGHT_GRAY);
        frm.setVisible(true);
    }
}
EOS

### コンパイル
#javac ${name}.java
javac -encoding UTF-8 ${name}.java

### 実行
java -classpath ${classpath} ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-3970a7d93e74>""[0;36m, line [0;32m12[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-3970a7d93e74>, line 12)

Executability                            : False
"
194,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerGUIStep6-8.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=GUITest6
#classpath="".:/root/git_jupyter_notebook/Java/postgresql-42.1.1.jar""
#classpath="".:/Users/ftakao2007/jupyter/jupyter_notebook/Java/postgresql-42.1.1.jar""

### ソースの編集
cat <<- EOS > ${name}.java

import java.awt.*;
import java.awt.event.*;

class PrefFrame extends Frame implements ActionListener {
    Label lb1;
    TextArea txtar1;
    Button btn1, btn2, btn3;
    
    public PrefFrame(String title) {
        setTitle(title);

        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        //# ラベル
        lb1 = new Label(""ボタンをクリックしてください。"",Label.CENTER);
        //# フォントがSerif、書体がBOLD、ポイントが14になる
        Font f = new Font(""Serif"", Font.BOLD, 14);
        lb1.setFont(f);
        //# 文字の色が青色になる
        lb1.setForeground(Color.blue);
        add(lb1, BorderLayout.NORTH);
        
        //# テキストエリア
        txtar1 = new TextArea();
        //# フォントがDialog、書体がPLAIN(標準)、ポイントが16になる
        txtar1.setFont(new Font(""Dialog"", Font.PLAIN, 16));
        //# 文字の色がダークグレイになる
        txtar1.setForeground(new Color(64,64,64));
        add(txtar1, BorderLayout.CENTER);
        
        //# パネル
        Panel pn1 = new Panel();
        pn1.setLayout(new GridLayout(1, 3));
        
        //# ボタン1
        btn1 = new Button(""表示"");
        btn1.addActionListener(this);
        pn1.add(btn1);
        
        //# ボタン2
        btn2 = new Button(""クリア"");
        btn2.addActionListener(this);
        pn1.add(btn2);

        //# ボタン3
        btn3 = new Button(""終了"");
        btn3.addActionListener(this);
        //# 背景色がダークグレイになる
        btn3.setBackground(new Color(255,0,255));
        //# 前景色(文字色)がマゼンダになる
        btn3.setForeground(new Color(255,255,255));
        pn1.add(btn3);
        
        //# パネル
        add(pn1, BorderLayout.SOUTH);
    }
  
    public void actionPerformed (ActionEvent e) {
        if (e.getSource() == btn1) {
            prefDisplay();
        } else if (e.getSource() == btn2) {
            txtar1.setText("""");
        } else {
            System.exit(0);
        }
    }
    
    //# クラス内からしか使わないのでアクセス修飾子はprivate
    private void prefDisplay () {
        StringBuffer temp = new StringBuffer();
        temp.append(""1"" + ""\t"");
        temp.append(""Hokkaido"" + ""\n"");
        temp.append(""2"" + ""\t"");
        temp.append(""Aomori"" + ""\n"");
        temp.append(""3"" + ""\t"");
        temp.append(""Iwate"" + ""\n"");
        temp.append(""4"" + ""\t"");
        temp.append(""Miyagi"" + ""\n"");
        temp.append(""5"" + ""\t"");
        temp.append(""Akita"" + ""\n"");
        txtar1.setText(temp.toString());
    }
            
}

public class $name {
    public static void main(String args[]){
        PrefFrame frm = new PrefFrame(""都道府県マスター"");
        //# フレームの設定
        frm.setLocation(300,200);
        frm.setSize(250,350);
        frm.setBackground(Color.LIGHT_GRAY);
        frm.setVisible(true);
    }
}
EOS

### コンパイル
#javac ${name}.java
javac -encoding UTF-8 ${name}.java

### 実行
#java -classpath ${classpath} ${name}
java ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-bafd0611f31b>""[0;36m, line [0;32m10[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-bafd0611f31b>, line 10)

Executability                            : False
"
195,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerStep1-9.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
name=HelloWorld

### ソースの編集
cat <<- EOS > ${name}.java
public class ${name} {
    public static void main (String[] args) {
        System.out.println(""Hello World !!"");
    }
}
EOS

### ソースの確認
cat ${name}.java

### コンパイル
javac ${name}.java

### 実行
echo ""================================================""
java ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-1fda45063530>""[0;36m, line [0;32m7[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-1fda45063530>, line 7)

Executability                            : False
"
196,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerStep13-16.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=PersonTest

### ソースの編集
cat <<- EOS > ${name}.java

class Person {
  //# フィールド（変数）の定義
  String name;
  int age;
  String address;
  
  //# コンクラスタの定義。仮引数とフィールド名を区別するために仮引数にはアンダースコアをつけている
  Person(String _name, int _age, String _address){
    name = _name;
    age = _age;
    address = _address;
  }
}

public class ${name} {
  public static void main (String[] args) {

    //# new演算してインスタンスを生成。頭のPersonはクラス名。newの後ろはコンストラクタ
    Person taro = new Person(""Taro"", 21, ""Tokyo"");
    System.out.println(""Name:"" + taro.name + "" Age:"" + taro.age + "" Address:"" + taro.address);

    Person hanako = new Person(""Hanako"", 18, ""Hokkaido"");
    System.out.println(""Name:"" + taro.name + "" Age:"" + taro.age + "" Address:"" + taro.address);

  }
}
EOS

### コンパイル
#javac ${name}.java
### コメントアウトすら文字化けするのでエンコーディングを指定
javac -encoding UTF-8 ${name}.java

### 実行
java ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-91ba778625ee>""[0;36m, line [0;32m8[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-91ba778625ee>, line 8)

Executability                            : False
"
197,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerStep17-23.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=PersonTest

### ソースの編集
cat <<- EOS > ${name}.java

class Person {
  String name;
  int age;
  String address;
  
  Person(String _name, int _age, String _address){
    name = _name;
    age = _age;
    address = _address;
  }
  
  //# メソッドを定義
  void say(){
    System.out.println(""Name:"" + name + "" Age:"" + age + "" Address:"" + address);
  }
}

public class ${name} {
  public static void main (String[] args) {

    //# 配列の定義。このnewは配列名の宣言
    //# 配列のデータ型[] 配列名 = 配列の要素の型[要素数];
    Person[] people = new Person[2];
    //# このnewはインスタンスの生成
    people[0] = new Person(""Taro"", 21, ""Tokyo"");
    people[1] = new Person(""Hanako"", 18, ""Hokkaido"");
    people[0].say();
    people[1].say();
  }
}
EOS

### コンパイル
#javac ${name}.java
javac -encoding UTF-8 ${name}.java

### 実行
java ${name}
------------------

[0;36m  File [0;32m""<ipython-input-1-74a6386ad377>""[0;36m, line [0;32m8[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-74a6386ad377>, line 8)

Executability                            : False
"
198,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerStep24-27.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### パッケージ用ディレクトリの作成
mkdir -p com/github/ftakao2007/test
------------------

[0;36m  File [0;32m""<ipython-input-1-fac8321675d4>""[0;36m, line [0;32m5[0m
[0;31m    mkdir -p com/github/ftakao2007/test[0m
[0m               ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-fac8321675d4>, line 5)

Executability                            : False
"
199,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Java/sunjava.seesaa.net_JavaProgrammingBeginnerStep30.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 変数の設定
name=Person

### ソースの編集
cat <<- EOS > ${name}.java

class ${name} {
  String name;
  int age;
  String address;
  
  Person(String _name, int _age, String _address){
    name = _name;
    age = _age;
    address = _address;
  }
  
  void say(){
    System.out.println(""Name:"" + name + "" Age:"" + age + "" Address:"" + address);
  }
  
  void setName(String _name){
    name = _name;
  }
  
  void setAge(int _age){
    if (_age > 0) {
      age = _age;
    }else{
      age = 0;
    }
  }
  
  void setAddress(String _address){
    address = _address;
  }
  
  String getName(){
    return name;
  }
  
  int getAge(){
    return age;
  }
  
  String getAddress(){
    return address;
  }
}
EOS
------------------

[0;36m  File [0;32m""<ipython-input-1-c75ac248a9d5>""[0;36m, line [0;32m8[0m
[0;31m    cat <<- EOS > ${name}.java[0m
[0m                  ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-c75ac248a9d5>, line 8)

Executability                            : False
"
202,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/Ruby/Install.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### Gemfileにpry-docが含まれていることを確認
cat /Users/ftakao2007/jupyter/Gemfile
------------------


UsageError: Line magic function `%%bash` not found.

Executability                            : False
"
203,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/UML/01_UML.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash

current_dir=`pwd`
isbn=""ISBN4-7973-2703-0""
fig=""Fig.0-6""

### サンプルコードの作成
cat <<- EOS > ${current_dir}/plantuml/${isbn}_${fig}.pu
@startuml
skinparam classAttributeIconSize 0
skinparam sequenceParticipant underline

actor User
participant "":Client"" as A
participant "":Server"" as B
participant "":Device"" as C

User -> A: work
activate A

A -> B: open
activate B
B --> A
deactivate B

A -> B: print
activate B
B -> C: write
activate C
C --> B
deactivate C
B --> A
deactivate B

A -> B: close
activate B
B --> A
deactivate B

A --> User
deactivate A


@enduml
EOS

### サンプルコードからUMLの図を作成
java -jar plantuml.jar -o ${current_dir}/img -tpng ${current_dir}/plantuml/${isbn}_${fig}.pu
------------------

[0;36m  File [0;32m""<ipython-input-1-f486e9b23e13>""[0;36m, line [0;32m5[0m
[0;31m    current_dir=`pwd`[0m
[0m                ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-f486e9b23e13>, line 5)

Executability                            : False
"
204,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/UML/install.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash

### PlantUMLインストール(Ubuntu16.04)
### ※ Javaはインストール済みの前提
#sudo apt-get install -y graphviz doxygen

### Mac
# brew install graphviz

### plantuml.jarはググってダウンロードする
ls plantuml.jar
------------------

[0;36m  File [0;32m""<ipython-input-1-64664a8219e7>""[0;36m, line [0;32m13[0m
[0;31m    ls plantuml.jar[0m
[0m              ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-64664a8219e7>, line 13)

Executability                            : False
"
205,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/jQuery/basic.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 必要な設定の読み込み
source ${HOME}/secrets
name=jquery.html

### ソースの編集
cat <<- 'EOS' > ${name}
    
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
<html>
  <head>
    <meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"">
    <meta charset=""utf-8"">
    <script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js""></script>
    <title>おばけ</title>
    <script>
      $(function() {
        $('p').click(function() {$(this).fadeOut('slow');});
      });
    </script>
  </head>

  <body>
    <p>おばけー</p>
  </body>
</html>

EOS

### ソースの転送
sshpass -p ""${pass}"" scp ${name} ${user}@${host}:${path}
echo ""created ${host}:${path}/${name}""
------------------

[0;36m  File [0;32m""<ipython-input-1-ecd0c9828f1d>""[0;36m, line [0;32m5[0m
[0;31m    source ${HOME}/secrets[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-ecd0c9828f1d>, line 5)

Executability                            : False
"
206,/mnt/fit-Knowledgezoo/jupyternotebooks/ftakao2007@python/jupyter_notebook/jQuery/tmp.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%bash
### 必要な設定の読み込み
name=jquery_tmp.html

### ソースの編集
cat <<- 'EOS' > ${name}

<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
<html>
  <head>
    <meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"">
    <meta charset=""utf-8"">
    <script src=""http://ajax.googleapis.com/ajax/libs/jquery/1.7.0/jquery.min.js""></script>
    <title>Test Page</title>
    <style>
      #section-1 {
        background-color: #C8E6C9;
      }
      #section-2 {
        background-color: #FFF9C4;
      }
      .child1 {
        text-decoration: underline;
      }
      .child2 {
        font-size: 24px;
      }
      .child3 {
        color: red;
      }
    </style>
  </head>

  <body>
    <section id=""section-1"">
      <h2>Section1</h2>
      <p class=""child1"">Child node1</p>
      <p class=""child2"">Child node2</p>
      <p class=""child3"">Child node3</p>
    </section>
    <section id=""section-2"">
      <h2>Section2</h2>
      <p class=""child1"">Child node1</p>
      <p class=""child2"">Child node2</p>
      <p class=""child3"">Child node3</p>
    </section>
  </body>
</html>

EOS
------------------

[0;36m  File [0;32m""<tokenize>""[0;36m, line [0;32m20[0m
[0;31m    }[0m
[0m    ^[0m
[0;31mIndentationError[0m[0;31m:[0m unindent does not match any outer indentation level

IndentationError: unindent does not match any outer indentation level (<tokenize>, line 20)

Executability                            : False
"
210,/mnt/fit-Knowledgezoo/jupyternotebooks/gena@gena.github.io/experiments/three.js.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%javascript
require.config({
    paths: {
        threejs: '//threejs.org/build/three'
    }
});
------------------

[0;36m  File [0;32m""<ipython-input-1-f75676eca08f>""[0;36m, line [0;32m3[0m
[0;31m    %%javascript[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-f75676eca08f>, line 3)

Executability                            : False
"
239,/mnt/fit-Knowledgezoo/jupyternotebooks/sarathid@Learning/Deep_learning_ND/Week 1/dlnd-your-first-network/DLND-your-first-network/dlnd-your-first-neural-network.ipynb,"3.6
Cell execution timed out
Executability                            : False
"
262,/mnt/fit-Knowledgezoo/jupyternotebooks/robblack007@JupyterNotebooks/Python/Excel/Generador trayectorias.ipynb,"3.6
An error occurred while executing the following cell:
------------------
graf_trayectorias(""QO2 -> 3i -> LB -> 2j -> 1.0i+1.0j -> FS"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-48-e83b12fceabf>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mgraf_trayectorias[0m[0;34m([0m[0;34m""QO2 -> 3i -> LB -> 2j -> 1.0i+1.0j -> FS""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m<ipython-input-47-f471dda34dd6>[0m in [0;36mgraf_trayectorias[0;34m(especificacion)[0m
[1;32m     23[0m     [0max[0m[0;34m.[0m[0m_axis3don[0m [0;34m=[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m
[1;32m     24[0m     [0max[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mxs[0m[0;34m,[0m [0mys[0m[0;34m,[0m [0mzs[0m[0;34m,[0m [0;34m""k-""[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 25[0;31m     [0maxisEqual3D[0m[0;34m([0m[0max[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mNameError[0m: name 'axisEqual3D' is not defined
NameError: name 'axisEqual3D' is not defined

Executability                            : False
"
263,/mnt/fit-Knowledgezoo/jupyternotebooks/robblack007@JupyterNotebooks/Python/Pruebas/DLA.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# Diffusion Limited Aggregation fractal
# FB - 201004036
from PIL import Image
import random
import math

imgx = 256
imgy = 256
image = Image.new(""L"", (imgx, imgy))

# neighbor pixel directions
nx = [-1, -1, 0, 1, 1, 1, 0, -1]
ny = [0, 1, 1, 1, 0, -1, -1, -1]

maxIt = 256

xc = (imgx - 1) / 2
yc = (imgy - 1) / 2
rmax = min(xc, yc) - 1
# seed
image.putpixel((int(xc), int(yc)), 255) 

rm = 0.9
while rm < rmax:
    a = random.random() * math.pi * 2.0
    x = xc + rm * math.cos(a)
    y = yc + rm * math.sin(a)
    # random walk
    flag = False
    for i in range(maxIt):
        a = random.randint(0, 7)
        x = x + nx[a]
        y = y + ny[a]
        if x < 0 or x > (imgx - 1) or y < 0 or y > (imgy - 1):
            break
        if image.getpixel((x, y)) == 0:
            # check the neighbors
            for k in range(8):
                xn = x + nx[k]
                yn = y + ny[k]
                if image.getpixel((xn, yn)) > 0:
                    image.putpixel((int(x), int(y)), 255)
                    r = math.sqrt((x - xc) ** 2.0 + (y - yc) ** 2.0)
                    if r > rm:
                        rm = r
                        print (""%"" + str(int(100 * rm / rmax)))
                    flag = True
                    break
        if flag == True:
            break

image.save(""DLA.png"", ""PNG"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-5-cdc307222528>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;31m# Diffusion Limited Aggregation fractal[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0;31m# FB - 201004036[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mPIL[0m [0;32mimport[0m [0mImage[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mrandom[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmath[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'PIL'
ImportError: No module named 'PIL'

Executability                            : False
"
266,/mnt/fit-Knowledgezoo/jupyternotebooks/dodecatheon@golden-lotus/doubleturk.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
% matplotlib notebook
import matplotlib
% config InlineBackend.figure_format = 'pdf'
% matplotlib inline
# matplotlib.use('SVG')
import matplotlib.pyplot as plt
import numpy as np
from math import *
------------------


UsageError: Line magic function `%` not found.

Executability                            : False
"
267,/mnt/fit-Knowledgezoo/jupyternotebooks/dodecatheon@golden-lotus/nturk.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
% matplotlib notebook
import matplotlib
% config InlineBackend.figure_format = 'pdf'
% matplotlib inline
# matplotlib.use('SVG')
import matplotlib.pyplot as plt
import numpy as np
from math import *
------------------


UsageError: Line magic function `%` not found.

Executability                            : False
"
278,/mnt/fit-Knowledgezoo/jupyternotebooks/jtpio@jtpio.github.io/notebooks/de_bruijn_sequences/De_Bruijn_Sequences.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import networkx as nx
import matplotlib.pyplot as plt
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-6-a413e6d5facd>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      3[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'matplotlib'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
292,/mnt/fit-Knowledgezoo/jupyternotebooks/flothesof@SongCreator/IPython notebooks/Explore XML file names in wikifonia dump.ipynb,"3.5
Executability                            : True
Reproducibility                          : number of matched cells: 7 ; number of cells: 18
Reproducibility                          : matched ratio: 0.389 ; index of matched cells: [0, 2, 3, 8, 10, 11, 15]
-------------------------------------------
Source Code of a Unmatched Cell 1
-------------------------------------------
fnames = glob.glob(""../MusicXML_files/wikifonia20100503/*.xml"")
fnames[:10]

-----------------
Original output:
['../MusicXML_files/wikifonia20100503\\100.xml',
 '../MusicXML_files/wikifonia20100503\\1000.xml',
 '../MusicXML_files/wikifonia20100503\\1002.xml',
 '../MusicXML_files/wikifonia20100503\\1003.xml',
 '../MusicXML_files/wikifonia20100503\\1007.xml',
 '../MusicXML_files/wikifonia20100503\\1008.xml',
 '../MusicXML_files/wikifonia20100503\\101.xml',
 '../MusicXML_files/wikifonia20100503\\1011.xml',
 '../MusicXML_files/wikifonia20100503\\1019.xml',
 '../MusicXML_files/wikifonia20100503\\102.xml']
Executed output:
['../MusicXML_files/wikifonia20100503/4336.xml',
 '../MusicXML_files/wikifonia20100503/3399.xml',
 '../MusicXML_files/wikifonia20100503/3204.xml',
 '../MusicXML_files/wikifonia20100503/3677.xml',
 '../MusicXML_files/wikifonia20100503/3299.xml',
 '../MusicXML_files/wikifonia20100503/255.xml',
 '../MusicXML_files/wikifonia20100503/5213.xml',
 '../MusicXML_files/wikifonia20100503/729.xml',
 '../MusicXML_files/wikifonia20100503/939.xml',
 '../MusicXML_files/wikifonia20100503/1637.xml']
-------------------------------------------
Source Code of a Unmatched Cell 4
-------------------------------------------
root = tree.getroot()
root

-----------------
Original output:
<Element 'score-partwise' at 0x00000000054C96D8>
Executed output:
<Element 'score-partwise' at 0x7f6b756f0ef8>
-------------------------------------------
Source Code of a Unmatched Cell 5
-------------------------------------------
root.getchildren()

-----------------
Original output:
[<Element 'work' at 0x00000000054C9818>,
 <Element 'movement-number' at 0x00000000054C9908>,
 <Element 'movement-title' at 0x00000000054C9958>,
 <Element 'identification' at 0x00000000054C99A8>,
 <Element 'part-list' at 0x00000000054C9D18>,
 <Element 'part' at 0x00000000054C9F98>,
 <Element 'part' at 0x00000000054DD638>,
 <Element 'part' at 0x00000000054F2CC8>]
Executed output:
[<Element 'work' at 0x7f6b746825e8>,
 <Element 'movement-number' at 0x7f6b746826d8>,
 <Element 'movement-title' at 0x7f6b74682728>,
 <Element 'identification' at 0x7f6b74682778>,
 <Element 'defaults' at 0x7f6b74682a48>,
 <Element 'credit' at 0x7f6b74682e08>,
 <Element 'credit' at 0x7f6b74682ea8>,
 <Element 'credit' at 0x7f6b74682f98>,
 <Element 'part-list' at 0x7f6b74689098>,
 <Element 'part' at 0x7f6b74689318>]
-------------------------------------------
Source Code of a Unmatched Cell 6
-------------------------------------------
root.find('identification/creator').text

-----------------
Original output:
'Miles Davis'
Executed output:
'Bob Crewe, Bob Gaudio'
-------------------------------------------
Source Code of a Unmatched Cell 7
-------------------------------------------
root.find('movement-title').text

-----------------
Original output:
'All Blues'
Executed output:
'Silence is Golden'
-------------------------------------------
Source Code of a Unmatched Cell 9
-------------------------------------------
title_composer(fnames[0])

-----------------
Original output:
('Miles Davis', 'All Blues')
Executed output:
('Bob Crewe, Bob Gaudio', 'Silence is Golden')
-------------------------------------------
Source Code of a Unmatched Cell 12
-------------------------------------------
df = pd.DataFrame(data=metadata, index=fnames, columns=('composer', 'song_title'))
df.head(10)

-----------------
Original output:
                                                                    composer  \
../MusicXML_files/wikifonia20100503\100.xml                      Miles Davis   
../MusicXML_files/wikifonia20100503\1000.xml              Ukrainian folksong   
../MusicXML_files/wikifonia20100503\1002.xml                  Frederik Vahle   
../MusicXML_files/wikifonia20100503\1003.xml             Belle and Sebastian   
../MusicXML_files/wikifonia20100503\1007.xml             Belle and Sebastian   
../MusicXML_files/wikifonia20100503\1008.xml  Howard Greenfield, Neal Sedaka   
../MusicXML_files/wikifonia20100503\101.xml                   Charlie Parker   
../MusicXML_files/wikifonia20100503\1011.xml                  Ned Washington   
../MusicXML_files/wikifonia20100503\1019.xml           John Lennon, Yoko Ono   
../MusicXML_files/wikifonia20100503\102.xml               The Rolling Stones   

                                                         song_title  
../MusicXML_files/wikifonia20100503\100.xml               All Blues  
../MusicXML_files/wikifonia20100503\1000.xml  Gehe nicht, oh Gregor  
../MusicXML_files/wikifonia20100503\1002.xml    Schlaflied für Anne  
../MusicXML_files/wikifonia20100503\1003.xml            Get me away  
../MusicXML_files/wikifonia20100503\1007.xml           Storytelling  
../MusicXML_files/wikifonia20100503\1008.xml     Where the Boys Are  
../MusicXML_files/wikifonia20100503\101.xml            Anthropology  
../MusicXML_files/wikifonia20100503\1011.xml    The Nearness of You  
../MusicXML_files/wikifonia20100503\1019.xml             Happy Xmas  
../MusicXML_files/wikifonia20100503\102.xml          Paint it black  
Executed output:
                                                               composer  \
../MusicXML_files/wikifonia20100503/4336.xml      Bob Crewe, Bob Gaudio   
../MusicXML_files/wikifonia20100503/3399.xml           Horatio Nicholls   
../MusicXML_files/wikifonia20100503/3204.xml                  Joe Burke   
../MusicXML_files/wikifonia20100503/3677.xml               Robert Allen   
../MusicXML_files/wikifonia20100503/3299.xml               Iram Kosloff   
../MusicXML_files/wikifonia20100503/255.xml   Burt Bacharach, Hal David   
../MusicXML_files/wikifonia20100503/5213.xml                  Bob Troup   
../MusicXML_files/wikifonia20100503/729.xml        Kistehén tánczenekar   
../MusicXML_files/wikifonia20100503/939.xml               Jimmy Forrest   
../MusicXML_files/wikifonia20100503/1637.xml    Claude-Michel Schönberg   

                                                                      song_title  
../MusicXML_files/wikifonia20100503/4336.xml                   Silence is Golden  
../MusicXML_files/wikifonia20100503/3399.xml                  Among My Souvenirs  
../MusicXML_files/wikifonia20100503/3204.xml    Tip toe thru' the tulips with me  
../MusicXML_files/wikifonia20100503/3677.xml              It's Not For Me To Say  
../MusicXML_files/wikifonia20100503/3299.xml  I Want You, I Need You, I Love You  
../MusicXML_files/wikifonia20100503/255.xml                I Say A Little Prayer  
../MusicXML_files/wikifonia20100503/5213.xml                            Route 66  
../MusicXML_files/wikifonia20100503/729.xml                        Szájbergyerek  
../MusicXML_files/wikifonia20100503/939.xml                          Night Train  
../MusicXML_files/wikifonia20100503/1637.xml                  I Dreamed A  Dream  
-------------------------------------------
Source Code of a Unmatched Cell 13
-------------------------------------------
df[df.composer.str.contains('rolling', case=False)]

-----------------
Original output:
                                                       composer  \
../MusicXML_files/wikifonia20100503\102.xml  The Rolling Stones   

                                                 song_title  
../MusicXML_files/wikifonia20100503\102.xml  Paint it black  
Executed output:
                                                       composer  \
../MusicXML_files/wikifonia20100503/102.xml  The Rolling Stones   

                                                 song_title  
../MusicXML_files/wikifonia20100503/102.xml  Paint it black  
-------------------------------------------
Source Code of a Unmatched Cell 14
-------------------------------------------
df[df.composer.str.contains('stone', case=False)]

-----------------
Original output:
                                                                               composer  \
../MusicXML_files/wikifonia20100503\102.xml                          The Rolling Stones   
../MusicXML_files/wikifonia20100503\3785.xml                    Harry Stone, Jack Stapp   
../MusicXML_files/wikifonia20100503\3787.xml                 Jay Livingstone, Ray Evans   
../MusicXML_files/wikifonia20100503\3866.xml                         Nelson, Touchstone   
../MusicXML_files/wikifonia20100503\4865.xml  Mack David, Al Hoffman, Jerry Livingstone   
../MusicXML_files/wikifonia20100503\5416.xml    Merle Travis, Cliffie Stone, Eddie Kirk   

                                                                      song_title  
../MusicXML_files/wikifonia20100503\102.xml                       Paint it black  
../MusicXML_files/wikifonia20100503\3785.xml         Chattanoogie Shoe Shine Boy  
../MusicXML_files/wikifonia20100503\3787.xml                     To Each His Own  
../MusicXML_files/wikifonia20100503\3866.xml                        Just Because  
../MusicXML_files/wikifonia20100503\4865.xml                   Chi-baba chi-baba  
../MusicXML_files/wikifonia20100503\5416.xml  So Firm, So Round, So Fully Packed  
Executed output:
                                                                               composer  \
../MusicXML_files/wikifonia20100503/3866.xml                         Nelson, Touchstone   
../MusicXML_files/wikifonia20100503/3785.xml                    Harry Stone, Jack Stapp   
../MusicXML_files/wikifonia20100503/5416.xml    Merle Travis, Cliffie Stone, Eddie Kirk   
../MusicXML_files/wikifonia20100503/102.xml                          The Rolling Stones   
../MusicXML_files/wikifonia20100503/3787.xml                 Jay Livingstone, Ray Evans   
../MusicXML_files/wikifonia20100503/4865.xml  Mack David, Al Hoffman, Jerry Livingstone   

                                                                      song_title  
../MusicXML_files/wikifonia20100503/3866.xml                        Just Because  
../MusicXML_files/wikifonia20100503/3785.xml         Chattanoogie Shoe Shine Boy  
../MusicXML_files/wikifonia20100503/5416.xml  So Firm, So Round, So Fully Packed  
../MusicXML_files/wikifonia20100503/102.xml                       Paint it black  
../MusicXML_files/wikifonia20100503/3787.xml                     To Each His Own  
../MusicXML_files/wikifonia20100503/4865.xml                   Chi-baba chi-baba  
-------------------------------------------
Source Code of a Unmatched Cell 16
-------------------------------------------
df[df.composer.str.contains('keith', case=False)]

-----------------
Original output:
                                                                 composer  \
../MusicXML_files/wikifonia20100503\1099.xml  Keith Richards, Mick Jagger   
../MusicXML_files/wikifonia20100503\3765.xml     Ben Peters, Vivian Keith   
../MusicXML_files/wikifonia20100503\5303.xml  Keith Richards, Mick Jagger   

                                                                  song_title  
../MusicXML_files/wikifonia20100503\1099.xml                           Angie  
../MusicXML_files/wikifonia20100503\3765.xml  Before The Next Teardrop Falls  
../MusicXML_files/wikifonia20100503\5303.xml                Honky-Tonk Woman  
Executed output:
                                                                 composer  \
../MusicXML_files/wikifonia20100503/5303.xml  Keith Richards, Mick Jagger   
../MusicXML_files/wikifonia20100503/1099.xml  Keith Richards, Mick Jagger   
../MusicXML_files/wikifonia20100503/3765.xml     Ben Peters, Vivian Keith   

                                                                  song_title  
../MusicXML_files/wikifonia20100503/5303.xml                Honky-Tonk Woman  
../MusicXML_files/wikifonia20100503/1099.xml                           Angie  
../MusicXML_files/wikifonia20100503/3765.xml  Before The Next Teardrop Falls  
-------------------------------------------
Source Code of a Unmatched Cell 17
-------------------------------------------
df[df.composer.str.contains('lennon', case=False)]

-----------------
Original output:
                                                                    composer  \
../MusicXML_files/wikifonia20100503\1019.xml           John Lennon, Yoko Ono   
../MusicXML_files/wikifonia20100503\120.xml      John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\151.xml      John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\1904.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\2430.xml     Paul McCartney, John Lennon   
../MusicXML_files/wikifonia20100503\2519.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3012.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3153.xml  John Lennon and Paul McCartney   
../MusicXML_files/wikifonia20100503\3154.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3155.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3413.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3485.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\368.xml      John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3689.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3834.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3864.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3874.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3911.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3975.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\3980.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4074.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4288.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4400.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4740.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4741.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4742.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\4750.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503\5017.xml           John Lennon, Yoko Ono   
../MusicXML_files/wikifonia20100503\530.xml                      John Lennon   

                                                                song_title  
../MusicXML_files/wikifonia20100503\1019.xml                    Happy Xmas  
../MusicXML_files/wikifonia20100503\120.xml                   Lady Madonna  
../MusicXML_files/wikifonia20100503\151.xml                  Eleanor Rigby  
../MusicXML_files/wikifonia20100503\1904.xml            A Hard Day's Night  
../MusicXML_files/wikifonia20100503\2430.xml                      Michelle  
../MusicXML_files/wikifonia20100503\2519.xml                     Yesterday  
../MusicXML_files/wikifonia20100503\3012.xml                 All My Loving  
../MusicXML_files/wikifonia20100503\3153.xml      I saw her standing there  
../MusicXML_files/wikifonia20100503\3154.xml      I saw her standing there  
../MusicXML_files/wikifonia20100503\3155.xml                Ticket to ride  
../MusicXML_files/wikifonia20100503\3413.xml  Do You Want To Know A Secret  
../MusicXML_files/wikifonia20100503\3485.xml             Ob-La-Di Ob-La-Da  
../MusicXML_files/wikifonia20100503\368.xml             A Hard Day's Night  
../MusicXML_files/wikifonia20100503\3689.xml                    Love Me Do  
../MusicXML_files/wikifonia20100503\3834.xml      I Want To Hold Your Hand  
../MusicXML_files/wikifonia20100503\3864.xml                And I Love Her  
../MusicXML_files/wikifonia20100503\3874.xml          The Fool On The Hill  
../MusicXML_files/wikifonia20100503\3911.xml                    Penny Lane  
../MusicXML_files/wikifonia20100503\3975.xml              You Won't See Me  
../MusicXML_files/wikifonia20100503\3980.xml              Please Please Me  
../MusicXML_files/wikifonia20100503\4074.xml              Yellow Submarine  
../MusicXML_files/wikifonia20100503\4288.xml                Norwegian Wood  
../MusicXML_files/wikifonia20100503\4400.xml          All You Need Is Love  
../MusicXML_files/wikifonia20100503\4740.xml             Eight Days A Week  
../MusicXML_files/wikifonia20100503\4741.xml                From Me To You  
../MusicXML_files/wikifonia20100503\4742.xml     The Long And Winding Road  
../MusicXML_files/wikifonia20100503\4750.xml                      Hey Jude  
../MusicXML_files/wikifonia20100503\5017.xml                    Happy Xmas  
../MusicXML_files/wikifonia20100503\530.xml                        Imagine  
Executed output:
                                                                    composer  \
../MusicXML_files/wikifonia20100503/4400.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3864.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/4740.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/4741.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/368.xml      John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/1904.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3485.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/151.xml      John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/2519.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/2430.xml     Paul McCartney, John Lennon   
../MusicXML_files/wikifonia20100503/1019.xml           John Lennon, Yoko Ono   
../MusicXML_files/wikifonia20100503/530.xml                      John Lennon   
../MusicXML_files/wikifonia20100503/4742.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3689.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3874.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3155.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/4288.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/120.xml      John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3975.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3153.xml  John Lennon and Paul McCartney   
../MusicXML_files/wikifonia20100503/3154.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/4074.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3834.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3980.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3413.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/4750.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3911.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/3012.xml     John Lennon, Paul McCartney   
../MusicXML_files/wikifonia20100503/5017.xml           John Lennon, Yoko Ono   

                                                                song_title  
../MusicXML_files/wikifonia20100503/4400.xml          All You Need Is Love  
../MusicXML_files/wikifonia20100503/3864.xml                And I Love Her  
../MusicXML_files/wikifonia20100503/4740.xml             Eight Days A Week  
../MusicXML_files/wikifonia20100503/4741.xml                From Me To You  
../MusicXML_files/wikifonia20100503/368.xml             A Hard Day's Night  
../MusicXML_files/wikifonia20100503/1904.xml            A Hard Day's Night  
../MusicXML_files/wikifonia20100503/3485.xml             Ob-La-Di Ob-La-Da  
../MusicXML_files/wikifonia20100503/151.xml                  Eleanor Rigby  
../MusicXML_files/wikifonia20100503/2519.xml                     Yesterday  
../MusicXML_files/wikifonia20100503/2430.xml                      Michelle  
../MusicXML_files/wikifonia20100503/1019.xml                    Happy Xmas  
../MusicXML_files/wikifonia20100503/530.xml                        Imagine  
../MusicXML_files/wikifonia20100503/4742.xml     The Long And Winding Road  
../MusicXML_files/wikifonia20100503/3689.xml                    Love Me Do  
../MusicXML_files/wikifonia20100503/3874.xml          The Fool On The Hill  
../MusicXML_files/wikifonia20100503/3155.xml                Ticket to ride  
../MusicXML_files/wikifonia20100503/4288.xml                Norwegian Wood  
../MusicXML_files/wikifonia20100503/120.xml                   Lady Madonna  
../MusicXML_files/wikifonia20100503/3975.xml              You Won't See Me  
../MusicXML_files/wikifonia20100503/3153.xml      I saw her standing there  
../MusicXML_files/wikifonia20100503/3154.xml      I saw her standing there  
../MusicXML_files/wikifonia20100503/4074.xml              Yellow Submarine  
../MusicXML_files/wikifonia20100503/3834.xml      I Want To Hold Your Hand  
../MusicXML_files/wikifonia20100503/3980.xml              Please Please Me  
../MusicXML_files/wikifonia20100503/3413.xml  Do You Want To Know A Secret  
../MusicXML_files/wikifonia20100503/4750.xml                      Hey Jude  
../MusicXML_files/wikifonia20100503/3911.xml                    Penny Lane  
../MusicXML_files/wikifonia20100503/3012.xml                 All My Loving  
../MusicXML_files/wikifonia20100503/5017.xml                    Happy Xmas  
"
298,/mnt/fit-Knowledgezoo/jupyternotebooks/alexlib@engineering_experiments_measurements_course/Fourier_coefficients_analytical_evaluation_periodic_ramp_function.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
init_printing(pretty_print=True,use_latex=True)
%matplotlib inline
import matplotlib.pyplot as plt
from numpy import arange
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-473e1939eb2b>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0minit_printing[0m[0;34m([0m[0mpretty_print[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m[0muse_latex[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'matplotlib'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
325,/mnt/fit-Knowledgezoo/jupyternotebooks/rlabbe@Kalman-and-Bayesian-Filters-in-Python/01-g-h-filter.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division, print_function
%matplotlib inline
------------------

[0;36m  File [0;32m""<ipython-input-1-c6da1c618c8b>""[0;36m, line [0;32m6[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-c6da1c618c8b>, line 6)

Executability                            : False
"
326,/mnt/fit-Knowledgezoo/jupyternotebooks/rlabbe@Kalman-and-Bayesian-Filters-in-Python/04-One-Dimensional-Kalman-Filters.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division, print_function
%matplotlib inline
------------------

[0;36m  File [0;32m""<ipython-input-1-c6da1c618c8b>""[0;36m, line [0;32m6[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-c6da1c618c8b>, line 6)

Executability                            : False
"
327,/mnt/fit-Knowledgezoo/jupyternotebooks/rlabbe@Kalman-and-Bayesian-Filters-in-Python/Appendix-E-Ensemble-Kalman-Filters.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division, print_function
%matplotlib inline
------------------

[0;36m  File [0;32m""<ipython-input-1-c6da1c618c8b>""[0;36m, line [0;32m6[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-c6da1c618c8b>, line 6)

Executability                            : False
"
332,/mnt/fit-Knowledgezoo/jupyternotebooks/barbagroup@CFDPython/lessons/05_Step_4.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy
import sympy
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-cf49e9671a66>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mimport[0m [0msympy[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
364,/mnt/fit-Knowledgezoo/jupyternotebooks/scikit-image@skimage-tutorials/book/lessons/4_segmentation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from skimage import data
from skimage import filters
from matplotlib import cm
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-e85a2981acb8>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mskimage[0m [0;32mimport[0m [0mdata[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mskimage[0m [0;32mimport[0m [0mfilters[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mcm[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'skimage'
ImportError: No module named 'skimage'

Executability                            : False
"
365,/mnt/fit-Knowledgezoo/jupyternotebooks/scikit-image@skimage-tutorials/lectures/solutions/5_ransac.ipynb,"3.6
list index out of range
Executability                            : False
"
367,/mnt/fit-Knowledgezoo/jupyternotebooks/AllenDowney@BayesMadeSimple/world_cup02.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# first a little house-keeping
from __future__ import print_function, division

% matplotlib inline

import numpy as np
import thinkplot
import thinkbayes2
------------------

[0;36m  File [0;32m""<ipython-input-1-b9b6b884dd16>""[0;36m, line [0;32m7[0m
[0;31m    [0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-b9b6b884dd16>, line 7)

Executability                            : False
"
378,/mnt/fit-Knowledgezoo/jupyternotebooks/kikocorreoso@brythonmagic/notebooks/OpenLayers (python) tutorial.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext brythonmagic
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-7cfd7ab39d49>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'brythonmagic'[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;31mImportError[0m: No module named 'brythonmagic'
ImportError: No module named 'brythonmagic'

Executability                            : False
"
383,/mnt/fit-Knowledgezoo/jupyternotebooks/iit-cs429@main/lectures/lec04/Dictionaries.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# Fetch a list of word counts.

from collections import defaultdict
import requests

# words: list of terms known to be spelled correctly.
word_counts = defaultdict(lambda: 1)  # Assume all words have been seen once
# Fetch list of word frequencies
words = [line.split() for line in
         requests.get('http://norvig.com/ngrams/count_big.txt').text.splitlines()]
# Add to words
for word, count in words:
    word_counts[word] += int(count)
print('read', len(words), 'words')
print('count(a)=', word_counts['a'])
print('count(apple)=', word_counts['apple'])
print('count(ajshdlfkjahdlkjh)=', word_counts['ajshdlfkjahdlkjh'])
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-9-38685043df43>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0mcollections[0m [0;32mimport[0m [0mdefaultdict[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0;31m# words: list of terms known to be spelled correctly.[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
386,/mnt/fit-Knowledgezoo/jupyternotebooks/iit-cs429@main/lectures/lec09/Evaluation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# Interpolated precision: max of precisions to right of value
xlabel('recall')
ylabel('precision')
interpolated_pre = [max(precisions[i:]) for i in range(len(precisions))]
print(interpolated_pre)
step(recalls, interpolated_pre, 'bo')
xlim((0, .4))
ylim((0, 1.1))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-4-2f230c2d11a5>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0minterpolated_pre[0m [0;34m=[0m [0;34m[[0m[0mmax[0m[0;34m([0m[0mprecisions[0m[0;34m[[0m[0mi[0m[0;34m:[0m[0;34m][0m[0;34m)[0m [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mprecisions[0m[0;34m)[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0m
[1;32m      5[0m [0mprint[0m[0;34m([0m[0minterpolated_pre[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0mstep[0m[0;34m([0m[0mrecalls[0m[0;34m,[0m [0minterpolated_pre[0m[0;34m,[0m [0;34m'bo'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0mxlim[0m[0;34m([0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0;36m.4[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      8[0m [0mylim[0m[0;34m([0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0;36m1.1[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36mstep[0;34m(x, y, where, data, *args, **kwargs)[0m
[1;32m   2848[0m [0;34m@[0m[0mdocstring[0m[0;34m.[0m[0mcopy_dedent[0m[0;34m([0m[0mAxes[0m[0;34m.[0m[0mstep[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2849[0m [0;32mdef[0m [0mstep[0m[0;34m([0m[0mx[0m[0;34m,[0m [0my[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mwhere[0m[0;34m=[0m[0;34m'pre'[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2850[0;31m     [0;32mreturn[0m [0mgca[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mstep[0m[0;34m([0m[0mx[0m[0;34m=[0m[0mx[0m[0;34m,[0m [0my[0m[0;34m=[0m[0my[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mwhere[0m[0;34m=[0m[0mwhere[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0mdata[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2851[0m [0;34m[0m[0m
[1;32m   2852[0m [0;31m# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1783[0m                         [0;34m""the Matplotlib list!)""[0m [0;34m%[0m [0;34m([0m[0mlabel_namer[0m[0;34m,[0m [0mfunc[0m[0;34m.[0m[0m__name__[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1784[0m                         RuntimeWarning, stacklevel=2)
[0;32m-> 1785[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1786[0m [0;34m[0m[0m
[1;32m   1787[0m         inner.__doc__ = _add_data_doc(inner.__doc__,

[0;31mTypeError[0m: step() got multiple values for argument 'x'
TypeError: step() got multiple values for argument 'x'

Executability                            : False
"
388,/mnt/fit-Knowledgezoo/jupyternotebooks/AeroPython@Curso_AeroPython/notebooks_completos/092-Ejemplos-FelixBaumgartner.ipynb,"3.6
An error occurred while executing the following cell:
------------------
# Función del sistema
def f(y, t):
    g = 9.8  # m / s2
    C_D = 0.4
    A = 1.0  # m^2
    m = 80  # kg
    return np.array([
        y[1],
        -g + rho_ISA(y[0]) * y[1] ** 2 * C_D * A / (2 * m)
    ])

# Condiciones iniciales
y0 = np.array([39000, 0])

# Vector de tiempos
t = np.linspace(0, 250)

# Integramos la ecuación
sol = integrate.odeint(f, y0, t)


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-15-a3ea2727fa1b>[0m in [0;36m<module>[0;34m[0m
[1;32m     17[0m [0;34m[0m[0m
[1;32m     18[0m [0;31m# Integramos la ecuación[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 19[0;31m [0msol[0m [0;34m=[0m [0mintegrate[0m[0;34m.[0m[0modeint[0m[0;34m([0m[0mf[0m[0;34m,[0m [0my0[0m[0;34m,[0m [0mt[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     20[0m [0;34m[0m[0m

[0;31mNameError[0m: name 'integrate' is not defined
NameError: name 'integrate' is not defined

Executability                            : False
"
395,/mnt/fit-Knowledgezoo/jupyternotebooks/AeroPython@Curso_AeroPython/notebooks_completos/091-Ejemplos-Lotka-Volterra.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from IPython.html.widgets import interact
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-20-a19ced35434d>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mhtml[0m[0;34m.[0m[0mwidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'widgets'
ImportError: No module named 'widgets'

Executability                            : False
"
396,/mnt/fit-Knowledgezoo/jupyternotebooks/AeroPython@Curso_AeroPython/notebooks_completos/015-NumPy-EntradaSalida.ipynb,"3.5
An error occurred while executing the following cell:
------------------
np.savetxt('diferencia_interanual.txt', data_dif, fmt='%9.3f', newline = '\r\n')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-10-29ae45457d61>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mnp[0m[0;34m.[0m[0msavetxt[0m[0;34m([0m[0;34m'diferencia_interanual.txt'[0m[0;34m,[0m [0mdata_dif[0m[0;34m,[0m [0mfmt[0m[0;34m=[0m[0;34m'%9.3f'[0m[0;34m,[0m [0mnewline[0m [0;34m=[0m [0;34m'\r\n'[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/numpy/lib/npyio.py[0m in [0;36msavetxt[0;34m(fname, X, fmt, delimiter, newline, header, footer, comments, encoding)[0m
[1;32m   1315[0m     [0;32mif[0m [0m_is_string_like[0m[0;34m([0m[0mfname[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1316[0m         [0;31m# datasource doesn't support creating a new file ...[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1317[0;31m         [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'wt'[0m[0;34m)[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1318[0m         [0mfh[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mlib[0m[0;34m.[0m[0m_datasource[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'wt'[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   1319[0m         [0mown_fh[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'diferencia_interanual.txt'
PermissionError: [Errno 13] Permission denied: 'diferencia_interanual.txt'

Executability                            : False
"
433,/mnt/fit-Knowledgezoo/jupyternotebooks/mgbellemare@SkipCTS/python/tutorials/text_prediction_tutorial.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import math
import string

from cts import model
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-4c1dd96ef1e6>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0;32mimport[0m [0mstring[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mfrom[0m [0mcts[0m [0;32mimport[0m [0mmodel[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'cts'
ImportError: No module named 'cts'

Executability                            : False
"
435,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170327/tensorflow/mnist-softmax.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from mnist import MNIST

mnist = MNIST('./data')
images, labels = mnist.load_training()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-45ef0eb46ba7>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mmnist[0m [0;32mimport[0m [0mMNIST[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mmnist[0m [0;34m=[0m [0mMNIST[0m[0;34m([0m[0;34m'./data'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'mnist'
ImportError: No module named 'mnist'

Executability                            : False
"
436,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170327/tensorflow/mnist-cnn.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from mnist import MNIST
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-777265259c96>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
"
437,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170307/tensorflow/day01.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# TensorFlow를 쓰기 전에 꼭 import를 해야 합니다.

import tensorflow as tf

# 실행은 Ctrl + Enter
# 전체 재실행은 Kernel > Restart & Run All
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-1349d92f0aff>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;31m# TensorFlow를 쓰기 전에 꼭 import를 해야 합니다.[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;34m[0m[0m
[1;32m      7[0m [0;31m# 실행은 Ctrl + Enter[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
"
438,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170320/tensorflow/mnist.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from mnist import MNIST

data = MNIST('./data')
images, labels = data.load_training()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-79fe2ac4b983>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mmnist[0m [0;32mimport[0m [0mMNIST[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mdata[0m [0;34m=[0m [0mMNIST[0m[0;34m([0m[0;34m'./data'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'mnist'
ImportError: No module named 'mnist'

Executability                            : False
"
439,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170306/tensorflow/test.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-0d68a5387063>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
"
440,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170314/tensorflow/graph.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf

a = tf.constant(1, name='a')
b = tf.constant(2, name='b')
c = tf.add(a, b, name='c')

session = tf.Session()

tf.summary.FileWriter('./summary', session.graph)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-4397535fed85>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0ma[0m [0;34m=[0m [0mtf[0m[0;34m.[0m[0mconstant[0m[0;34m([0m[0;36m1[0m[0;34m,[0m [0mname[0m[0;34m=[0m[0;34m'a'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
"
441,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170620/tensorflow/day01.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf
session = tf.Session()
a = tf.constant(1)
b = tf.constant(2)
c = a + b
session.run(c)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-39745136d3c9>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0msession[0m [0;34m=[0m [0mtf[0m[0;34m.[0m[0mSession[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0ma[0m [0;34m=[0m [0mtf[0m[0;34m.[0m[0mconstant[0m[0;34m([0m[0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'tensorflow'
ModuleNotFoundError: No module named 'tensorflow'

Executability                            : False
"
442,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170328/tensorflow/day04.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from mnist import MNIST

mnist = MNIST('./data')
_ = mnist.load_testing()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-44811b0b1645>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mmnist[0m [0;32mimport[0m [0mMNIST[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mmnist[0m [0;34m=[0m [0mMNIST[0m[0;34m([0m[0;34m'./data'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'mnist'
ImportError: No module named 'mnist'

Executability                            : False
"
443,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170313/tensorflow/linear-algebra.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf

session = tf.Session()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-a4671a434890>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0msession[0m [0;34m=[0m [0mtf[0m[0;34m.[0m[0mSession[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
"
444,/mnt/fit-Knowledgezoo/jupyternotebooks/ahastudio@CodingLife/20170313/tensorflow/graph.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf

session = tf.Session()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-a4671a434890>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0msession[0m [0;34m=[0m [0mtf[0m[0;34m.[0m[0mSession[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
"
449,/mnt/fit-Knowledgezoo/jupyternotebooks/hugobowne@machine_learning_techniques/notes_on_ML/K-NN_and_preprocessing.ipynb,"3.5
An error occurred while executing the following cell:
------------------
y = y1 <= 5 # is the rating <= 5?
# plot histograms of original target variable
# and aggregated target variable
plt.figure(figsize=(20,5));
plt.subplot(1, 2, 1 );
plt.hist(y1);
plt.xlabel('original target value')
plt.ylabel('count')
plt.subplot(1, 2, 2);
plt.hist(y)
plt.xlabel('aggregated target value')
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/numpy/lib/histograms.py[0m in [0;36m_unsigned_subtract[0;34m(a, b)[0m
[1;32m    279[0m     [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 280[0;31m         [0mdt[0m [0;34m=[0m [0msigned_to_unsigned[0m[0;34m[[0m[0mdt[0m[0;34m.[0m[0mtype[0m[0;34m][0m[0;34m[0m[0m
[0m[1;32m    281[0m     [0;32mexcept[0m [0mKeyError[0m[0;34m:[0m[0;34m[0m[0m

[0;31mKeyError[0m: <class 'numpy.bool_'>

During handling of the above exception, another exception occurred:

[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-3-583f68047d81>[0m in [0;36m<module>[0;34m()[0m
[1;32m      8[0m [0mplt[0m[0;34m.[0m[0mylabel[0m[0;34m([0m[0;34m'count'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      9[0m [0mplt[0m[0;34m.[0m[0msubplot[0m[0;34m([0m[0;36m1[0m[0;34m,[0m [0;36m2[0m[0;34m,[0m [0;36m2[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0mplt[0m[0;34m.[0m[0mhist[0m[0;34m([0m[0my[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0mplt[0m[0;34m.[0m[0mxlabel[0m[0;34m([0m[0;34m'aggregated target value'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     12[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36mhist[0;34m(x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, normed, data, **kwargs)[0m
[1;32m   2617[0m         [0malign[0m[0;34m=[0m[0malign[0m[0;34m,[0m [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m [0mrwidth[0m[0;34m=[0m[0mrwidth[0m[0;34m,[0m [0mlog[0m[0;34m=[0m[0mlog[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2618[0m         [0mcolor[0m[0;34m=[0m[0mcolor[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0mlabel[0m[0;34m,[0m [0mstacked[0m[0;34m=[0m[0mstacked[0m[0;34m,[0m [0mnormed[0m[0;34m=[0m[0mnormed[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2619[0;31m         data=data, **kwargs)
[0m[1;32m   2620[0m [0;34m[0m[0m
[1;32m   2621[0m [0;31m# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1783[0m                         [0;34m""the Matplotlib list!)""[0m [0;34m%[0m [0;34m([0m[0mlabel_namer[0m[0;34m,[0m [0mfunc[0m[0;34m.[0m[0m__name__[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1784[0m                         RuntimeWarning, stacklevel=2)
[0;32m-> 1785[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1786[0m [0;34m[0m[0m
[1;32m   1787[0m         inner.__doc__ = _add_data_doc(inner.__doc__,

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/axes/_axes.py[0m in [0;36mhist[0;34m(self, x, bins, range, density, weights, cumulative, bottom, histtype, align, orientation, rwidth, log, color, label, stacked, normed, **kwargs)[0m
[1;32m   6567[0m             [0;31m# this will automatically overwrite bins,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   6568[0m             [0;31m# so that each histogram uses the same bins[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 6569[0;31m             [0mm[0m[0;34m,[0m [0mbins[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mhistogram[0m[0;34m([0m[0mx[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m,[0m [0mbins[0m[0;34m,[0m [0mweights[0m[0;34m=[0m[0mw[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m,[0m [0;34m**[0m[0mhist_kwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   6570[0m             [0mm[0m [0;34m=[0m [0mm[0m[0;34m.[0m[0mastype[0m[0;34m([0m[0mfloat[0m[0;34m)[0m  [0;31m# causes problems later if it's an int[0m[0;34m[0m[0m
[1;32m   6571[0m             [0;32mif[0m [0mmlast[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/numpy/lib/histograms.py[0m in [0;36mhistogram[0;34m(a, bins, range, normed, weights, density)[0m
[1;32m    730[0m [0;34m[0m[0m
[1;32m    731[0m         [0;31m# Pre-compute histogram scaling factor[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 732[0;31m         [0mnorm[0m [0;34m=[0m [0mn_equal_bins[0m [0;34m/[0m [0m_unsigned_subtract[0m[0;34m([0m[0mlast_edge[0m[0;34m,[0m [0mfirst_edge[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    733[0m [0;34m[0m[0m
[1;32m    734[0m         [0;31m# We iterate over blocks here for two reasons: the first is that for[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/numpy/lib/histograms.py[0m in [0;36m_unsigned_subtract[0;34m(a, b)[0m
[1;32m    280[0m         [0mdt[0m [0;34m=[0m [0msigned_to_unsigned[0m[0;34m[[0m[0mdt[0m[0;34m.[0m[0mtype[0m[0;34m][0m[0;34m[0m[0m
[1;32m    281[0m     [0;32mexcept[0m [0mKeyError[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 282[0;31m         [0;32mreturn[0m [0mnp[0m[0;34m.[0m[0msubtract[0m[0;34m([0m[0ma[0m[0;34m,[0m [0mb[0m[0;34m,[0m [0mdtype[0m[0;34m=[0m[0mdt[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    283[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    284[0m         [0;31m# we know the inputs are integers, and we are deliberately casting[0m[0;34m[0m[0;34m[0m[0m

[0;31mTypeError[0m: numpy boolean subtract, the `-` operator, is deprecated, use the bitwise_xor, the `^` operator, or the logical_xor function instead.
TypeError: numpy boolean subtract, the `-` operator, is deprecated, use the bitwise_xor, the `^` operator, or the logical_xor function instead.

Executability                            : False
"
450,/mnt/fit-Knowledgezoo/jupyternotebooks/pierrelux@notebooks/d3jupyterwidget.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import ipywidgets as widgets
from traitlets import Unicode, CInt

class HelloWidget(widgets.DOMWidget):
    _view_name = Unicode('HelloView').tag(sync=True)
    _view_module = Unicode('hello').tag(sync=True)
    radius = CInt(20).tag(sync=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-29fa8d870523>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mipywidgets[0m [0;32mas[0m [0mwidgets[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0mtraitlets[0m [0;32mimport[0m [0mUnicode[0m[0;34m,[0m [0mCInt[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
457,/mnt/fit-Knowledgezoo/jupyternotebooks/ComputoCienciasUniandes@MetodosComputacionalesAvanzados/weeks/15/code/neural_network.ipynb,"3.6
An error occurred while executing the following cell:
------------------
z = function(x,y)
data = x, y , z 
data = np.transpose(data)
np.savetxt('data.txt', data)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-9f38411e52c7>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0mdata[0m [0;34m=[0m [0mx[0m[0;34m,[0m [0my[0m [0;34m,[0m [0mz[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0mdata[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mtranspose[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0mnp[0m[0;34m.[0m[0msavetxt[0m[0;34m([0m[0;34m'data.txt'[0m[0;34m,[0m [0mdata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/numpy/lib/npyio.py[0m in [0;36msavetxt[0;34m(fname, X, fmt, delimiter, newline, header, footer, comments, encoding)[0m
[1;32m   1357[0m     [0;32mif[0m [0m_is_string_like[0m[0;34m([0m[0mfname[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1358[0m         [0;31m# datasource doesn't support creating a new file ...[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1359[0;31m         [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'wt'[0m[0;34m)[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1360[0m         [0mfh[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mlib[0m[0;34m.[0m[0m_datasource[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'wt'[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1361[0m         [0mown_fh[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'data.txt'
PermissionError: [Errno 13] Permission denied: 'data.txt'

Executability                            : False
"
458,/mnt/fit-Knowledgezoo/jupyternotebooks/ComputoCienciasUniandes@MetodosComputacionalesAvanzados/weeks/11/code/linear.ipynb,"3.5
An error occurred while executing the following cell:
------------------
data = pd.read_csv('http://www-bcf.usc.edu/~gareth/ISL/Credit.csv', index_col=0)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mParserError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-f36186ee6803>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mdata[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mread_csv[0m[0;34m([0m[0;34m'http://www-bcf.usc.edu/~gareth/ISL/Credit.csv'[0m[0;34m,[0m [0mindex_col[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36mparser_f[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)[0m
[1;32m    676[0m                     skip_blank_lines=skip_blank_lines)
[1;32m    677[0m [0;34m[0m[0m
[0;32m--> 678[0;31m         [0;32mreturn[0m [0m_read[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m,[0m [0mkwds[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    679[0m [0;34m[0m[0m
[1;32m    680[0m     [0mparser_f[0m[0;34m.[0m[0m__name__[0m [0;34m=[0m [0mname[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    444[0m [0;34m[0m[0m
[1;32m    445[0m     [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 446[0;31m         [0mdata[0m [0;34m=[0m [0mparser[0m[0;34m.[0m[0mread[0m[0;34m([0m[0mnrows[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    447[0m     [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    448[0m         [0mparser[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36mread[0;34m(self, nrows)[0m
[1;32m   1034[0m                 [0;32mraise[0m [0mValueError[0m[0;34m([0m[0;34m'skipfooter not supported for iteration'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   1035[0m [0;34m[0m[0m
[0;32m-> 1036[0;31m         [0mret[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_engine[0m[0;34m.[0m[0mread[0m[0;34m([0m[0mnrows[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1037[0m [0;34m[0m[0m
[1;32m   1038[0m         [0;31m# May alter columns / col_dict[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36mread[0;34m(self, nrows)[0m
[1;32m   1846[0m     [0;32mdef[0m [0mread[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mnrows[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1847[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 1848[0;31m             [0mdata[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_reader[0m[0;34m.[0m[0mread[0m[0;34m([0m[0mnrows[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1849[0m         [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1850[0m             [0;32mif[0m [0mself[0m[0;34m.[0m[0m_first_chunk[0m[0;34m:[0m[0;34m[0m[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.TextReader.read[0;34m()[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.TextReader._read_low_memory[0;34m()[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.TextReader._read_rows[0;34m()[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.TextReader._tokenize_rows[0;34m()[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.raise_parser_error[0;34m()[0m

[0;31mParserError[0m: Error tokenizing data. C error: Expected 1 fields in line 76, saw 3

ParserError: Error tokenizing data. C error: Expected 1 fields in line 76, saw 3


Executability                            : False
"
475,/mnt/fit-Knowledgezoo/jupyternotebooks/cranmer@TheoryAndPractice/content/downloads/notebooks/really-interactive-posts.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interact, interactive
from IPython.display import clear_output, display, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-bc683a220190>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mclear_output[0m[0;34m,[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
481,/mnt/fit-Knowledgezoo/jupyternotebooks/Who8MyLunch@ipynb_widget_canvas/notebooks/03 - Different Ways to Display an Image.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function, unicode_literals, division, absolute_import

import io

import IPython
from ipywidgets import widgets
import PIL.Image

from widget_canvas import CanvasImage
from widget_canvas.image import read
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-9692e70483c5>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mIPython[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0mwidgets[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mPIL[0m[0;34m.[0m[0mImage[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
482,/mnt/fit-Knowledgezoo/jupyternotebooks/Who8MyLunch@ipynb_widget_canvas/notebooks/00 - Readme.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import IPython
from widget_canvas import CanvasImage
from widget_canvas.image import read

data_image = read('images/Whippet.jpg')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-328d1b2874fc>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mIPython[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0mwidget_canvas[0m [0;32mimport[0m [0mCanvasImage[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mfrom[0m [0mwidget_canvas[0m[0;34m.[0m[0mimage[0m [0;32mimport[0m [0mread[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'widget_canvas'
ImportError: No module named 'widget_canvas'

Executability                            : False
"
554,/mnt/fit-Knowledgezoo/jupyternotebooks/vorth@ipython/heptagons/Sevenfold Rotation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
df.to_csv('revelation_stats.csv', encoding=""utf-8"", sep=""\t"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-8-3db61a7efe6e>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mdf[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m'revelation_stats.csv'[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;34m""utf-8""[0m[0;34m,[0m [0msep[0m[0;34m=[0m[0;34m""\t""[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/core/frame.py[0m in [0;36mto_csv[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)[0m
[1;32m   1743[0m                                  [0mdoublequote[0m[0;34m=[0m[0mdoublequote[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1744[0m                                  escapechar=escapechar, decimal=decimal)
[0;32m-> 1745[0;31m         [0mformatter[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1746[0m [0;34m[0m[0m
[1;32m   1747[0m         [0;32mif[0m [0mpath_or_buf[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/formats/csvs.py[0m in [0;36msave[0;34m(self)[0m
[1;32m    154[0m             f, handles = _get_handle(self.path_or_buf, self.mode,
[1;32m    155[0m                                      [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0m
[0;32m--> 156[0;31m                                      compression=self.compression)
[0m[1;32m    157[0m             [0mclose[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    158[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/common.py[0m in [0;36m_get_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)[0m
[1;32m    398[0m         [0;32melif[0m [0mencoding[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    399[0m             [0;31m# Python 3 and encoding[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 400[0;31m             [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    401[0m         [0;32melif[0m [0mis_text[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    402[0m             [0;31m# Python 3 and no explicit encoding[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'revelation_stats.csv'
PermissionError: [Errno 13] Permission denied: 'revelation_stats.csv'

Executability                            : False
"
565,/mnt/fit-Knowledgezoo/jupyternotebooks/ajrichards@notebook/example-data/iris-dataset.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import sympy as sym
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-b3853e7dfc3a>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mimport[0m [0msympy[0m [0;32mas[0m [0msym[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
567,/mnt/fit-Knowledgezoo/jupyternotebooks/betatim@TimsHome/content/downloads/notebooks/interactive-posts.ipynb,"3.6
An error occurred while executing the following cell:
------------------
## print the columns description
print(""Shape of my data frame: {} x {}"".format(df.shape[0],df.shape[1]))
pp = pprint.PrettyPrinter(indent=2)
pp.pprint(list(df.columns))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-4-64478d119b93>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m## print the columns description[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mprint[0m[0;34m([0m[0;34m""Shape of my data frame: {} x {}""[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mdf[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m[0mdf[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0mpp[0m [0;34m=[0m [0mpprint[0m[0;34m.[0m[0mPrettyPrinter[0m[0;34m([0m[0mindent[0m[0;34m=[0m[0;36m2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0mpp[0m[0;34m.[0m[0mpprint[0m[0;34m([0m[0mlist[0m[0;34m([0m[0mdf[0m[0;34m.[0m[0mcolumns[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'df' is not defined
NameError: name 'df' is not defined

Executability                            : False
"
569,/mnt/fit-Knowledgezoo/jupyternotebooks/humanitiesprogramming@humanitiesprogramming.github.io/python/notebooks/text-analysis.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import numpy as np

import matplotlib.pyplot as plt

from sklearn.cross_validation import train_test_split
from sklearn.datasets import make_classification
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import roc_auc_score
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-4a4ab2578bbb>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mtrain_test_split[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mdatasets[0m [0;32mimport[0m [0mmake_classification[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mensemble[0m [0;32mimport[0m [0mGradientBoostingClassifier[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
570,/mnt/fit-Knowledgezoo/jupyternotebooks/flgomezc@sfr-dmhm/analysis_whole/MCMC_variance and Cosmic_Variance.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interact, interactive
from IPython.display import clear_output, display, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-bc683a220190>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mclear_output[0m[0;34m,[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
571,/mnt/fit-Knowledgezoo/jupyternotebooks/payne92@notebooks/30 Text to Speech.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import atmospy

print (""atmospy v{}"".format(atmospy.__version__))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-0a3ede4a9d81>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0matmospy[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mprint[0m [0;34m([0m[0;34m""atmospy v{}""[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0matmospy[0m[0;34m.[0m[0m__version__[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'atmospy'
ImportError: No module named 'atmospy'

Executability                            : False
"
572,/mnt/fit-Knowledgezoo/jupyternotebooks/payne92@notebooks/00 Javascript In Notebooks.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from bs4 import BeautifulSoup
from urllib import request

url = ""https://raw.githubusercontent.com/humanitiesprogramming/scraping-corpus/master/full-text.txt""
html = request.urlopen(url).read()
soup = BeautifulSoup(html, 'lxml')
raw_text = soup.text
texts = eval(soup.text)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-2db224f8852a>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mbs4[0m [0;32mimport[0m [0mBeautifulSoup[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0murllib[0m [0;32mimport[0m [0mrequest[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'bs4'
ModuleNotFoundError: No module named 'bs4'

Executability                            : False
"
620,/mnt/fit-Knowledgezoo/jupyternotebooks/jhillairet@documents/notebooks/Fusion_Basics/The cyclotron interaction.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
init_printing(use_latex=True) 
t = Symbol('t')
k = Symbol('k')
n = Symbol('n')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-2aeeb1544c54>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0minit_printing[0m[0;34m([0m[0muse_latex[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0mt[0m [0;34m=[0m [0mSymbol[0m[0;34m([0m[0;34m't'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
685,/mnt/fit-Knowledgezoo/jupyternotebooks/yardsale8@cs106/notebooks/Selection.ipynb,"3.5
An error occurred while executing the following cell:
------------------
p1.x = 3
p1.y = 4
print p1
------------------

[0;36m  File [0;32m""<ipython-input-3-33da1538ff63>""[0;36m, line [0;32m3[0m
[0;31m    print p1[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m Missing parentheses in call to 'print'

SyntaxError: Missing parentheses in call to 'print' (<ipython-input-3-33da1538ff63>, line 3)

Executability                            : False
"
687,/mnt/fit-Knowledgezoo/jupyternotebooks/betatim@betatim.github.io/downloads/notebooks/unbiased-performance-estimates.ipynb,"3.5
An error occurred while executing the following cell:
------------------
a = Cdgame()
print a.rescount((31,34,55,56,57),(1,2,3,4,5))
------------------

[0;36m  File [0;32m""<ipython-input-2-d1f039fafa24>""[0;36m, line [0;32m2[0m
[0;31m    print a.rescount((31,34,55,56,57),(1,2,3,4,5))[0m
[0m          ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-2-d1f039fafa24>, line 2)

Executability                            : False
"
691,/mnt/fit-Knowledgezoo/jupyternotebooks/betatim@betatim.github.io/downloads/notebooks/really-interactive-posts.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

from sklearn.base import BaseEstimator, TransformerMixin, ClassifierMixin, MetaEstimatorMixin
from sklearn.ensemble import RandomForestClassifier
from sklearn.cross_validation import train_test_split
from sklearn.grid_search import GridSearchCV
from sklearn.pipeline import make_pipeline
from sklearn.tree import DecisionTreeClassifier
from sklearn.utils import check_random_state
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-37b9aedef25f>[0m in [0;36m<module>[0;34m()[0m
[1;32m      5[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mbase[0m [0;32mimport[0m [0mBaseEstimator[0m[0;34m,[0m [0mTransformerMixin[0m[0;34m,[0m [0mClassifierMixin[0m[0;34m,[0m [0mMetaEstimatorMixin[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mensemble[0m [0;32mimport[0m [0mRandomForestClassifier[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mtrain_test_split[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mgrid_search[0m [0;32mimport[0m [0mGridSearchCV[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mpipeline[0m [0;32mimport[0m [0mmake_pipeline[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
695,/mnt/fit-Knowledgezoo/jupyternotebooks/marcinofulus@ProgramowanieRownolegle/notes.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interact, interactive
from IPython.display import clear_output, display, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-bc683a220190>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mclear_output[0m[0;34m,[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
703,/mnt/fit-Knowledgezoo/jupyternotebooks/bryansim@Python/mousetrackerproc/mousetracker_processing.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%sh

cat << EOF >> ~/.ipython/profile_mpi/ipcluster_config.py
c.IPClusterEngines.engine_launcher_class = 'MPI'
c.IPClusterStart.controller_launcher_class = 'MPI'
EOF

------------------

[0;36m  File [0;32m""<ipython-input-1-ec022dd62f6b>""[0;36m, line [0;32m3[0m
[0;31m    %%sh[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-ec022dd62f6b>, line 3)

Executability                            : False
"
711,/mnt/fit-Knowledgezoo/jupyternotebooks/numerical-mooc@numerical-mooc/lessons/04_spreadout/04_01_Heat_Equation_1D_Explicit.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import pandas as pd, time, requests, json
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-dee829164269>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m,[0m [0mtime[0m[0;34m,[0m [0mrequests[0m[0;34m,[0m [0mjson[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
712,/mnt/fit-Knowledgezoo/jupyternotebooks/numerical-mooc@numerical-mooc/lessons/04_spreadout/04_05_Crank-Nicolson.ipynb,"3.6
An error occurred while executing the following cell:
------------------
geojson = df_to_geojson(df_leaflet, df_leaflet.columns, lat='lat', lon='lng')

# save the geojson result to a file
output_filename = 'leaflet/lastfm-dataset.js'
with open(output_filename, 'w') as output_file:
    output_file.write('var dataset={};'.format(json.dumps(geojson, separators=(',',':'))))
    
# how many features did we save to the geojson file?
print('{:,} geotagged features saved to file'.format(len(geojson['features'])))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-9-47c90e1a21be>[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0;31m# save the geojson result to a file[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0moutput_filename[0m [0;34m=[0m [0;34m'leaflet/lastfm-dataset.js'[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0moutput_filename[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0moutput_file[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      6[0m     [0moutput_file[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0;34m'var dataset={};'[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mjson[0m[0;34m.[0m[0mdumps[0m[0;34m([0m[0mgeojson[0m[0;34m,[0m [0mseparators[0m[0;34m=[0m[0;34m([0m[0;34m','[0m[0;34m,[0m[0;34m':'[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'leaflet/lastfm-dataset.js'
PermissionError: [Errno 13] Permission denied: 'leaflet/lastfm-dataset.js'

Executability                            : False
"
713,/mnt/fit-Knowledgezoo/jupyternotebooks/numerical-mooc@numerical-mooc/lessons/04_spreadout/04_02_Heat_Equation_1D_Implicit.ipynb,"3.6
An error occurred while executing the following cell:
------------------
ax = artists_most.plot(kind='bar', figsize=[11, 7], width=0.8, alpha=0.7, color='#339933', edgecolor=None, zorder=2)

ax.yaxis.grid(True)
ax.set_xticklabels(artists_most.index, rotation=45, rotation_mode='anchor', ha='right', fontproperties=ticks_font)
for label in ax.get_yticklabels():
    label.set_fontproperties(ticks_font)

ax.set_title('Artists I have played the most', fontproperties=title_font)
ax.set_xlabel('', fontproperties=label_font)
ax.set_ylabel('Number of plays', fontproperties=label_font)

plt.savefig('images/lastfm-artists-played-most.png', dpi=96, bbox_inches='tight')
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-5-5836bbb36189>[0m in [0;36m<module>[0;34m[0m
[1;32m     10[0m [0max[0m[0;34m.[0m[0mset_ylabel[0m[0;34m([0m[0;34m'Number of plays'[0m[0;34m,[0m [0mfontproperties[0m[0;34m=[0m[0mlabel_font[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     11[0m [0;34m[0m[0m
[0;32m---> 12[0;31m [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m'images/lastfm-artists-played-most.png'[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0;36m96[0m[0;34m,[0m [0mbbox_inches[0m[0;34m=[0m[0;34m'tight'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     13[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/pyplot.py[0m in [0;36msavefig[0;34m(*args, **kwargs)[0m
[1;32m    714[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    715[0m     [0mfig[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 716[0;31m     [0mres[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    717[0m     [0mfig[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mdraw_idle[0m[0;34m([0m[0;34m)[0m   [0;31m# need this if 'transparent=True' to reset colors[0m[0;34m[0m[0;34m[0m[0m
[1;32m    718[0m     [0;32mreturn[0m [0mres[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, transparent, **kwargs)[0m
[1;32m   2178[0m             [0mself[0m[0;34m.[0m[0mpatch[0m[0;34m.[0m[0mset_visible[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2179[0m [0;34m[0m[0m
[0;32m-> 2180[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2181[0m [0;34m[0m[0m
[1;32m   2182[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2080[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2081[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2082[0;31m                     **kwargs)
[0m[1;32m   2083[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2084[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py[0m in [0;36mprint_png[0;34m(self, filename_or_obj, metadata, pil_kwargs, *args, **kwargs)[0m
[1;32m    528[0m             [0mrenderer[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mget_renderer[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    529[0m             [0;32mwith[0m [0mcbook[0m[0;34m.[0m[0m_setattr_cm[0m[0;34m([0m[0mrenderer[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mfigure[0m[0;34m.[0m[0mdpi[0m[0;34m)[0m[0;34m,[0m[0;31m [0m[0;31m\[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 530[0;31m                     [0mcbook[0m[0;34m.[0m[0mopen_file_cm[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m,[0m [0;34m""wb""[0m[0;34m)[0m [0;32mas[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    531[0m                 _png.write_png(renderer._renderer, fh,
[1;32m    532[0m                                self.figure.dpi, metadata=metadata)

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/contextlib.py[0m in [0;36m__enter__[0;34m(self)[0m
[1;32m     79[0m     [0;32mdef[0m [0m__enter__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     80[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 81[0;31m             [0;32mreturn[0m [0mnext[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mgen[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     82[0m         [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     83[0m             [0;32mraise[0m [0mRuntimeError[0m[0;34m([0m[0;34m""generator didn't yield""[0m[0;34m)[0m [0;32mfrom[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mopen_file_cm[0;34m(path_or_file, mode, encoding)[0m
[1;32m    445[0m [0;32mdef[0m [0mopen_file_cm[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0;34m""r""[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    446[0m     [0;34mr""""""Pass through file objects and context-manage `.PathLike`\s.""""""[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 447[0;31m     [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mto_filehandle[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0;32mTrue[0m[0;34m,[0m [0mencoding[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    448[0m     [0;32mif[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    449[0m         [0;32mwith[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    430[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    431[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 432[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    433[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    434[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'images/lastfm-artists-played-most.png'
PermissionError: [Errno 13] Permission denied: 'images/lastfm-artists-played-most.png'

Executability                            : False
"
719,/mnt/fit-Knowledgezoo/jupyternotebooks/numerical-mooc@numerical-mooc/lessons/01_phugoid/01_01_Phugoid_Theory.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import urllib.request

# Download and read the data file.
url = ('https://github.com/numerical-mooc/numerical-mooc/blob/master/'
       'lessons/04_spreadout/data/uvinitial.npz?raw=true')
filepath = 'uvinitial.npz'
urllib.request.urlretrieve(url, filepath);
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-4-426534871014>[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m        'lessons/04_spreadout/data/uvinitial.npz?raw=true')
[1;32m      6[0m [0mfilepath[0m [0;34m=[0m [0;34m'uvinitial.npz'[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0murllib[0m[0;34m.[0m[0mrequest[0m[0;34m.[0m[0murlretrieve[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mfilepath[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    256[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 258[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    260[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'uvinitial.npz'
PermissionError: [Errno 13] Permission denied: 'uvinitial.npz'

Executability                            : False
"
727,/mnt/fit-Knowledgezoo/jupyternotebooks/bokeh@bokeh-notebooks/tutorial/04 - styling.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import numba
from numba import jit
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-10-bfba85d57298>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mnumba[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mnumba[0m [0;32mimport[0m [0mjit[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'numba'
ModuleNotFoundError: No module named 'numba'

Executability                            : False
"
738,/mnt/fit-Knowledgezoo/jupyternotebooks/AllenDowney@ThinkBayes2/code/chap03soln.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from bokeh.plotting import figure 
from bokeh.io import output_notebook, show
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-337c96fb4a79>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mplotting[0m [0;32mimport[0m [0mfigure[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mio[0m [0;32mimport[0m [0moutput_notebook[0m[0;34m,[0m [0mshow[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'bokeh'
ModuleNotFoundError: No module named 'bokeh'

Executability                            : False
"
740,/mnt/fit-Knowledgezoo/jupyternotebooks/AllenDowney@ThinkBayes2/code/chap03.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function, division

% matplotlib inline
import warnings
warnings.filterwarnings('ignore')

import math
import numpy as np

from thinkbayes2 import Pmf, Cdf, Suite, Joint
import thinkplot
------------------

[0;36m  File [0;32m""<ipython-input-1-2cc3a94eea6e>""[0;36m, line [0;32m6[0m
[0;31m    import warnings[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-2cc3a94eea6e>, line 6)

Executability                            : False
"
745,/mnt/fit-Knowledgezoo/jupyternotebooks/AllenDowney@ThinkBayes2/code/survival.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function, division

% matplotlib inline

import thinkplot
from thinkbayes2 import Hist, Pmf, Suite, Cdf
------------------

[0;36m  File [0;32m""<ipython-input-1-274a509afcaf>""[0;36m, line [0;32m6[0m
[0;31m    [0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-274a509afcaf>, line 6)

Executability                            : False
"
748,/mnt/fit-Knowledgezoo/jupyternotebooks/AllenDowney@ThinkBayes2/code/chap02.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function, division

% matplotlib inline
import warnings
warnings.filterwarnings('ignore')

import math
import numpy as np

from thinkbayes2 import Pmf, Cdf, Suite, Joint
import thinkplot
------------------

[0;36m  File [0;32m""<ipython-input-1-2cc3a94eea6e>""[0;36m, line [0;32m6[0m
[0;31m    import warnings[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-2cc3a94eea6e>, line 6)

Executability                            : False
"
749,/mnt/fit-Knowledgezoo/jupyternotebooks/hans@ipython-notebooks/The Heart of Silicon Valley.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function, division

% matplotlib inline
import warnings
warnings.filterwarnings('ignore')

import numpy as np

from thinkbayes2 import Pmf, Cdf, Suite
import thinkplot
------------------

[0;36m  File [0;32m""<ipython-input-1-bceed4f6f189>""[0;36m, line [0;32m6[0m
[0;31m    import warnings[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-bceed4f6f189>, line 6)

Executability                            : False
"
752,/mnt/fit-Knowledgezoo/jupyternotebooks/briandalessandro@DataScienceCourse/ipython/python35/Lecture_PandasIntro_3.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function, division

% matplotlib inline
import warnings
warnings.filterwarnings('ignore')

import numpy as np

from thinkbayes2 import Pmf, Cdf, Suite, Beta
import thinkplot
------------------

[0;36m  File [0;32m""<ipython-input-1-7b46d3b83673>""[0;36m, line [0;32m6[0m
[0;31m    import warnings[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-7b46d3b83673>, line 6)

Executability                            : False
"
753,/mnt/fit-Knowledgezoo/jupyternotebooks/briandalessandro@DataScienceCourse/ipython/python35/Lecture_ERM_LogReg_3.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# Configure Jupyter so figures appear in the notebook
%matplotlib inline

# Configure Jupyter to display the assigned value after an assignment
%config InteractiveShell.ast_node_interactivity='last_expr_or_assign'

# import classes from thinkbayes2
from thinkbayes2 import Hist, Pmf, Suite
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-78801f75da3c>[0m in [0;36m<module>[0;34m[0m
[1;32m      8[0m [0;34m[0m[0m
[1;32m      9[0m [0;31m# import classes from thinkbayes2[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mfrom[0m [0mthinkbayes2[0m [0;32mimport[0m [0mHist[0m[0;34m,[0m [0mPmf[0m[0;34m,[0m [0mSuite[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'thinkbayes2'
ModuleNotFoundError: No module named 'thinkbayes2'

Executability                            : False
"
754,/mnt/fit-Knowledgezoo/jupyternotebooks/briandalessandro@DataScienceCourse/ipython/python35/Lecture_SimpleiPythonExample_3.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import requests
from bs4 import BeautifulSoup

from matplotlib import pyplot as plt
%matplotlib inline
import numpy as np
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-78739d4818ea>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0mbs4[0m [0;32mimport[0m [0mBeautifulSoup[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
757,/mnt/fit-Knowledgezoo/jupyternotebooks/TwistedHardware@mltutorial/notebooks/jupyter/3. Python Basics.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
 '''
Pandas is one of the most powerful contributions to python for quick and easy data analysis. Data Science is dominated by
one common data structure - the table. Python never had a great native way to manipulate tables in ways that many analysts
are used to (if you're at all familliar with spreadsheets or relational databases). The basic Pandas data structure is the Data 
Frame which, if you are an R user, should sound familliar.

This module is a very high level treatment of basic data operations one typically uses when manipulating tables in Python. 
To really learn all of the details, refer to the book.
'''

#To import
import pandas as pd #Its common to use pd as the abbreviation
from pandas import Series, DataFrame #Wes McKinney recommends importing these separately - they are used so often and benefit from having their own namespace

'''
The Series - for this module we'll skip the Series (see book for details), but we will define it. A Series is a one dimensional
array like object that has an array plus an index, which labels the array entries. Once we present a Data Frame, one can think
of a series as similar to a Data Frame with just one column.
'''

'''
A simple example of the DataFrame - building one from a dictionary
(note for this to work each list has to be the same length)
'''
data = {'state':['OH', 'OH', 'OH', 'NV', 'NV'], 
        'year':[2000, 2001, 2002, 2001, 2002],
        'pop':[1.5, 1.7, 3.6, 2.4, 2.9]}

frame = pd.DataFrame(data) #This function will turn the dict to the data frame. Notice that the keys become columns and an index is created

frame

------------------

[0;36m  File [0;32m""<ipython-input-1-f777d2d95002>""[0;36m, line [0;32m3[0m
[0;31m    '''[0m
[0m    ^[0m
[0;31mIndentationError[0m[0;31m:[0m unexpected indent

IndentationError: unexpected indent (<ipython-input-1-f777d2d95002>, line 3)

Executability                            : False
"
758,/mnt/fit-Knowledgezoo/jupyternotebooks/TwistedHardware@mltutorial/notebooks/jupyter/4. Numpy.ipynb,"3.5
Cell execution timed out
Executability                            : False
"
770,/mnt/fit-Knowledgezoo/jupyternotebooks/DaveBackus@Data_Bootcamp/Code/Lab/EntryPoll_bootcamp_experiments.ipynb,"3.5
An error occurred while executing the following cell:
------------------
f = open('filespython.txt', 'w')
f.write('This is another line\n')
f.close()

f = open('filespython.txt', 'r')
print(f.read())
f.close()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-5c855b88ee62>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0;34m'filespython.txt'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mf[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0;34m'This is another line\n'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0mf[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0;34m'filespython.txt'[0m[0;34m,[0m [0;34m'r'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'filespython.txt'
PermissionError: [Errno 13] Permission denied: 'filespython.txt'

Executability                            : False
"
771,/mnt/fit-Knowledgezoo/jupyternotebooks/DaveBackus@Data_Bootcamp/Code/Lab/Airbnb_experiments_Chase.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import pandas as pd   #The data package

import sys            #The code below wont work for any versions before Python 3. This just ensures that (I guess).
assert sys.version_info >= (3,5)

""""""
The MEPS dataset is is compressed in a .zip file in the link above. The code here downloads the .zip file, unzips
and saves the MEPS dataset. 
""""""

import requests, io, zipfile     #Three packages we'll need to unzip the data

url = requests.get(""http://meps.ahrq.gov/mepsweb/data_files/pufs/h155dat.zip"") #Downloads the .DAT file

zipfile = zipfile.ZipFile(io.BytesIO(url.content))                             #Unzips the .DAT file

url_unzipped = zipfile.extract(zipfile.namelist()[0])                          #Extracts/stores the .DAT file

print(zipfile.namelist())   #Unzipped file name

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-15d221b3cc86>[0m in [0;36m<module>[0;34m()[0m
[1;32m     11[0m """"""
[1;32m     12[0m [0;34m[0m[0m
[0;32m---> 13[0;31m [0;32mimport[0m [0mrequests[0m[0;34m,[0m [0mio[0m[0;34m,[0m [0mzipfile[0m     [0;31m#Three packages we'll need to unzip the data[0m[0;34m[0m[0m
[0m[1;32m     14[0m [0;34m[0m[0m
[1;32m     15[0m [0murl[0m [0;34m=[0m [0mrequests[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m""http://meps.ahrq.gov/mepsweb/data_files/pufs/h155dat.zip""[0m[0;34m)[0m [0;31m#Downloads the .DAT file[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
772,/mnt/fit-Knowledgezoo/jupyternotebooks/DaveBackus@Data_Bootcamp/Code/IPython/bootcamp_exam_practice_answerkey.ipynb,"3.5
An error occurred while executing the following cell:
------------------
url = 'http://pages.stern.nyu.edu/~dbackus/Data/beer_production_1947-2004.xlsx'
beer = pd.read_excel(url, skiprows=12, index_col=0)

print('Dimensions:', beer.shape)
beer[list(range(1,11))].head()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, **kwds)[0m
[1;32m    351[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 352[0;31m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0m
[0m[1;32m    353[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'xlrd'

During handling of the above exception, another exception occurred:

[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-d75c887a9465>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0murl[0m [0;34m=[0m [0;34m'http://pages.stern.nyu.edu/~dbackus/Data/beer_production_1947-2004.xlsx'[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mbeer[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mread_excel[0m[0;34m([0m[0murl[0m[0;34m,[0m [0mskiprows[0m[0;34m=[0m[0;36m12[0m[0;34m,[0m [0mindex_col[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0mprint[0m[0;34m([0m[0;34m'Dimensions:'[0m[0;34m,[0m [0mbeer[0m[0;34m.[0m[0mshape[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0mbeer[0m[0;34m[[0m[0mlist[0m[0;34m([0m[0mrange[0m[0;34m([0m[0;36m1[0m[0;34m,[0m[0;36m11[0m[0;34m)[0m[0;34m)[0m[0;34m][0m[0;34m.[0m[0mhead[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    176[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    177[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0m
[0;32m--> 178[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    179[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0m
[1;32m    180[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    176[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    177[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0m
[0;32m--> 178[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    179[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0m
[1;32m    180[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36mread_excel[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, **kwds)[0m
[1;32m    305[0m [0;34m[0m[0m
[1;32m    306[0m     [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mExcelFile[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 307[0;31m         [0mio[0m [0;34m=[0m [0mExcelFile[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mengine[0m[0;34m=[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    308[0m [0;34m[0m[0m
[1;32m    309[0m     return io.parse(

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, **kwds)[0m
[1;32m    352[0m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0m
[1;32m    353[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 354[0;31m             [0;32mraise[0m [0mImportError[0m[0;34m([0m[0merr_msg[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    355[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    356[0m             [0mver[0m [0;34m=[0m [0mtuple[0m[0;34m([0m[0mmap[0m[0;34m([0m[0mint[0m[0;34m,[0m [0mxlrd[0m[0;34m.[0m[0m__VERSION__[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m"".""[0m[0;34m)[0m[0;34m[[0m[0;34m:[0m[0;36m2[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: Install xlrd >= 0.9.0 for Excel support
ImportError: Install xlrd >= 0.9.0 for Excel support

Executability                            : False
"
777,/mnt/fit-Knowledgezoo/jupyternotebooks/jupyter@design/surveys/2015-notebook-ux/analysis/prep/3b_integration_themes.ipynb,"3.5
An error occurred while executing the following cell:
------------------
plt.style.use('fivethirtyeight')
fig, ax = plt.subplots()
debt.plot(ax=ax, 
         linewidth=2, 
        linestyle='dashed',
         color=['red', 'green', 'blue'])
ax.set_title('Public debt', fontsize=14, loc='right')
ax.set_ylabel('Public Debt (% of GDP)')
ax.legend(loc='lower left')
fig.savefig('debt.pdf')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-28-375c0ac6da0e>[0m in [0;36m<module>[0;34m()[0m
[1;32m      8[0m [0max[0m[0;34m.[0m[0mset_ylabel[0m[0;34m([0m[0;34m'Public Debt (% of GDP)'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      9[0m [0max[0m[0;34m.[0m[0mlegend[0m[0;34m([0m[0mloc[0m[0;34m=[0m[0;34m'lower left'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m'debt.pdf'[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, frameon, transparent, **kwargs)[0m
[1;32m   2095[0m             [0mself[0m[0;34m.[0m[0mset_frameon[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2096[0m [0;34m[0m[0m
[0;32m-> 2097[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2098[0m [0;34m[0m[0m
[1;32m   2099[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2073[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2074[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2075[0;31m                     **kwargs)
[0m[1;32m   2076[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2077[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36mprint_pdf[0;34m(self, filename, dpi, bbox_inches_restore, metadata, **kwargs)[0m
[1;32m   2556[0m             [0mfile[0m [0;34m=[0m [0mfilename[0m[0;34m.[0m[0m_file[0m[0;34m[0m[0m
[1;32m   2557[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2558[0;31m             [0mfile[0m [0;34m=[0m [0mPdfFile[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0mmetadata[0m[0;34m=[0m[0mmetadata[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2559[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2560[0m             [0mfile[0m[0;34m.[0m[0mnewPage[0m[0;34m([0m[0mwidth[0m[0;34m,[0m [0mheight[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36m__init__[0;34m(self, filename, metadata)[0m
[1;32m    431[0m         [0mself[0m[0;34m.[0m[0moriginal_file_like[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0m
[1;32m    432[0m         [0mself[0m[0;34m.[0m[0mtell_base[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0m
[0;32m--> 433[0;31m         [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mcbook[0m[0;34m.[0m[0mto_filehandle[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m""wb""[0m[0;34m,[0m [0mreturn_opened[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    434[0m         [0;32mif[0m [0;32mnot[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    435[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    390[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    391[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 392[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    393[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    394[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'debt.pdf'
PermissionError: [Errno 13] Permission denied: 'debt.pdf'

Executability                            : False
"
796,/mnt/fit-Knowledgezoo/jupyternotebooks/calpolydatascience@data301/Content/Tidy/CleanWrangle.ipynb,"3.5
An error occurred while executing the following cell:
------------------
%%writefile data1.csv
one,76,3.4
two,74,5.6
three,73,2.9
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-67bcf96ffcbc>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_cell_magic[0m[0;34m([0m[0;34m'writefile'[0m[0;34m,[0m [0;34m'data1.csv'[0m[0;34m,[0m [0;34m'one,76,3.4\ntwo,74,5.6\nthree,73,2.9'[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_cell_magic[0;34m(self, magic_name, line, cell)[0m
[1;32m   2165[0m             [0mmagic_arg_s[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mvar_expand[0m[0;34m([0m[0mline[0m[0;34m,[0m [0mstack_depth[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2166[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2167[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0mmagic_arg_s[0m[0;34m,[0m [0mcell[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2168[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2169[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-106>[0m in [0;36mwritefile[0;34m(self, line, cell)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/osm.py[0m in [0;36mwritefile[0;34m(self, line, cell)[0m
[1;32m    789[0m [0;34m[0m[0m
[1;32m    790[0m         [0mmode[0m [0;34m=[0m [0;34m'a'[0m [0;32mif[0m [0margs[0m[0;34m.[0m[0mappend[0m [0;32melse[0m [0;34m'w'[0m[0;34m[0m[0m
[0;32m--> 791[0;31m         [0;32mwith[0m [0mio[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;34m'utf-8'[0m[0;34m)[0m [0;32mas[0m [0mf[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m    792[0m             [0mf[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mcell[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'data1.csv'
PermissionError: [Errno 13] Permission denied: 'data1.csv'

Executability                            : False
"
797,/mnt/fit-Knowledgezoo/jupyternotebooks/calpolydatascience@data301/Content/Model/02-Probability.ipynb,"3.5
An error occurred while executing the following cell:
------------------
with open('people.json', 'w') as f:
    f.write(j3)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-21-7d1329fe47db>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m'people.json'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mf[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      2[0m     [0mf[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mj3[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'people.json'
PermissionError: [Errno 13] Permission denied: 'people.json'

Executability                            : False
"
802,/mnt/fit-Knowledgezoo/jupyternotebooks/calpolydatascience@data301/Content/Model/Scipy.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
from ipywidgets import interact
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-84f26fa30322>[0m in [0;36m<module>[0;34m[0m
[1;32m      4[0m [0;32mimport[0m [0mmatplotlib[0m [0;32mas[0m [0mmpl[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
827,/mnt/fit-Knowledgezoo/jupyternotebooks/fnl@asdm-tm-class/Day 1 - Document classification.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import urllib2

source = urllib2.urlopen(""http://cse.kut.ac.kr/"").read()

print source # 추후 숙제 답안 제출 때엔 왼쪽 라인은 주석처리할 것
------------------

[0;36m  File [0;32m""<ipython-input-1-32d12d7e7a29>""[0;36m, line [0;32m7[0m
[0;31m    print source # 추후 숙제 답안 제출 때엔 왼쪽 라인은 주석처리할 것[0m
[0m               ^[0m
[0;31mSyntaxError[0m[0;31m:[0m Missing parentheses in call to 'print'. Did you mean print(source # 추후 숙제 답안 제출 때엔 왼쪽 라인은 주석처리할 것)?

SyntaxError: Missing parentheses in call to 'print'. Did you mean print(source # 추후 숙제 답안 제출 때엔 왼쪽 라인은 주석처리할 것)? (<ipython-input-1-32d12d7e7a29>, line 7)

Executability                            : False
"
836,/mnt/fit-Knowledgezoo/jupyternotebooks/haraldschilly@python-fuer-mathematiker/doc/1-0-einfuehrung.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
import sympy as sy
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-5945b46594a9>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0m__future__[0m [0;32mimport[0m [0mdivision[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mimport[0m [0msympy[0m [0;32mas[0m [0msy[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
837,/mnt/fit-Knowledgezoo/jupyternotebooks/haraldschilly@python-fuer-mathematiker/doc/3-3-zahlentheorie.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# Nur für das Skriptum wird auf quadatische PNG Plots umgestellt, später wieder SVG
%config InlineBackend.figure_formats=['png']
rcParams[""figure.figsize""] = (10,10)
from mpmath import fp
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-10-e46887462a51>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'config'[0m[0;34m,[0m [0;34m""InlineBackend.figure_formats=['png']""[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0mrcParams[0m[0;34m[[0m[0;34m""figure.figsize""[0m[0;34m][0m [0;34m=[0m [0;34m([0m[0;36m10[0m[0;34m,[0m[0;36m10[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0mmpmath[0m [0;32mimport[0m [0mfp[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'mpmath'
ImportError: No module named 'mpmath'

Executability                            : False
"
838,/mnt/fit-Knowledgezoo/jupyternotebooks/haraldschilly@python-fuer-mathematiker/doc/7-0-outro.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import sympy as sy
from sympy.geometry import Point, Segment, Circle, Line, Triangle
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-320b3be7e0fd>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0msympy[0m [0;32mas[0m [0msy[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0msympy[0m[0;34m.[0m[0mgeometry[0m [0;32mimport[0m [0mPoint[0m[0;34m,[0m [0mSegment[0m[0;34m,[0m [0mCircle[0m[0;34m,[0m [0mLine[0m[0;34m,[0m [0mTriangle[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
841,/mnt/fit-Knowledgezoo/jupyternotebooks/haraldschilly@python-fuer-mathematiker/doc/3-8-kryptographie.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import mpmath as mpm
mpm.mp.dps = 100

mpm.sin(mpm.mpf(""3.1415926535""))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-17-560290de0929>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mmpmath[0m [0;32mas[0m [0mmpm[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mmpm[0m[0;34m.[0m[0mmp[0m[0;34m.[0m[0mdps[0m [0;34m=[0m [0;36m100[0m[0;34m[0m[0m
[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0mmpm[0m[0;34m.[0m[0msin[0m[0;34m([0m[0mmpm[0m[0;34m.[0m[0mmpf[0m[0;34m([0m[0;34m""3.1415926535""[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'mpmath'
ImportError: No module named 'mpmath'

Executability                            : False
"
842,/mnt/fit-Knowledgezoo/jupyternotebooks/haraldschilly@python-fuer-mathematiker/doc/1-2-installation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from sympy.ntheory import isprime, nextprime
isprime(20150407)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-d4e1b944288f>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0msympy[0m[0;34m.[0m[0mntheory[0m [0;32mimport[0m [0misprime[0m[0;34m,[0m [0mnextprime[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0misprime[0m[0;34m([0m[0;36m20150407[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
845,/mnt/fit-Knowledgezoo/jupyternotebooks/ska-sa@tutorials/4_HartRAO_spectral_line/3_Bandpass_correction.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%writefile res/program1.py
#!/usr/bin/env python
# -*- coding: utf8 -*-
# This is an example, which contains all the main parts for a proper standalone program
# Copyright: Harald Schilly <harald.schilly@univie.ac.at>, 2014
# License: Apache 2.0
import math

def calculate(x):
    """"""
    The important calculation
    """"""
    if x < 0:
        y = - x
    else:
        y = math.sqrt(x)
    return x + y

if __name__ == ""__main__"":
    z = 21
    print(""Program started, z = %f"" % z)
    result = calculate(z)
    print(""Result = %f"" % result)
------------------

[0;36m  File [0;32m""<ipython-input-1-b48c49827e33>""[0;36m, line [0;32m3[0m
[0;31m    %%writefile res/program1.py[0m
[0m    ^[0m
[0;31mSyntaxError[0m[0;31m:[0m invalid syntax

SyntaxError: invalid syntax (<ipython-input-1-b48c49827e33>, line 3)

Executability                            : False
"
847,/mnt/fit-Knowledgezoo/jupyternotebooks/ska-sa@tutorials/0_Intro_to_the_notebook/3_Python_intro_examples.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import datetime
print(""Zeitpunkt: %s"" % datetime.date.today())

import sys
print(""Python: %s"" % sys.version.splitlines()[0])

# bs4: beautifulsoup4
libs = ['numpy', 'scipy', 'matplotlib', 'sympy', 'mpmath', 'pandas', 'statsmodels',
        'sklearn', 'networkx', 'yaml', 'json', 'csv', 'sqlite3', 'cython', ""bs4""]
from importlib import import_module
for lib_name in sorted(libs):
    lib = import_module(lib_name)
    try:
        vers = lib.__version__
    except:
        vers = lib.version
    print(""{:<15s} {}"".format(lib_name, vers))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-029624fec636>[0m in [0;36m<module>[0;34m()[0m
[1;32m     12[0m [0;32mfrom[0m [0mimportlib[0m [0;32mimport[0m [0mimport_module[0m[0;34m[0m[0m
[1;32m     13[0m [0;32mfor[0m [0mlib_name[0m [0;32min[0m [0msorted[0m[0;34m([0m[0mlibs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 14[0;31m     [0mlib[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mlib_name[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     15[0m     [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     16[0m         [0mvers[0m [0;34m=[0m [0mlib[0m[0;34m.[0m[0m__version__[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;31mImportError[0m: No module named 'bs4'
ImportError: No module named 'bs4'

Executability                            : False
"
866,/mnt/fit-Knowledgezoo/jupyternotebooks/kylepjohnson@notebooks/public_talks/2016_12_08_harvard_classics/6 N-grams.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import urllib.request
urllib.request.urlretrieve('https://www.dropbox.com/s/kk6nwlmzrgfgmve/tutorial2-01.mat?dl=1', 'tutorial2-01.mat');
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-6cab99fe6150>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0murllib[0m[0;34m.[0m[0mrequest[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0murllib[0m[0;34m.[0m[0mrequest[0m[0;34m.[0m[0murlretrieve[0m[0;34m([0m[0;34m'https://www.dropbox.com/s/kk6nwlmzrgfgmve/tutorial2-01.mat?dl=1'[0m[0;34m,[0m [0;34m'tutorial2-01.mat'[0m[0;34m)[0m[0;34m;[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    256[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 258[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    260[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'tutorial2-01.mat'
PermissionError: [Errno 13] Permission denied: 'tutorial2-01.mat'

Executability                            : False
"
869,"/mnt/fit-Knowledgezoo/jupyternotebooks/kylepjohnson@notebooks/google_ml_tensorflow/Google 5, Classifier.ipynb","3.5
An error occurred while executing the following cell:
------------------
df = make_all_features_for_tweets()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-16-a269126a997e>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mdf[0m [0;34m=[0m [0mmake_all_features_for_tweets[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m<ipython-input-15-fab5c6a03276>[0m in [0;36mmake_all_features_for_tweets[0;34m()[0m
[1;32m      9[0m     [0mfeatures_dir[0m [0;34m=[0m [0;34m'feature_tables'[0m[0;34m[0m[0m
[1;32m     10[0m     [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0misdir[0m[0;34m([0m[0mfeatures_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 11[0;31m         [0mos[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mfeatures_dir[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     12[0m [0;34m[0m[0m
[1;32m     13[0m     [0;31m# load csvs to dfs[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'feature_tables'
PermissionError: [Errno 13] Permission denied: 'feature_tables'

Executability                            : False
"
892,/mnt/fit-Knowledgezoo/jupyternotebooks/garth-wells@IA-maths-Jupyter/Lecture01.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
init_printing()
from IPython.display import display

from fractions import Fraction

# Support for interactive plots
from ipywidgets import interact

%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-0f0c2d5304be>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0minit_printing[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
893,/mnt/fit-Knowledgezoo/jupyternotebooks/garth-wells@IA-maths-Jupyter/Lecture08.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *

# This initialises pretty printing
init_printing()
from IPython.display import display

# This command makes plots appear inside the browser window
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-9b0a8a4422d6>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;31m# This initialises pretty printing[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
897,/mnt/fit-Knowledgezoo/jupyternotebooks/jklymak@Phy411/lectures/Lecture-07-Filtering.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
init_printing()
from IPython.display import display
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-f0d6d4fdb41b>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0minit_printing[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
899,/mnt/fit-Knowledgezoo/jupyternotebooks/jklymak@Phy411/lectures/Lecture-06-Cospectra-Sampling.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *

# This initialises pretty printing
init_printing()
from IPython.display import display

# Support for interactive plots
from ipywidgets import interact

# This command makes plots appear inside the browser window
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-5dd879c38950>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;31m# This initialises pretty printing[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
900,/mnt/fit-Knowledgezoo/jupyternotebooks/cpraveen@chebpy/p02.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import sympy
from sympy import symbols, Eq, Derivative, init_printing, Function, dsolve, exp, classify_ode, checkodesol

# This initialises pretty printing
init_printing()
from IPython.display import display

# Support for interactive plots
from ipywidgets import interact

# This command makes plots appear inside the browser window
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-fd66e9d526e4>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0msympy[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0msymbols[0m[0;34m,[0m [0mEq[0m[0;34m,[0m [0mDerivative[0m[0;34m,[0m [0minit_printing[0m[0;34m,[0m [0mFunction[0m[0;34m,[0m [0mdsolve[0m[0;34m,[0m [0mexp[0m[0;34m,[0m [0mclassify_ode[0m[0;34m,[0m [0mcheckodesol[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
902,/mnt/fit-Knowledgezoo/jupyternotebooks/cpraveen@chebpy/p01.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
init_printing()
from IPython.display import display
from sympy.plotting import plot_parametric

# This command makes plots appear inside the browser window
%matplotlib inline

# Create independent variable and function for x and y
s = Symbol('s')
xs = Function('xs')
ys = Function('ys')

# Pick concrete values for a and b
a = 5
b = 3

# Parametric representation of ellipse
xs = a*cos(s)
ys = b*sin(s)

# Plot parametric line
plot_parametric(xs, ys)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-1065ca576450>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0minit_printing[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
903,/mnt/fit-Knowledgezoo/jupyternotebooks/DAInamite@programming-humanoid-robot-in-python/joint_control/add_training_data.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import networkx as nx

# Create a directed networkx graph
G = nx.DiGraph()

# Add web pages (graph nodes)
for i in range(5):
   G.add_node(i, label=""p"" + str(i))

# Add outgoing web links with weights (directed graph edges)
G.add_edge(0, 1, weight=1.0/4.0, label=""1/4"")
G.add_edge(0, 2, weight=1.0/4.0, label=""1/4"")
G.add_edge(0, 3, weight=1.0/4.0, label=""1/4"")
G.add_edge(0, 4, weight=1.0/4.0, label=""1/4"")


G.add_edge(1, 2, weight=1.0/3.0, label=""1/3"")
G.add_edge(1, 3, weight=1.0/3.0, label=""1/3"")
G.add_edge(1, 4, weight=1.0/3.0, label=""1/3"")

G.add_edge(2, 0, weight=1.0/2.0, label=""1/2"")
G.add_edge(2, 1, weight=1.0/2.0, label=""1/2"")

G.add_edge(3, 0, weight=1.0/2.0, label=""1/2"")
G.add_edge(3, 2, weight=1.0/2.0, label=""1/2"")

G.add_edge(4, 1, weight=1.0/3.0, label=""1/3"")
G.add_edge(4, 2, weight=1.0/3.0, label=""1/3"")
G.add_edge(4, 3, weight=1.0/3.0, label=""1/3"")

print(nx.__version__)

# To plot graph, convert to a PyGraphviz graph for drawing
Ag = nx.nx_agraph.to_agraph(G)
Ag.layout(prog='dot')
Ag.draw('web.svg')
from IPython.display import SVG
SVG('web.svg')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-9bac6c3f1a10>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;31m# Create a directed networkx graph[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
945,/mnt/fit-Knowledgezoo/jupyternotebooks/bgruening@notebooks/Python/count_biocontainer.ipynb,"3.6
An error occurred while executing the following cell:
------------------
X, y = load_iris(return_X_y=True)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mError[0m                                     Traceback (most recent call last)
[0;32m<ipython-input-3-de1cb979078f>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mX[0m[0;34m,[0m [0my[0m [0;34m=[0m [0mload_iris[0m[0;34m([0m[0mreturn_X_y[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mX_train[0m[0;34m,[0m [0mX_test[0m[0;34m,[0m [0my_train[0m[0;34m,[0m [0my_test[0m [0;34m=[0m [0mtrain_test_split[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0mtest_size[0m[0;34m=[0m[0;36m0.2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/sklearn/datasets/base.py[0m in [0;36mload_iris[0;34m(return_X_y)[0m
[1;32m    382[0m     """"""
[1;32m    383[0m     [0mmodule_path[0m [0;34m=[0m [0mdirname[0m[0;34m([0m[0m__file__[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 384[0;31m     [0mdata[0m[0;34m,[0m [0mtarget[0m[0;34m,[0m [0mtarget_names[0m [0;34m=[0m [0mload_data[0m[0;34m([0m[0mmodule_path[0m[0;34m,[0m [0;34m'iris.csv'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    385[0m     [0miris_csv_filename[0m [0;34m=[0m [0mjoin[0m[0;34m([0m[0mmodule_path[0m[0;34m,[0m [0;34m'data'[0m[0;34m,[0m [0;34m'iris.csv'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    386[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/sklearn/datasets/base.py[0m in [0;36mload_data[0;34m(module_path, data_file_name)[0m
[1;32m    233[0m     [0;32mwith[0m [0mopen[0m[0;34m([0m[0mjoin[0m[0;34m([0m[0mmodule_path[0m[0;34m,[0m [0;34m'data'[0m[0;34m,[0m [0mdata_file_name[0m[0;34m)[0m[0;34m)[0m [0;32mas[0m [0mcsv_file[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    234[0m         [0mdata_file[0m [0;34m=[0m [0mcsv[0m[0;34m.[0m[0mreader[0m[0;34m([0m[0mcsv_file[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 235[0;31m         [0mtemp[0m [0;34m=[0m [0mnext[0m[0;34m([0m[0mdata_file[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    236[0m         [0mn_samples[0m [0;34m=[0m [0mint[0m[0;34m([0m[0mtemp[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    237[0m         [0mn_features[0m [0;34m=[0m [0mint[0m[0;34m([0m[0mtemp[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mError[0m: line contains NULL byte
Error: line contains NULL byte

Executability                            : False
"
968,/mnt/fit-Knowledgezoo/jupyternotebooks/mglerner@IntroToComputationalScience/AnnealingSalesman/Annealing Salesman.ipynb,"3.6
An error occurred while executing the following cell:
------------------
%%writefile test_string.py

import unittest

class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
    
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-27-ea371b3f6ed4>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_cell_magic[0m[0;34m([0m[0;34m'writefile'[0m[0;34m,[0m [0;34m'test_string.py'[0m[0;34m,[0m [0;34m""\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self.assertEqual(s.split(), ['hello', 'world'])\n        # check that s.split fails when the separator is not a string\n        with self.assertRaises(TypeError):\n            s.split(2)\n\nif __name__ == '__main__':\n    unittest.main()\n    \n""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_cell_magic[0;34m(self, magic_name, line, cell)[0m
[1;32m   2350[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2351[0m                 [0margs[0m [0;34m=[0m [0;34m([0m[0mmagic_arg_s[0m[0;34m,[0m [0mcell[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2352[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2353[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2354[0m [0;34m[0m[0m

[0;32m</home/dabao/.local/lib/python3.6/site-packages/decorator.py:decorator-gen-105>[0m in [0;36mwritefile[0;34m(self, line, cell)[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/IPython/core/magics/osm.py[0m in [0;36mwritefile[0;34m(self, line, cell)[0m
[1;32m    840[0m [0;34m[0m[0m
[1;32m    841[0m         [0mmode[0m [0;34m=[0m [0;34m'a'[0m [0;32mif[0m [0margs[0m[0;34m.[0m[0mappend[0m [0;32melse[0m [0;34m'w'[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 842[0;31m         [0;32mwith[0m [0mio[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;34m'utf-8'[0m[0;34m)[0m [0;32mas[0m [0mf[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    843[0m             [0mf[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mcell[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'test_string.py'
PermissionError: [Errno 13] Permission denied: 'test_string.py'

Executability                            : False
"
976,/mnt/fit-Knowledgezoo/jupyternotebooks/chuckpr@CSIP_succession_data_analysis/figures_and_stats/labeled_biomass_estimate.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np, scipy as sp, matplotlib as mpl, pandas as pd, seaborn as sns, random
from matplotlib import pyplot as plt
from ipywidgets import interact
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-bff094e12e28>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m,[0m [0mscipy[0m [0;32mas[0m [0msp[0m[0;34m,[0m [0mmatplotlib[0m [0;32mas[0m [0mmpl[0m[0;34m,[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m,[0m [0mseaborn[0m [0;32mas[0m [0msns[0m[0;34m,[0m [0mrandom[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'matplotlib'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
977,/mnt/fit-Knowledgezoo/jupyternotebooks/looselycoupled@xbus-503-ipython-demos/BeautifulSoup/demo.ipynb,"3.6
An error occurred while executing the following cell:
------------------
assert is_num_palindrome(123321)
assert not is_num_palindrome(42)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-2-5259d5e709ec>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32massert[0m [0mis_num_palindrome[0m[0;34m([0m[0;36m123321[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32massert[0m [0;32mnot[0m [0mis_num_palindrome[0m[0;34m([0m[0;36m42[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'is_num_palindrome' is not defined
NameError: name 'is_num_palindrome' is not defined

Executability                            : False
"
985,/mnt/fit-Knowledgezoo/jupyternotebooks/alberto139@Udacity/MLND/P0_titanic_survival_exploration/Titanic_Survival_Exploration.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline

# imports
from bs4 import BeautifulSoup
import matplotlib.pyplot as plt

# create handle to BeautifulSoup instance
soup = BeautifulSoup(open(""./data/gu-home.html""), ""html.parser"")

# save all anchors from the page
all_anchors = soup.find_all('a')
all_anchors[:10]
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-321422a8bd43>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;31m# imports[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mfrom[0m [0mbs4[0m [0;32mimport[0m [0mBeautifulSoup[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      8[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'bs4'
ImportError: No module named 'bs4'

Executability                            : False
"
986,/mnt/fit-Knowledgezoo/jupyternotebooks/astroandes@BlackHole/src/test.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interactive

from IPython.display import display
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-14-3af0a6abf3e0>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteractive[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
991,/mnt/fit-Knowledgezoo/jupyternotebooks/damontallen@Construction-Lectures-Fall-2014/Week 0 - Greetings - Web only.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%pylab inline
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
from IPython.html.widgets import interact, interactive, fixed
import ToomreGalaxy as ToomreGalaxy
a = interact(ToomreGalaxy.Make_Plot_stars,results = fixed(np.load('Toomre_A.npy')), M = fixed(1.0e11), S = fixed(1.0e11), t = (0.1,20.1), dt = fixed(0.0075))

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f94abd8b2993>[0m in [0;36m<module>[0;34m()[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mfrom[0m [0mscipy[0m[0;34m.[0m[0mintegrate[0m [0;32mimport[0m [0modeint[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mhtml[0m[0;34m.[0m[0mwidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m,[0m [0mfixed[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0;32mimport[0m [0mToomreGalaxy[0m [0;32mas[0m [0mToomreGalaxy[0m[0;34m[0m[0m
[1;32m      9[0m [0ma[0m [0;34m=[0m [0minteract[0m[0;34m([0m[0mToomreGalaxy[0m[0;34m.[0m[0mMake_Plot_stars[0m[0;34m,[0m[0mresults[0m [0;34m=[0m [0mfixed[0m[0;34m([0m[0mnp[0m[0;34m.[0m[0mload[0m[0;34m([0m[0;34m'Toomre_A.npy'[0m[0;34m)[0m[0;34m)[0m[0;34m,[0m [0mM[0m [0;34m=[0m [0mfixed[0m[0;34m([0m[0;36m1.0e11[0m[0;34m)[0m[0;34m,[0m [0mS[0m [0;34m=[0m [0mfixed[0m[0;34m([0m[0;36m1.0e11[0m[0;34m)[0m[0;34m,[0m [0mt[0m [0;34m=[0m [0;34m([0m[0;36m0.1[0m[0;34m,[0m[0;36m20.1[0m[0;34m)[0m[0;34m,[0m [0mdt[0m [0;34m=[0m [0mfixed[0m[0;34m([0m[0;36m0.0075[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'widgets'
ImportError: No module named 'widgets'

Executability                            : False
"
997,/mnt/fit-Knowledgezoo/jupyternotebooks/damontallen@Construction-Lectures-Fall-2014/Week 12 - Excavation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from sklearn.externals import joblib

# save the classifier object as LRclf.pkl
joblib.dump(clf, filename='LRclf.pkl')
# save the vectorizer object as vectorizer.pkl
joblib.dump(vectorizer, filename='vectorizer.pkl')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-12-0c6e72ae258e>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0;31m# save the classifier object as LRclf.pkl[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0mjoblib[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0mclf[0m[0;34m,[0m [0mfilename[0m[0;34m=[0m[0;34m'LRclf.pkl'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;31m# save the vectorizer object as vectorizer.pkl[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m [0mjoblib[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0mvectorizer[0m[0;34m,[0m [0mfilename[0m[0;34m=[0m[0;34m'vectorizer.pkl'[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/sklearn/externals/joblib/numpy_pickle.py[0m in [0;36mdump[0;34m(value, filename, compress, protocol, cache_size)[0m
[1;32m    499[0m             [0mNumpyPickler[0m[0;34m([0m[0mf[0m[0;34m,[0m [0mprotocol[0m[0;34m=[0m[0mprotocol[0m[0;34m)[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0mvalue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    500[0m     [0;32melif[0m [0mis_filename[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 501[0;31m         [0;32mwith[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m [0;32mas[0m [0mf[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m    502[0m             [0mNumpyPickler[0m[0;34m([0m[0mf[0m[0;34m,[0m [0mprotocol[0m[0;34m=[0m[0mprotocol[0m[0;34m)[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0mvalue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    503[0m     [0;32melse[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'LRclf.pkl'
PermissionError: [Errno 13] Permission denied: 'LRclf.pkl'

Executability                            : False
"
1002,/mnt/fit-Knowledgezoo/jupyternotebooks/IvanSmirnovRus@code/python/Lecture11.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%%javascript
IPython.load_extensions(""calico-spell-check"", ""calico-document-tools"", ""calico-cell-tools"");
------------------


UsageError: Line magic function `%%javascript` not found.

Executability                            : False
"
1028,/mnt/fit-Knowledgezoo/jupyternotebooks/nicoguaro@notebooks_examples/Manufactured solutions.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import bokeh.sampledata
from bokeh.plotting import figure, output_file, show
import matplotlib.pyplot as plt
from IPython.display import HTML
import os
import IPython.core.display as di

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-f463fadd04ad>[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0mbokeh[0m[0;34m.[0m[0msampledata[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mplotting[0m [0;32mimport[0m [0mfigure[0m[0;34m,[0m [0moutput_file[0m[0;34m,[0m [0mshow[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'bokeh'
ModuleNotFoundError: No module named 'bokeh'

Executability                            : False
"
1029,/mnt/fit-Knowledgezoo/jupyternotebooks/nicoguaro@notebooks_examples/Airy stress functions.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import bokeh.sampledata
from bokeh.plotting import figure, output_file, show
import matplotlib.pyplot as plt
from IPython.display import HTML
import os
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-622e1c1dc13f>[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0mbokeh[0m[0;34m.[0m[0msampledata[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mplotting[0m [0;32mimport[0m [0mfigure[0m[0;34m,[0m [0moutput_file[0m[0;34m,[0m [0mshow[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'bokeh'
ModuleNotFoundError: No module named 'bokeh'

Executability                            : False
"
1033,/mnt/fit-Knowledgezoo/jupyternotebooks/nicoguaro@notebooks_examples/QM_analytical solutions.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
import numpy as np
from sympy import *
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import colors
------------------

[0;36m  File [0;32m""<ipython-input-1-394b77b3992b>""[0;36m, line [0;32m2[0m
[0;31m    warnings.filterwarnings('ignore')[0m
[0m         ^[0m
[0;31mSyntaxError[0m[0;31m:[0m import * only allowed at module level

SyntaxError: import * only allowed at module level (<ipython-input-1-394b77b3992b>, line 2)

Executability                            : False
"
1036,/mnt/fit-Knowledgezoo/jupyternotebooks/nicoguaro@notebooks_examples/Stiffness_eigenvalues.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
from sympy import *
x, y, z, t = symbols('x y z t')
f, g, h = symbols('f g h', cls=Function)
init_printing()
------------------

[0;36m  File [0;32m""<ipython-input-1-a0374f0ffde0>""[0;36m, line [0;32m2[0m
[0;31m    warnings.filterwarnings('ignore')[0m
[0m         ^[0m
[0;31mSyntaxError[0m[0;31m:[0m import * only allowed at module level

SyntaxError: import * only allowed at module level (<ipython-input-1-a0374f0ffde0>, line 2)

Executability                            : False
"
1037,/mnt/fit-Knowledgezoo/jupyternotebooks/gboye@Divers/LibreOffice-IncludeMacro.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-4ae3617c49e4>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
1042,/mnt/fit-Knowledgezoo/jupyternotebooks/tentaaakel@chicaca/stringCompare.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
from sympy import *
from sympy import symbols
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

x, y, z = symbols('x y z')
h1, h2, h3, L, r = symbols('h1 h2 h3 L r')
init_printing()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-c19347f450c2>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0m__future__[0m [0;32mimport[0m [0mdivision[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0msymbols[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
1044,/mnt/fit-Knowledgezoo/jupyternotebooks/tentaaakel@chicaca/charSort.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
from sympy.utilities.codegen import codegen
from sympy import *
from sympy import init_printing
init_printing()
------------------

[0;36m  File [0;32m""<ipython-input-1-6931c7d89ed2>""[0;36m, line [0;32m2[0m
[0;31m    warnings.filterwarnings('ignore')[0m
[0m         ^[0m
[0;31mSyntaxError[0m[0;31m:[0m import * only allowed at module level

SyntaxError: import * only allowed at module level (<ipython-input-1-6931c7d89ed2>, line 2)

Executability                            : False
"
1053,/mnt/fit-Knowledgezoo/jupyternotebooks/aligazala@datasciencecoursera/First_Analysis.ipynb,"3.5
Cell execution timed out
Executability                            : False
"
1054,/mnt/fit-Knowledgezoo/jupyternotebooks/ondrolexa@sg2/13_Transpression.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
def computeCV(data):
    # http://scikit-learn.org/dev/modules/classes.html#module-sklearn.cross_validation
    from sklearn import ensemble, cross_validation
    clf = ensemble.RandomForestClassifier(n_estimators=1000, n_jobs=5, verbose=0)
    # http://randomforests.wordpress.com/2014/02/02/basics-of-k-fold-cross-validation-and-gridsearchcv-in-scikit-learn/
    res = cross_validation.cross_val_score(clf, data.data, data.target, cv=10, n_jobs = 5)
    print(res)

def dtime_to_seconds(dtime):
    return dtime.seconds + (dtime.microseconds * 1e-6)

def bench(func, data, n=10):
    assert n > 2
    score = np.inf
    try:
        time = []
        for i in range(n):
            score, t = func(*data)
            time.append(dtime_to_seconds(t))
        # remove extremal values
        time.pop(np.argmax(time))
        time.pop(np.argmin(time))
    except Exception as detail:
        print('%s error in function %s: ', (repr(detail), func))
        time = []
    return score, np.array(time)

def bench_skl(X, y, T, valid):
    from sklearn import ensemble #, linear_model
    #from sklearn.utils import safe_asarray
    start = datetime.now()
    
    # balance the dataset
    # https://github.com/scikit-learn/scikit-learn/blob/8dab222cfe894126dfb67832da2f4e871b87bce7/sklearn/preprocessing/_weights.py
    y = np.searchsorted(np.unique(y), y)
    class_weight_bins = np.bincount(y)
    # from class weights to sample weights
    sample_weights = 1. / class_weight_bins.take(y)
    sample_weights *= class_weight_bins.min()
    
    
    # http://scikit-learn.org/stable/modules/classes.html
    clf = ensemble.RandomForestClassifier(n_estimators=1000, n_jobs=5, verbose=0)
    #clf = linear_model.ElasticNet(alpha=0.5, l1_ratio=0.5)
    #clf = linear_model.LogisticRegression()
    #clf = neighbors.NeighborsClassifier(n_neighbors=n_neighbors, algorithm='brute_inplace')
    #clf = skl_cluster.KMeans(k=n_components, n_init=1)
    #...
    clf.fit(X, y, sample_weights)

    ## Regression
    # pred = clf.predict(T)
    # delta = datetime.now() - start
    # mse = np.linalg.norm(pred - valid, 2) ** 2
    # return mse, delta

    # Classification
    score = np.mean(clf.predict(T) == valid)
    return score, datetime.now() - start

def computeAverageFromNRuns(data, num_tries, TH):
    sample_range = np.random.random_sample(size=iris.target.shape[0])
    X = np.array([(iris.data[i,]) for i in range(len(iris.target)) if sample_range[i] >= TH])
    Y = np.array([(iris.target[i,]) for i in range(len(iris.target)) if sample_range[i] >= TH])
    T = np.array([(iris.data[i,]) for i in range(len(iris.target)) if sample_range[i] < TH])
    valid = np.array([(iris.target[i,]) for i in range(len(iris.target)) if sample_range[i] < TH])

    #X, T, y, valid = cross_validation.train_test_split(iris.data, iris.target, test_size=0.9, random_state=0)

    num_tries = 25
    score, times = bench(bench_skl, (X,Y,T,valid), num_tries)
    print('Tries:', num_tries, 'Score:', score, 'Time:', np.mean(times), '(mean)', np.median(times), '(median)')

from sklearn import datasets
import numpy as np
from datetime import datetime
#from sklearn import cross_validation

iris = datasets.load_iris()

computeCV(iris)

runs = 25
TH = 0.9

computeAverageFromNRuns(iris, runs, TH)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-ac8694af88d6>[0m in [0;36m<module>[0;34m()[0m
[1;32m     81[0m [0miris[0m [0;34m=[0m [0mdatasets[0m[0;34m.[0m[0mload_iris[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m     82[0m [0;34m[0m[0m
[0;32m---> 83[0;31m [0mcomputeCV[0m[0;34m([0m[0miris[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m [0mruns[0m [0;34m=[0m [0;36m25[0m[0;34m[0m[0m

[0;32m<ipython-input-1-ac8694af88d6>[0m in [0;36mcomputeCV[0;34m(data)[0m
[1;32m      3[0m [0;32mdef[0m [0mcomputeCV[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      4[0m     [0;31m# http://scikit-learn.org/dev/modules/classes.html#module-sklearn.cross_validation[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m     [0;32mfrom[0m [0msklearn[0m [0;32mimport[0m [0mensemble[0m[0;34m,[0m [0mcross_validation[0m[0;34m[0m[0m
[0m[1;32m      6[0m     [0mclf[0m [0;34m=[0m [0mensemble[0m[0;34m.[0m[0mRandomForestClassifier[0m[0;34m([0m[0mn_estimators[0m[0;34m=[0m[0;36m1000[0m[0;34m,[0m [0mn_jobs[0m[0;34m=[0m[0;36m5[0m[0;34m,[0m [0mverbose[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      7[0m     [0;31m# http://randomforests.wordpress.com/2014/02/02/basics-of-k-fold-cross-validation-and-gridsearchcv-in-scikit-learn/[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: cannot import name 'cross_validation'
ImportError: cannot import name 'cross_validation'

Executability                            : False
"
1055,/mnt/fit-Knowledgezoo/jupyternotebooks/ondrolexa@sg2/12_Superposed_deformation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
writeFp = open('config.json', 'w')
json.dump({'b':1, 'a':2}, writeFp, sort_keys=True)
writeFp.close()
readFp = open('config.json', 'r')
for line in readFp:
    print(line)
readFp.close()

# separators without spaces reduce json file size
print(json.dumps({'b':1, 'a':2}, sort_keys=True, separators=(',', ':')))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-7-a76939ee0056>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mwriteFp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0;34m'config.json'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mjson[0m[0;34m.[0m[0mdump[0m[0;34m([0m[0;34m{[0m[0;34m'b'[0m[0;34m:[0m[0;36m1[0m[0;34m,[0m [0;34m'a'[0m[0;34m:[0m[0;36m2[0m[0;34m}[0m[0;34m,[0m [0mwriteFp[0m[0;34m,[0m [0msort_keys[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0mwriteFp[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0mreadFp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0;34m'config.json'[0m[0;34m,[0m [0;34m'r'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfor[0m [0mline[0m [0;32min[0m [0mreadFp[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'config.json'
PermissionError: [Errno 13] Permission denied: 'config.json'

Executability                            : False
"
1058,/mnt/fit-Knowledgezoo/jupyternotebooks/ondrolexa@sg2/10_Introduction_to_strain_analysis.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# Modules cell
import matplotlib.pyplot as plt
from matplotlib.colors import LogNorm
import seaborn as sns
import numpy as np
import pandas as pd
import os
import re
import scipy as sp
import scipy.linalg
import scipy.stats as sps
import networkx as nx
import copy
%matplotlib inline
sns.set_style('ticks')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-cf17494633c6>[0m in [0;36m<module>[0;34m()[0m
[1;32m     12[0m [0;32mimport[0m [0mscipy[0m[0;34m.[0m[0mlinalg[0m[0;34m[0m[0m
[1;32m     13[0m [0;32mimport[0m [0mscipy[0m[0;34m.[0m[0mstats[0m [0;32mas[0m [0msps[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0;32mimport[0m [0mcopy[0m[0;34m[0m[0m
[1;32m     16[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'matplotlib'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1076,/mnt/fit-Knowledgezoo/jupyternotebooks/postlogist@course_reliability/structural_reliability/svertka.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from bs4 import BeautifulSoup
def print_quotes(soup):
    for quote in soup.find_all('span', {'itemprop': 'text'}):
        author = quote.findNext('small', {'itemprop': 'author'}).text
        print(""%-20s"" % author, quote.text[:50])
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-70b06fe6ecaf>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mbs4[0m [0;32mimport[0m [0mBeautifulSoup[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mdef[0m [0mprint_quotes[0m[0;34m([0m[0msoup[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     [0;32mfor[0m [0mquote[0m [0;32min[0m [0msoup[0m[0;34m.[0m[0mfind_all[0m[0;34m([0m[0;34m'span'[0m[0;34m,[0m [0;34m{[0m[0;34m'itemprop'[0m[0;34m:[0m [0;34m'text'[0m[0;34m}[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'bs4'
ImportError: No module named 'bs4'

Executability                            : False
"
1101,"/mnt/fit-Knowledgezoo/jupyternotebooks/ninotoshi@playground/book/grokking_deep_learning/6 Our First ""Deep"" Neural Network.ipynb","3.5
An error occurred while executing the following cell:
------------------
init(m)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m<ipython-input-4-b21f7ebb85e0>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0minit[0m[0;34m([0m[0mm[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ondrolexa@heat/heatlib_var.py[0m in [0;36minit[0;34m(m)[0m
[1;32m     68[0m     [0mm[0m[0;34m[[0m[0;34m'xm'[0m[0;34m][0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mlinspace[0m[0;34m([0m[0mm[0m[0;34m[[0m[0;34m'dx'[0m[0;34m][0m[0;34m/[0m[0;36m2[0m[0;34m,[0m [0mm[0m[0;34m[[0m[0;34m'tc'[0m[0;34m][0m [0;34m-[0m [0mm[0m[0;34m[[0m[0;34m'dx'[0m[0;34m][0m[0;34m/[0m[0;36m2[0m[0;34m,[0m [0mm[0m[0;34m[[0m[0;34m'n'[0m[0;34m][0m[0;34m-[0m[0;36m1[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     69[0m     [0;31m# Boundary conditions[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 70[0;31m     [0;32mif[0m [0mm[0m[0;34m[[0m[0;34m'bc0'[0m[0;34m][0m[0;34m[[0m[0;34m'kind'[0m[0;34m][0m [0;34m==[0m [0;34m'dirichlet'[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m     71[0m         [0mu2[0m [0;34m=[0m [0;34m[[0m[0;36m1[0m[0;34m,[0m [0;36m0[0m[0;34m][0m[0;34m[0m[0m
[1;32m     72[0m         [0mbu[0m [0;34m=[0m [0mm[0m[0;34m[[0m[0;34m'bc0'[0m[0;34m][0m[0;34m[[0m[0;34m'val'[0m[0;34m][0m[0;34m[0m[0m

[0;31mKeyError[0m: 'bc0'
KeyError: 'bc0'

Executability                            : False
"
1106,/mnt/fit-Knowledgezoo/jupyternotebooks/ninotoshi@playground/book/grokking_deep_learning/4.2 Learning the whole dataset.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# reseni s konstatni konduktivitou
m = dict(n=100, k=2.5*np.ones(99), H=1e-6*np.ones(99), tc=35000, T0=0, q=-0.02)
init(m)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
[0;32m<ipython-input-19-cbd62ab80f77>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;31m# reseni s konstatni konduktivitou[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mm[0m [0;34m=[0m [0mdict[0m[0;34m([0m[0mn[0m[0;34m=[0m[0;36m100[0m[0;34m,[0m [0mk[0m[0;34m=[0m[0;36m2.5[0m[0;34m*[0m[0mnp[0m[0;34m.[0m[0mones[0m[0;34m([0m[0;36m99[0m[0;34m)[0m[0;34m,[0m [0mH[0m[0;34m=[0m[0;36m1e-6[0m[0;34m*[0m[0mnp[0m[0;34m.[0m[0mones[0m[0;34m([0m[0;36m99[0m[0;34m)[0m[0;34m,[0m [0mtc[0m[0;34m=[0m[0;36m35000[0m[0;34m,[0m [0mT0[0m[0;34m=[0m[0;36m0[0m[0;34m,[0m [0mq[0m[0;34m=[0m[0;34m-[0m[0;36m0.02[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0minit[0m[0;34m([0m[0mm[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ondrolexa@heat/heatlib_var.py[0m in [0;36minit[0;34m(m)[0m
[1;32m     68[0m     [0mm[0m[0;34m[[0m[0;34m'xm'[0m[0;34m][0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mlinspace[0m[0;34m([0m[0mm[0m[0;34m[[0m[0;34m'dx'[0m[0;34m][0m[0;34m/[0m[0;36m2[0m[0;34m,[0m [0mm[0m[0;34m[[0m[0;34m'tc'[0m[0;34m][0m [0;34m-[0m [0mm[0m[0;34m[[0m[0;34m'dx'[0m[0;34m][0m[0;34m/[0m[0;36m2[0m[0;34m,[0m [0mm[0m[0;34m[[0m[0;34m'n'[0m[0;34m][0m[0;34m-[0m[0;36m1[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     69[0m     [0;31m# Boundary conditions[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 70[0;31m     [0;32mif[0m [0mm[0m[0;34m[[0m[0;34m'bc0'[0m[0;34m][0m[0;34m[[0m[0;34m'kind'[0m[0;34m][0m [0;34m==[0m [0;34m'dirichlet'[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m     71[0m         [0mu2[0m [0;34m=[0m [0;34m[[0m[0;36m1[0m[0;34m,[0m [0;36m0[0m[0;34m][0m[0;34m[0m[0m
[1;32m     72[0m         [0mbu[0m [0;34m=[0m [0mm[0m[0;34m[[0m[0;34m'bc0'[0m[0;34m][0m[0;34m[[0m[0;34m'val'[0m[0;34m][0m[0;34m[0m[0m

[0;31mKeyError[0m: 'bc0'
KeyError: 'bc0'

Executability                            : False
"
1118,/mnt/fit-Knowledgezoo/jupyternotebooks/francisglee@problem-sets/20.440_Biological_Networks/Pset3/Functions.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import skimage
from skimage import img_as_float
import skimage.filters as skif
from skimage.color import rgb2gray
import skimage.data as skid
import skimage.exposure as skie
from ipywidgets import interact
import matplotlib.pyplot as plt
import seaborn
%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-7ad10395a750>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mimport[0m [0mskimage[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mfrom[0m [0mskimage[0m [0;32mimport[0m [0mimg_as_float[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mimport[0m [0mskimage[0m[0;34m.[0m[0mfilters[0m [0;32mas[0m [0mskif[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'skimage'
ModuleNotFoundError: No module named 'skimage'

Executability                            : False
"
1122,/mnt/fit-Knowledgezoo/jupyternotebooks/thierryherrmann@simple-machine-learning/singular-value-decomposition-img-compr/SVD_recommendation_and_img_compression.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import print_function
import pandas as pd
import numpy as np
from scipy import  stats
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.graphics.api import qqplot
------------------

[0;36m  File [0;32m""<ipython-input-1-c721773c5844>""[0;36m, line [0;32m6[0m
[0;31m    from scipy import  stats[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-c721773c5844>, line 6)

Executability                            : False
"
1141,/mnt/fit-Knowledgezoo/jupyternotebooks/donovanfm@data-journeyman/app/ipython-notebooks/santy_claus.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0, 0.99, 0.01)
s = 8.1/(8.1+(1-t))
plt.plot(t, s)

plt.xlabel('Negative Predictive Value')
plt.ylabel('p(S=tr|B=tr)')
plt.title('Posterior probability of Syphilis')
plt.grid(True)
plt.savefig(""test.png"")
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-1-b9a5993685c3>[0m in [0;36m<module>[0;34m()[0m
[1;32m     12[0m [0mplt[0m[0;34m.[0m[0mtitle[0m[0;34m([0m[0;34m'Posterior probability of Syphilis'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     13[0m [0mplt[0m[0;34m.[0m[0mgrid[0m[0;34m([0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m""test.png""[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36msavefig[0;34m(*args, **kwargs)[0m
[1;32m    686[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    687[0m     [0mfig[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 688[0;31m     [0mres[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    689[0m     [0mfig[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mdraw_idle[0m[0;34m([0m[0;34m)[0m   [0;31m# need this if 'transparent=True' to reset colors[0m[0;34m[0m[0m
[1;32m    690[0m     [0;32mreturn[0m [0mres[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, frameon, transparent, **kwargs)[0m
[1;32m   2095[0m             [0mself[0m[0;34m.[0m[0mset_frameon[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2096[0m [0;34m[0m[0m
[0;32m-> 2097[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2098[0m [0;34m[0m[0m
[1;32m   2099[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2073[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2074[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2075[0;31m                     **kwargs)
[0m[1;32m   2076[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2077[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py[0m in [0;36mprint_png[0;34m(self, filename_or_obj, *args, **kwargs)[0m
[1;32m    519[0m [0;34m[0m[0m
[1;32m    520[0m         [0;32mwith[0m [0mcbook[0m[0;34m.[0m[0m_setattr_cm[0m[0;34m([0m[0mrenderer[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mfigure[0m[0;34m.[0m[0mdpi[0m[0;34m)[0m[0;34m,[0m[0;31m [0m[0;31m\[0m[0;34m[0m[0m
[0;32m--> 521[0;31m                 [0mcbook[0m[0;34m.[0m[0mopen_file_cm[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m,[0m [0;34m""wb""[0m[0;34m)[0m [0;32mas[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m    522[0m             _png.write_png(renderer._renderer, fh,
[1;32m    523[0m                             self.figure.dpi, metadata=metadata)

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/contextlib.py[0m in [0;36m__enter__[0;34m(self)[0m
[1;32m     57[0m     [0;32mdef[0m [0m__enter__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     58[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 59[0;31m             [0;32mreturn[0m [0mnext[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mgen[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     60[0m         [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     61[0m             [0;32mraise[0m [0mRuntimeError[0m[0;34m([0m[0;34m""generator didn't yield""[0m[0;34m)[0m [0;32mfrom[0m [0;32mNone[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mopen_file_cm[0;34m(path_or_file, mode, encoding)[0m
[1;32m    405[0m [0;32mdef[0m [0mopen_file_cm[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0;34m""r""[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    406[0m     [0;34mr""""""Pass through file objects and context-manage `.PathLike`\s.""""""[0m[0;34m[0m[0m
[0;32m--> 407[0;31m     [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mto_filehandle[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0;32mTrue[0m[0;34m,[0m [0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    408[0m     [0;32mif[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    409[0m         [0;32mwith[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    390[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    391[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 392[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    393[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    394[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'test.png'
PermissionError: [Errno 13] Permission denied: 'test.png'

Executability                            : False
"
1150,/mnt/fit-Knowledgezoo/jupyternotebooks/anokhin@sfera-dm/lecture_01/tutorial/python-tools.v3.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 4)
N_train, = y_train.shape
N_test,  = y_test.shape
print (N_train, N_test)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-f7544be84d2c>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mtrain_test_split[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mX_train[0m[0;34m,[0m [0mX_test[0m[0;34m,[0m [0my_train[0m[0;34m,[0m [0my_test[0m [0;34m=[0m [0mtrain_test_split[0m[0;34m([0m[0mX[0m[0;34m,[0m [0my[0m[0;34m,[0m [0mtest_size[0m [0;34m=[0m [0;36m0.25[0m[0;34m,[0m [0mrandom_state[0m [0;34m=[0m [0;36m4[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0mN_train[0m[0;34m,[0m [0;34m=[0m [0my_train[0m[0;34m.[0m[0mshape[0m[0;34m[0m[0m
[1;32m      4[0m [0mN_test[0m[0;34m,[0m  [0;34m=[0m [0my_test[0m[0;34m.[0m[0mshape[0m[0;34m[0m[0m
[1;32m      5[0m [0mprint[0m [0;34m([0m[0mN_train[0m[0;34m,[0m [0mN_test[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
1151,/mnt/fit-Knowledgezoo/jupyternotebooks/mikekul1984@firstrepo/Python/nborwankar-LearnDataScience-97d8d7d/notebooks/D1. K-Means Clustering - Overview.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# print(X_data.shape)
# print(y_data.shape)

from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.25, random_state = 11)

N_train, _ = X_train.shape 
N_test,  _ = X_test.shape 
print (N_train, N_test)
print(X_train.shape)
# print(y_test.shape)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-5-be153d26aaef>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0;31m# print(y_data.shape)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mtrain_test_split[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0mX_train[0m[0;34m,[0m [0mX_test[0m[0;34m,[0m [0my_train[0m[0;34m,[0m [0my_test[0m [0;34m=[0m [0mtrain_test_split[0m[0;34m([0m[0mX_data[0m[0;34m,[0m [0my_data[0m[0;34m,[0m [0mtest_size[0m [0;34m=[0m [0;36m0.25[0m[0;34m,[0m [0mrandom_state[0m [0;34m=[0m [0;36m11[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
1152,/mnt/fit-Knowledgezoo/jupyternotebooks/mikekul1984@firstrepo/Python/nborwankar-LearnDataScience-97d8d7d/notebooks/A2. Linear Regression - Data Exploration - Lending Club.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# print(X_data.shape)
# print(y_data.shape)

from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.25, random_state = 11)

N_train, _ = X_train.shape 
N_test,  _ = X_test.shape 
print (N_train, N_test)
print(X_train.shape)
# print(y_test.shape)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-5-be153d26aaef>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0;31m# print(y_data.shape)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mtrain_test_split[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0mX_train[0m[0;34m,[0m [0mX_test[0m[0;34m,[0m [0my_train[0m[0;34m,[0m [0my_test[0m [0;34m=[0m [0mtrain_test_split[0m[0;34m([0m[0mX_data[0m[0;34m,[0m [0my_data[0m[0;34m,[0m [0mtest_size[0m [0;34m=[0m [0;36m0.25[0m[0;34m,[0m [0mrandom_state[0m [0;34m=[0m [0;36m11[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
1153,/mnt/fit-Knowledgezoo/jupyternotebooks/mikekul1984@firstrepo/Python/nborwankar-LearnDataScience-97d8d7d/notebooks/A2. Linear Regression - Data Exploration - Lending Club.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# print(X_data.shape)
# print(y_data.shape)

from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size = 0.25, random_state = 11)

N_train, _ = X_train.shape 
N_test,  _ = X_test.shape 
print (N_train, N_test)
print(X_train.shape)
# print(y_test.shape)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-5-be153d26aaef>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0;31m# print(y_data.shape)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mtrain_test_split[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0mX_train[0m[0;34m,[0m [0mX_test[0m[0;34m,[0m [0my_train[0m[0;34m,[0m [0my_test[0m [0;34m=[0m [0mtrain_test_split[0m[0;34m([0m[0mX_data[0m[0;34m,[0m [0my_data[0m[0;34m,[0m [0mtest_size[0m [0;34m=[0m [0;36m0.25[0m[0;34m,[0m [0mrandom_state[0m [0;34m=[0m [0;36m11[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
1211,/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/L24SymmetricMatrices.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f69e38cdfb79>[0m in [0;36m<module>[0;34m()[0m
[1;32m      8[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'qrcode'
ImportError: No module named 'qrcode'

Executability                            : False
"
1213,/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/L20Orthogonality.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# %matplotlib nbagg
%matplotlib inline
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
reload(sl)
reload(ut)
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-339d12f92737>[0m in [0;36m<module>[0;34m[0m
[1;32m      9[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0;34m[0m[0m
[1;32m     10[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 11[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     12[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0;34m[0m[0m
[1;32m     13[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'qrcode'
ModuleNotFoundError: No module named 'qrcode'

Executability                            : False
"
1215,/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/L08MatrixofLinearTranformation.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib nbagg
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
reload(sl)
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-00030d305d76>[0m in [0;36m<module>[0;34m[0m
[1;32m      8[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'qrcode'
ModuleNotFoundError: No module named 'qrcode'

Executability                            : False
"
1223,/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/L02Numerics.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f69e38cdfb79>[0m in [0;36m<module>[0;34m()[0m
[1;32m      8[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'qrcode'
ImportError: No module named 'qrcode'

Executability                            : False
"
1225,/mnt/fit-Knowledgezoo/jupyternotebooks/Kuntal-G@Machine-Learning/Python-machine-learning/Unsupervised Learning-SkLearn.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f69e38cdfb79>[0m in [0;36m<module>[0;34m()[0m
[1;32m      8[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'qrcode'
ImportError: No module named 'qrcode'

Executability                            : False
"
1229,/mnt/fit-Knowledgezoo/jupyternotebooks/nansencenter@nansat-lectures/notebooks/03 object oriented programming.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
reload(sl)
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-108f14855491>[0m in [0;36m<module>[0;34m()[0m
[1;32m      8[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'qrcode'
ImportError: No module named 'qrcode'

Executability                            : False
"
1231,/mnt/fit-Knowledgezoo/jupyternotebooks/nansencenter@nansat-lectures/notebooks/examples/piformula.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
%config InlineBackend.figure_format='retina'
# import libraries
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from importlib import reload
from datetime import datetime
from IPython.display import Image
from IPython.display import display_html
from IPython.display import display
from IPython.display import Math
from IPython.display import Latex
from IPython.display import HTML
reload(sl)
print('')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-108f14855491>[0m in [0;36m<module>[0;34m[0m
[1;32m      8[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0;32mimport[0m [0mlaUtilities[0m [0;32mas[0m [0mut[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0;32mimport[0m [0mslideUtilities[0m [0;32mas[0m [0msl[0m[0;34m[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mdemoUtilities[0m [0;32mas[0m [0mdm[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/mcrovella@CS132-Geometric-Algorithms/laUtilities.py[0m in [0;36m<module>[0;34m[0m
[1;32m      6[0m [0;32mimport[0m [0mitertools[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mqrcode[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mhashlib[0m[0;34m[0m[0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'qrcode'
ModuleNotFoundError: No module named 'qrcode'

Executability                            : False
"
1232,/mnt/fit-Knowledgezoo/jupyternotebooks/ProfessorBrunner@ml-sims/deep_learning/helper_sam.ipynb,"3.6
list index out of range
Executability                            : False
"
1235,/mnt/fit-Knowledgezoo/jupyternotebooks/Carreau@talks/2016-09-23-uc-merced-seminar/Factoring.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from clintrials.dosefinding.efftox import _pi_E, _pi_T, _pi_ab, _L_n, scale_doses
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-26b678eb1cca>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mclintrials[0m[0;34m.[0m[0mdosefinding[0m[0;34m.[0m[0mefftox[0m [0;32mimport[0m [0m_pi_E[0m[0;34m,[0m [0m_pi_T[0m[0;34m,[0m [0m_pi_ab[0m[0;34m,[0m [0m_L_n[0m[0;34m,[0m [0mscale_doses[0m[0;34m[0m[0m
[0m
[0;31mImportError[0m: No module named 'clintrials'
ImportError: No module named 'clintrials'

Executability                            : False
"
1243,/mnt/fit-Knowledgezoo/jupyternotebooks/particle-physics-playground@playground/activities/ppp_physicsbkg_000_specialrelativity.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from ipywidgets import interact
from IPython.display import display
from sympy import Symbol, Eq, factor, init_printing
init_printing(use_latex='mathjax')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-42e482da78e7>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0mSymbol[0m[0;34m,[0m [0mEq[0m[0;34m,[0m [0mfactor[0m[0;34m,[0m [0minit_printing[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
1244,/mnt/fit-Knowledgezoo/jupyternotebooks/particle-physics-playground@playground/activities/ppp_experiment_001_cleo.ipynb,"3.5
An error occurred while executing the following cell:
------------------
from ipywidgets import interact, interactive
from IPython.display import clear_output, display, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-bc683a220190>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0minteractive[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mclear_output[0m[0;34m,[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
1245,/mnt/fit-Knowledgezoo/jupyternotebooks/particle-physics-playground@playground/activities/ppp_codebkg_002_babar.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from ipywidgets import interact

@interact
def fun(a=''):
    print(a)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-739598e76648>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0;34m@[0m[0minteract[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
1257,/mnt/fit-Knowledgezoo/jupyternotebooks/qingkaikong@blog/2017_13_visualize_high_dimensional_dataset/Visualize_high_dimensional_dataset.ipynb,"3.6
An error occurred while executing the following cell:
------------------
# load the data
iris = datasets.load_iris()

print(iris.keys())
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mError[0m                                     Traceback (most recent call last)
[0;32m<ipython-input-2-9e370a98a776>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m# load the data[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0miris[0m [0;34m=[0m [0mdatasets[0m[0;34m.[0m[0mload_iris[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0mprint[0m[0;34m([0m[0miris[0m[0;34m.[0m[0mkeys[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/sklearn/datasets/base.py[0m in [0;36mload_iris[0;34m(return_X_y)[0m
[1;32m    382[0m     """"""
[1;32m    383[0m     [0mmodule_path[0m [0;34m=[0m [0mdirname[0m[0;34m([0m[0m__file__[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 384[0;31m     [0mdata[0m[0;34m,[0m [0mtarget[0m[0;34m,[0m [0mtarget_names[0m [0;34m=[0m [0mload_data[0m[0;34m([0m[0mmodule_path[0m[0;34m,[0m [0;34m'iris.csv'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    385[0m     [0miris_csv_filename[0m [0;34m=[0m [0mjoin[0m[0;34m([0m[0mmodule_path[0m[0;34m,[0m [0;34m'data'[0m[0;34m,[0m [0;34m'iris.csv'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    386[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/sklearn/datasets/base.py[0m in [0;36mload_data[0;34m(module_path, data_file_name)[0m
[1;32m    233[0m     [0;32mwith[0m [0mopen[0m[0;34m([0m[0mjoin[0m[0;34m([0m[0mmodule_path[0m[0;34m,[0m [0;34m'data'[0m[0;34m,[0m [0mdata_file_name[0m[0;34m)[0m[0;34m)[0m [0;32mas[0m [0mcsv_file[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    234[0m         [0mdata_file[0m [0;34m=[0m [0mcsv[0m[0;34m.[0m[0mreader[0m[0;34m([0m[0mcsv_file[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 235[0;31m         [0mtemp[0m [0;34m=[0m [0mnext[0m[0;34m([0m[0mdata_file[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    236[0m         [0mn_samples[0m [0;34m=[0m [0mint[0m[0;34m([0m[0mtemp[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    237[0m         [0mn_features[0m [0;34m=[0m [0mint[0m[0;34m([0m[0mtemp[0m[0;34m[[0m[0;36m1[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mError[0m: line contains NULL byte
Error: line contains NULL byte

Executability                            : False
"
1269,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/vertex_coloring.ipynb,"3.6
An error occurred while executing the following cell:
------------------
output.to_excel('planets.xls')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-14-1bfbf04f644e>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0moutput[0m[0;34m.[0m[0mto_excel[0m[0;34m([0m[0;34m'planets.xls'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/core/generic.py[0m in [0;36mto_excel[0;34m(self, excel_writer, sheet_name, na_rep, float_format, columns, header, index, index_label, startrow, startcol, engine, merge_cells, encoding, inf_rep, verbose, freeze_panes)[0m
[1;32m   2125[0m         formatter.write(excel_writer, sheet_name=sheet_name, startrow=startrow,
[1;32m   2126[0m                         [0mstartcol[0m[0;34m=[0m[0mstartcol[0m[0;34m,[0m [0mfreeze_panes[0m[0;34m=[0m[0mfreeze_panes[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2127[0;31m                         engine=engine)
[0m[1;32m   2128[0m [0;34m[0m[0m
[1;32m   2129[0m     def to_json(self, path_or_buf=None, orient=None, date_format=None,

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/formats/excel.py[0m in [0;36mwrite[0;34m(self, writer, sheet_name, startrow, startcol, freeze_panes, engine)[0m
[1;32m    654[0m             [0mneed_save[0m [0;34m=[0m [0;32mFalse[0m[0;34m[0m[0;34m[0m[0m
[1;32m    655[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 656[0;31m             [0mwriter[0m [0;34m=[0m [0mExcelWriter[0m[0;34m([0m[0m_stringify_path[0m[0;34m([0m[0mwriter[0m[0;34m)[0m[0;34m,[0m [0mengine[0m[0;34m=[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    657[0m             [0mneed_save[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    658[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, path, engine, encoding, mode, **engine_kwargs)[0m
[1;32m   1657[0m                  **engine_kwargs):
[1;32m   1658[0m         [0;31m# Use the xlwt module as the Excel writer.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1659[0;31m         [0;32mimport[0m [0mxlwt[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1660[0m         [0mengine_kwargs[0m[0;34m[[0m[0;34m'engine'[0m[0;34m][0m [0;34m=[0m [0mengine[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1661[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'xlwt'
ModuleNotFoundError: No module named 'xlwt'

Executability                            : False
"
1270,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/TransitiveClosure.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import networkx as nx

simple_relation_edges = [(0,1), (1,2), (2,3), (3,4), (3,2), (3,1)]
simple_relation = nx.DiGraph(simple_relation_edges)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-4-54aedff8eeaa>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0msimple_relation_edges[0m [0;34m=[0m [0;34m[[0m[0;34m([0m[0;36m0[0m[0;34m,[0m[0;36m1[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m1[0m[0;34m,[0m[0;36m2[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m2[0m[0;34m,[0m[0;36m3[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m3[0m[0;34m,[0m[0;36m4[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m3[0m[0;34m,[0m[0;36m2[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m3[0m[0;34m,[0m[0;36m1[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0m
[1;32m      4[0m [0msimple_relation[0m [0;34m=[0m [0mnx[0m[0;34m.[0m[0mDiGraph[0m[0;34m([0m[0msimple_relation_edges[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1271,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/Relations-digraphs.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import networkx as nx
import matplotlib.pyplot as plt

# Converting the list of pairs to actual networkX digraphs: 

divides_relation = nx.DiGraph(divides)
next_to_relation = nx.DiGraph(next_to)
leq_relation = nx.DiGraph(less_than_eq)
slt_relation = nx.DiGraph(strict_less_than)

# Put these into a list: 
examples = [divides_relation, next_to_relation, leq_relation, slt_relation]

# Look at the dictionaries: 
for r in examples:
    print(nx.to_dict_of_lists(r))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-5-4a5edb1e0f15>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1273,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/RelationProperties.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import warnings
warnings.filterwarnings('ignore')
import networkx as nx
import matplotlib.pyplot as plt

U = [2,3,4,6,8,9,12]

# Add (x,y) to the edge list if x divides y
poset_edges = [(x,y) for x in U for y in U if y % x == 0]

poset = nx.DiGraph(poset_edges)
nx.draw(poset, with_labels=True)
plt.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-1e2e068dea0f>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      4[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1274,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/The Jupyter Notebook environment.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import warnings
warnings.filterwarnings('ignore')
import networkx as nx
import matplotlib.pyplot as plt

t = nx.random_powerlaw_tree(8)

nx.draw(t)
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-89c5cc62b740>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      4[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1275,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/Jupyter-tutorial.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import warnings
warnings.filterwarnings('ignore')

import networkx as nx
import matplotlib.pyplot as plt

chapsnat_edges = [('Ronald', 'Scott'), ('Ronald', 'Trish'), ('Scott', 'Uriah'), ('Scott', 'Trish'), 
                  ('Uriah', 'Ronald'), ('Uriah', 'Scott'), ('Uriah', 'Trish'), ('Uriah', 'Victoria'), 
                  ('Victoria', 'Uriah'), ('Victoria', 'Scott')]

chapsnat = nx.DiGraph(chapsnat_edges)
nx.draw_circular(chapsnat, with_labels = True, node_size = 2500)
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-c782e3c3110d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      8[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1276,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/Compositions.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# The usual boilerplate to load the libraries and silence system warnings:

import warnings
warnings.filterwarnings('ignore')

import networkx as nx
import matplotlib.pyplot as plt
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-bd6153ea6b7f>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1277,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/ProofByContrapositive.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import warnings
warnings.filterwarnings('ignore')

import networkx as nx
import matplotlib.pyplot as plt
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-24d4de5ce57f>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1283,/mnt/fit-Knowledgezoo/jupyternotebooks/RobertTalbert@discretecs/archive/lessons/lesson4.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# For MTH 325 students: Using Python to visualize graphs...

# Jupyter has access to the huge collection of Python libraries that are available: 
import networkx as nx
import matplotlib.pyplot as plt

# Let's plot the complete graph on 20 vertices: 
k20 = nx.complete_graph(20)  
nx.draw(k20, pos = nx.circular_layout(k20), edge_color=""red"", 
        node_color=""cyan"", with_labels = True)
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-774d738aa457>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0;34m[0m[0m
[1;32m      3[0m [0;31m# Jupyter has access to the huge collection of Python libraries that are available:[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mimport[0m [0mnetworkx[0m [0;32mas[0m [0mnx[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'networkx'
ImportError: No module named 'networkx'

Executability                            : False
"
1311,/mnt/fit-Knowledgezoo/jupyternotebooks/Mashimo@datascience/01-Regression/LogisticRegression.ipynb,"3.6
An error occurred while executing the following cell:
------------------
# import the IPython widgets
from ipywidgets.widgets import interact
from ipywidgets import widgets            # Widget definitions
from IPython.display import display       # Used to display widgets in the notebook
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-3-89c23fcf0b7e>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m# import the IPython widgets[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mfrom[0m [0mipywidgets[0m[0;34m.[0m[0mwidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0mwidgets[0m            [0;31m# Widget definitions[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m       [0;31m# Used to display widgets in the notebook[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'ipywidgets'
ModuleNotFoundError: No module named 'ipywidgets'

Executability                            : False
"
1319,/mnt/fit-Knowledgezoo/jupyternotebooks/bshurick@ischool/ML at Scale/DivideAndConquer2-python-brandon_shurick.ipynb,"3.5
An error occurred while executing the following cell:
------------------
data = pd.read_csv(""datasets/ex2data1.txt"", header=None, 
                   names=['Exam1', 'Exam2', 'Admitted'])  
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m<ipython-input-2-3bf91d422645>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m data = pd.read_csv(""datasets/ex2data1.txt"", header=None, 
[0;32m----> 2[0;31m                    names=['Exam1', 'Exam2', 'Admitted'])  
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36mparser_f[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, escapechar, comment, encoding, dialect, tupleize_cols, error_bad_lines, warn_bad_lines, skipfooter, doublequote, delim_whitespace, low_memory, memory_map, float_precision)[0m
[1;32m    676[0m                     skip_blank_lines=skip_blank_lines)
[1;32m    677[0m [0;34m[0m[0m
[0;32m--> 678[0;31m         [0;32mreturn[0m [0m_read[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m,[0m [0mkwds[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    679[0m [0;34m[0m[0m
[1;32m    680[0m     [0mparser_f[0m[0;34m.[0m[0m__name__[0m [0;34m=[0m [0mname[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    438[0m [0;34m[0m[0m
[1;32m    439[0m     [0;31m# Create the parser.[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 440[0;31m     [0mparser[0m [0;34m=[0m [0mTextFileReader[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    441[0m [0;34m[0m[0m
[1;32m    442[0m     [0;32mif[0m [0mchunksize[0m [0;32mor[0m [0miterator[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36m__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m    785[0m             [0mself[0m[0;34m.[0m[0moptions[0m[0;34m[[0m[0;34m'has_index_names'[0m[0;34m][0m [0;34m=[0m [0mkwds[0m[0;34m[[0m[0;34m'has_index_names'[0m[0;34m][0m[0;34m[0m[0m
[1;32m    786[0m [0;34m[0m[0m
[0;32m--> 787[0;31m         [0mself[0m[0;34m.[0m[0m_make_engine[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    788[0m [0;34m[0m[0m
[1;32m    789[0m     [0;32mdef[0m [0mclose[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36m_make_engine[0;34m(self, engine)[0m
[1;32m   1012[0m     [0;32mdef[0m [0m_make_engine[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mengine[0m[0;34m=[0m[0;34m'c'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1013[0m         [0;32mif[0m [0mengine[0m [0;34m==[0m [0;34m'c'[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 1014[0;31m             [0mself[0m[0;34m.[0m[0m_engine[0m [0;34m=[0m [0mCParserWrapper[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mf[0m[0;34m,[0m [0;34m**[0m[0mself[0m[0;34m.[0m[0moptions[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1015[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1016[0m             [0;32mif[0m [0mengine[0m [0;34m==[0m [0;34m'python'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/parsers.py[0m in [0;36m__init__[0;34m(self, src, **kwds)[0m
[1;32m   1706[0m         [0mkwds[0m[0;34m[[0m[0;34m'usecols'[0m[0;34m][0m [0;34m=[0m [0mself[0m[0;34m.[0m[0musecols[0m[0;34m[0m[0m
[1;32m   1707[0m [0;34m[0m[0m
[0;32m-> 1708[0;31m         [0mself[0m[0;34m.[0m[0m_reader[0m [0;34m=[0m [0mparsers[0m[0;34m.[0m[0mTextReader[0m[0;34m([0m[0msrc[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1709[0m [0;34m[0m[0m
[1;32m   1710[0m         [0mpassed_names[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mnames[0m [0;32mis[0m [0;32mNone[0m[0;34m[0m[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.TextReader.__cinit__[0;34m()[0m

[0;32mpandas/_libs/parsers.pyx[0m in [0;36mpandas._libs.parsers.TextReader._setup_parser_source[0;34m()[0m

[0;31mFileNotFoundError[0m: File b'datasets/ex2data1.txt' does not exist
FileNotFoundError: File b'datasets/ex2data1.txt' does not exist

Executability                            : False
"
1367,/mnt/fit-Knowledgezoo/jupyternotebooks/felixfan@scripts/python/ipynb/useful-tips.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# Author: Ron Weiss <ronweiss@gmail.com>, Gael Varoquaux
# License: BSD 3 clause

# $Id$

import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import pandas as pd

from IPython.display import display

from pylab import rcParams
rcParams['figure.figsize'] = 16,12
plt.style.use('ggplot')

%matplotlib inline

from sklearn import datasets
from sklearn.cross_validation import StratifiedKFold
from sklearn.externals.six.moves import xrange
from sklearn.mixture import GMM


def make_ellipses(gmm, ax):
    for n, color in enumerate('rgb'):
        v, w = np.linalg.eigh(gmm._get_covars()[n][:2, :2])
        u = w[0] / np.linalg.norm(w[0])
        angle = np.arctan2(u[1], u[0])
        angle = 180 * angle / np.pi  # convert to degrees
        v *= 9
        ell = mpl.patches.Ellipse(gmm.means_[n, :2], v[0], v[1],
                                  180 + angle, color=color)
        ell.set_clip_box(ax.bbox)
        ell.set_alpha(0.5)
        ax.add_artist(ell)

iris = datasets.load_iris()

# Break up the dataset into non-overlapping training (75%) and testing
# (25%) sets.
skf = StratifiedKFold(iris.target, n_folds=4)
# Only take the first fold.
train_index, test_index = next(iter(skf))


X_train = iris.data[train_index]
y_train = iris.target[train_index]
X_test = iris.data[test_index]
y_test = iris.target[test_index]

n_classes = len(np.unique(y_train))

# Try GMMs using different types of covariances.
classifiers = {
    covar_type: GMM(n_components    = n_classes,
                    covariance_type = covar_type, 
                    init_params     = 'wc',
                    n_iter          = 20)
    for covar_type in ['spherical', 'diag', 'tied', 'full']
}

n_classifiers = len(classifiers)

plt.figure(figsize=(6 * n_classifiers / 2, 12))
plt.subplots_adjust(bottom=.01, top=0.95, hspace=.15, wspace=.05,
                    left=.01, right=.99)


for index, (name, classifier) in enumerate(classifiers.items()):
    # Since we have class labels for the training data, we can
    # initialize the GMM parameters in a supervised manner.
    classifier.means_ = np.array([X_train[y_train == i].mean(axis=0)
                                  for i in xrange(n_classes)])

    # Train the other parameters using the EM algorithm.
    classifier.fit(X_train)

    h = plt.subplot(2, n_classifiers / 2, index + 1)
    make_ellipses(classifier, h)

    for n, color in enumerate('rgb'):
        data = iris.data[iris.target == n]
        plt.scatter(data[:, 0], data[:, 1], 0.8, color=color,
                    label=iris.target_names[n])
    # Plot the test data with crosses
    for n, color in enumerate('rgb'):
        data = X_test[y_test == n]
        plt.plot(data[:, 0], data[:, 1], 'x', color=color)

    y_train_pred = classifier.predict(X_train)
    train_accuracy = np.mean(y_train_pred.ravel() == y_train.ravel()) * 100
    plt.text(0.05, 0.9, 'Train accuracy: %.1f' % train_accuracy,
             transform=h.transAxes)

    y_test_pred = classifier.predict(X_test)
    test_accuracy = np.mean(y_test_pred.ravel() == y_test.ravel()) * 100
    plt.text(0.05, 0.8, 'Test accuracy: %.1f' % test_accuracy,
             transform=h.transAxes)

    plt.xticks(())
    plt.yticks(())
    plt.title(name)

plt.legend(loc='lower right', prop=dict(size=12))


plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-1fb473ea2d7f>[0m in [0;36m<module>[0;34m()[0m
[1;32m     20[0m [0;34m[0m[0m
[1;32m     21[0m [0;32mfrom[0m [0msklearn[0m [0;32mimport[0m [0mdatasets[0m[0;34m[0m[0m
[0;32m---> 22[0;31m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mimport[0m [0mStratifiedKFold[0m[0;34m[0m[0m
[0m[1;32m     23[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mexternals[0m[0;34m.[0m[0msix[0m[0;34m.[0m[0mmoves[0m [0;32mimport[0m [0mxrange[0m[0;34m[0m[0m
[1;32m     24[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mmixture[0m [0;32mimport[0m [0mGMM[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
1401,/mnt/fit-Knowledgezoo/jupyternotebooks/enalisnick@blog_sandbox/Decision_Boundaries_from_Priors.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import re, urllib.parse, os

# find all the links to the zip files on this index page
zyears = [urllib.parse.urljoin(iurl, z)  for z in re.findall('<a href=""([^""]*?\.zip)""', str(ipage))]

dirname = ""table7zips""
if not os.path.exists(dirname):
    os.mkdir(dirname)

    
zyears    

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-8205c8608baf>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0mdirname[0m [0;34m=[0m [0;34m""table7zips""[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mdirname[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m----> 8[0;31m     [0mos[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mdirname[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'table7zips'
PermissionError: [Errno 13] Permission denied: 'table7zips'

Executability                            : False
"
1402,/mnt/fit-Knowledgezoo/jupyternotebooks/enalisnick@blog_sandbox/Tree-Based_Priors.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import re, urllib.parse, os

# find all the links to the zip files on this index page
zyears = [urllib.parse.urljoin(iurl, z)  for z in re.findall('<a href=""([^""]*?\.zip)""', str(ipage))]

dirname = ""tablep1zips""
if not os.path.exists(dirname):
    os.mkdir(dirname)

    
zyears    

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-3a58200a9b34>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0mdirname[0m [0;34m=[0m [0;34m""tablep1zips""[0m[0;34m[0m[0m
[1;32m      7[0m [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mdirname[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m----> 8[0;31m     [0mos[0m[0;34m.[0m[0mmkdir[0m[0;34m([0m[0mdirname[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;34m[0m[0m
[1;32m     10[0m [0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'tablep1zips'
PermissionError: [Errno 13] Permission denied: 'tablep1zips'

Executability                            : False
"
1458,/mnt/fit-Knowledgezoo/jupyternotebooks/jingzbu@TAHTMA/test/comparison_study_empirical_error_N_8.ipynb,"3.6
An error occurred while executing the following cell:
------------------
## method 1 binary search by taking advantage of sorted array
## nlog(m) complexity

import bisect
def found(xs, x):
    i = bisect.bisect_left(xs, x)
    return i < len(xs) and xs[i] == x

def sum_pairs(xs1, xs2, k):
    result = set()
    for x1 in xs1:
        x2 = k - x1
        if found(xs2, x2):
            result.add((x1, x2))
    return result
        

assert sum_pairs(xs1, xs2, k) == {(5, 5), (7, 3)}
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAssertionError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-6-0b07917b13b0>[0m in [0;36m<module>[0;34m[0m
[1;32m     16[0m [0;34m[0m[0m
[1;32m     17[0m [0;34m[0m[0m
[0;32m---> 18[0;31m [0;32massert[0m [0msum_pairs[0m[0;34m([0m[0mxs1[0m[0;34m,[0m [0mxs2[0m[0;34m,[0m [0mk[0m[0;34m)[0m [0;34m==[0m [0;34m{[0m[0;34m([0m[0;36m5[0m[0;34m,[0m [0;36m5[0m[0;34m)[0m[0;34m,[0m [0;34m([0m[0;36m7[0m[0;34m,[0m [0;36m3[0m[0;34m)[0m[0;34m}[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mAssertionError[0m: 
AssertionError: 

Executability                            : False
"
1493,/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/12-JupyterLab.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images.css
from IPython.display import display, Image, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-2d501dd8385d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images.css'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mImage[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1494,/mnt/fit-Knowledgezoo/jupyternotebooks/ngrislain@experiments/Kernel trick.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images.css
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-37a5a107e98d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images.css'[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1495,/mnt/fit-Knowledgezoo/jupyternotebooks/maxthemouse@myhpsc/lectures/lecture6/Lecture6.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images.css
from IPython.display import display, Image, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-2d501dd8385d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images.css'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mImage[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1496,/mnt/fit-Knowledgezoo/jupyternotebooks/maxthemouse@myhpsc/homework/homework4/quadrature.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images-pad.css
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f77202fc09f0>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images-pad.css'[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1497,/mnt/fit-Knowledgezoo/jupyternotebooks/maxthemouse@myhpsc/homework/homework5/notebook/quadrature2.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images.css
from IPython.display import display, Image, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-2d501dd8385d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images.css'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mImage[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1498,/mnt/fit-Knowledgezoo/jupyternotebooks/nikitamath@ipythonnotebook/anya_task2_rp.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images.css
from IPython.display import display, Image, HTML
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-2d501dd8385d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images.css'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mImage[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1500,/mnt/fit-Knowledgezoo/jupyternotebooks/dkmehrmann@Practice/elo_538.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images-pad.css
from IPython.display import Image
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-1c2f7dba60ec>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images-pad.css'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mImage[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1501,/mnt/fit-Knowledgezoo/jupyternotebooks/dkmehrmann@Practice/rmagic.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%load_ext load_style
%load_style images.css
from IPython.display import display, Image
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-9c4e42beffb0>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_ext'[0m[0;34m,[0m [0;34m'load_style'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'load_style'[0m[0;34m,[0m [0;34m'images.css'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mImage[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-65>[0m in [0;36mload_ext[0;34m(self, module_str)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/extension.py[0m in [0;36mload_ext[0;34m(self, module_str)[0m
[1;32m     31[0m         [0;32mif[0m [0;32mnot[0m [0mmodule_str[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     32[0m             [0;32mraise[0m [0mUsageError[0m[0;34m([0m[0;34m'Missing module name.'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 33[0;31m         [0mres[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0mshell[0m[0;34m.[0m[0mextension_manager[0m[0;34m.[0m[0mload_extension[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     34[0m [0;34m[0m[0m
[1;32m     35[0m         [0;32mif[0m [0mres[0m [0;34m==[0m [0;34m'already loaded'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/extensions.py[0m in [0;36mload_extension[0;34m(self, module_str)[0m
[1;32m     83[0m             [0;32mif[0m [0mmodule_str[0m [0;32mnot[0m [0;32min[0m [0msys[0m[0;34m.[0m[0mmodules[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     84[0m                 [0;32mwith[0m [0mprepended_to_syspath[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 85[0;31m                     [0mmod[0m [0;34m=[0m [0mimport_module[0m[0;34m([0m[0mmodule_str[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     86[0m                     [0;32mif[0m [0mmod[0m[0;34m.[0m[0m__file__[0m[0;34m.[0m[0mstartswith[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mipython_extension_dir[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     87[0m                         print((""Loading extensions from {dir} is deprecated. ""

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/__init__.py[0m in [0;36mimport_module[0;34m(name, package)[0m
[1;32m    124[0m                 [0;32mbreak[0m[0;34m[0m[0m
[1;32m    125[0m             [0mlevel[0m [0;34m+=[0m [0;36m1[0m[0;34m[0m[0m
[0;32m--> 126[0;31m     [0;32mreturn[0m [0m_bootstrap[0m[0;34m.[0m[0m_gcd_import[0m[0;34m([0m[0mname[0m[0;34m[[0m[0mlevel[0m[0;34m:[0m[0;34m][0m[0;34m,[0m [0mpackage[0m[0;34m,[0m [0mlevel[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    127[0m [0;34m[0m[0m
[1;32m    128[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_gcd_import[0;34m(name, package, level)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_find_and_load_unlocked[0;34m(name, import_)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_load_unlocked[0;34m(spec)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap_external.py[0m in [0;36mexec_module[0;34m(self, module)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/importlib/_bootstrap.py[0m in [0;36m_call_with_frames_removed[0;34m(f, *args, **kwds)[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/ellisonbg@jupyter-talks/load_style.py[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mdisplay[0m[0;34m,[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;32mdef[0m [0mload_style[0m[0;34m([0m[0ms[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      5[0m     """"""Load a CSS stylesheet in the notebook by URL or filename.

[0;31mImportError[0m: No module named 'requests'
ImportError: No module named 'requests'

Executability                            : False
"
1514,/mnt/fit-Knowledgezoo/jupyternotebooks/xthomas@dataviz/ServiceSurvey/CensusRevenueTax.ipynb,"3.6
An error occurred while executing the following cell:
------------------
df16.to_csv('./data/agencies_hr_2016.csv')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-6-886e4f86851c>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0mdf16[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m'./data/agencies_hr_2016.csv'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/core/generic.py[0m in [0;36mto_csv[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)[0m
[1;32m   3018[0m                                  [0mdoublequote[0m[0;34m=[0m[0mdoublequote[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3019[0m                                  escapechar=escapechar, decimal=decimal)
[0;32m-> 3020[0;31m         [0mformatter[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3021[0m [0;34m[0m[0m
[1;32m   3022[0m         [0;32mif[0m [0mpath_or_buf[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/formats/csvs.py[0m in [0;36msave[0;34m(self)[0m
[1;32m    155[0m             f, handles = _get_handle(self.path_or_buf, self.mode,
[1;32m    156[0m                                      [0mencoding[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 157[0;31m                                      compression=self.compression)
[0m[1;32m    158[0m             [0mclose[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    159[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/common.py[0m in [0;36m_get_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)[0m
[1;32m    422[0m         [0;32melif[0m [0mencoding[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    423[0m             [0;31m# Python 3 and encoding[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 424[0;31m             [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m [0mnewline[0m[0;34m=[0m[0;34m""""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    425[0m         [0;32melif[0m [0mis_text[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    426[0m             [0;31m# Python 3 and no explicit encoding[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: './data/agencies_hr_2016.csv'
PermissionError: [Errno 13] Permission denied: './data/agencies_hr_2016.csv'

Executability                            : False
"
1515,/mnt/fit-Knowledgezoo/jupyternotebooks/xthomas@dataviz/ServiceSurvey/LookAtExcel.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from lxml import html
import csv, os, json
import requests
# from exceptions import ValueError
from time import sleep
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-e5a549f9c583>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mlxml[0m [0;32mimport[0m [0mhtml[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mcsv[0m[0;34m,[0m [0mos[0m[0;34m,[0m [0mjson[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mrequests[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'lxml'
ModuleNotFoundError: No module named 'lxml'

Executability                            : False
"
1517,/mnt/fit-Knowledgezoo/jupyternotebooks/xthomas@dataviz/angelList/WEST_Matching.ipynb,"3.5
An error occurred while executing the following cell:
------------------
sixteenfile = open('data/2016-EX-AWARDS_deduplicated.txt', 'w')
for item in sixteen:
  sixteenfile.write(item +'\n')
sixteenfile.close()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-5-b4bbf4a142f5>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0msixteenfile[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0;34m'data/2016-EX-AWARDS_deduplicated.txt'[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfor[0m [0mitem[0m [0;32min[0m [0msixteen[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      3[0m   [0msixteenfile[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mitem[0m [0;34m+[0m[0;34m'\n'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0msixteenfile[0m[0;34m.[0m[0mclose[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'data/2016-EX-AWARDS_deduplicated.txt'
PermissionError: [Errno 13] Permission denied: 'data/2016-EX-AWARDS_deduplicated.txt'

Executability                            : False
"
1518,/mnt/fit-Knowledgezoo/jupyternotebooks/xthomas@dataviz/AgencyRevenueCuts/filtering.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import plotly.tools
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff
import pandas as pd
plotly.tools.set_credentials_file(username='rapp.cxs', api_key='55rlfaf8bj')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-04c697cc56dc>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mplotly[0m[0;34m.[0m[0mtools[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mplotly[0m[0;34m.[0m[0mplotly[0m [0;32mas[0m [0mpy[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mplotly[0m[0;34m.[0m[0mgraph_objs[0m [0;32mas[0m [0mgo[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'plotly'
ImportError: No module named 'plotly'

Executability                            : False
"
1520,/mnt/fit-Knowledgezoo/jupyternotebooks/cthoyt@notebooks/Church Encodings.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import plotly.plotly as py
import plotly.graph_objs as go
import plotly.figure_factory as ff
import pandas as pd
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-5d8a93c7fba7>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mplotly[0m[0;34m.[0m[0mplotly[0m [0;32mas[0m [0mpy[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mimport[0m [0mplotly[0m[0;34m.[0m[0mgraph_objs[0m [0;32mas[0m [0mgo[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mplotly[0m[0;34m.[0m[0mfigure_factory[0m [0;32mas[0m [0mff[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'plotly'
ImportError: No module named 'plotly'

Executability                            : False
"
1523,/mnt/fit-Knowledgezoo/jupyternotebooks/cthoyt@notebooks/bit/pl2/Pl2Assignment6.ipynb,"3.6
An error occurred while executing the following cell:
------------------
# Import the excel file and call it xls_file
xls_file = pd.ExcelFile('./data/Table01—Estimated Revenue 2007 through 2015.xls')
xls_file
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, filepath_or_buffer)[0m
[1;32m    390[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 391[0;31m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    392[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'xlrd'

During handling of the above exception, another exception occurred:

[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-82a9024cbd73>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m# Import the excel file and call it xls_file[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mxls_file[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mExcelFile[0m[0;34m([0m[0;34m'./data/Table01—Estimated Revenue 2007 through 2015.xls'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0mxls_file[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, engine)[0m
[1;32m    651[0m         [0mself[0m[0;34m.[0m[0m_io[0m [0;34m=[0m [0m_stringify_path[0m[0;34m([0m[0mio[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    652[0m [0;34m[0m[0m
[0;32m--> 653[0;31m         [0mself[0m[0;34m.[0m[0m_reader[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_engines[0m[0;34m[[0m[0mengine[0m[0;34m][0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_io[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    654[0m [0;34m[0m[0m
[1;32m    655[0m     [0;32mdef[0m [0m__fspath__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, filepath_or_buffer)[0m
[1;32m    391[0m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0;34m[0m[0m
[1;32m    392[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 393[0;31m             [0;32mraise[0m [0mImportError[0m[0;34m([0m[0merr_msg[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    394[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    395[0m             [0;32mif[0m [0mxlrd[0m[0;34m.[0m[0m__VERSION__[0m [0;34m<[0m [0mLooseVersion[0m[0;34m([0m[0;34m""1.0.0""[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: Install xlrd >= 1.0.0 for Excel support
ImportError: Install xlrd >= 1.0.0 for Excel support

Executability                            : False
"
1549,/mnt/fit-Knowledgezoo/jupyternotebooks/calebjordan@Data-Analysis/JPM Experiments/Transmon Frequency Fit.ipynb,"3.6
An error occurred while executing the following cell:
------------------
#from pandas.util.testing import assert_frame_equal
#assert_frame_equal(df_norm, df_norm_v2)

def compare_normalization_approaches(df_norm_v1, df_norm_v2):
    """"""Replacing all values that are smaller then particular epsilon (my own choice) 
       with zeros and counting total amount of zeros in each collumn.
    """"""
    EPSILON = 0.000000000000001
    comparison_array = df_norm_v1.values - df_norm_v2.values
    comparison_array[comparison_array < EPSILON] = 0
    print ('Total number of zeros in earch row (in each should be 768)')
    print ((comparison_array == 0).astype(int).sum(axis=0))
    
compare_normalization_approaches(df_norm_v1, df_norm_v2)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-8-120306c63f6d>[0m in [0;36m<module>[0;34m[0m
[1;32m     12[0m     [0mprint[0m [0;34m([0m[0;34m([0m[0mcomparison_array[0m [0;34m==[0m [0;36m0[0m[0;34m)[0m[0;34m.[0m[0mastype[0m[0;34m([0m[0mint[0m[0;34m)[0m[0;34m.[0m[0msum[0m[0;34m([0m[0maxis[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     13[0m [0;34m[0m[0m
[0;32m---> 14[0;31m [0mcompare_normalization_approaches[0m[0;34m([0m[0mdf_norm_v1[0m[0;34m,[0m [0mdf_norm_v2[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mNameError[0m: name 'df_norm_v1' is not defined
NameError: name 'df_norm_v1' is not defined

Executability                            : False
"
1585,/mnt/fit-Knowledgezoo/jupyternotebooks/doku@ipython_notebooks/sketch_book/Assignment3_python2.ipynb,"3.6
An error occurred while executing the following cell:
------------------
from bokeh.plotting import figure, output_notebook, show
from bokeh.layouts import column
from bokeh.palettes import RdYlGn4
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-9-1bbc294dd2a6>[0m in [0;36m<module>[0;34m[0m
[0;32m----> 1[0;31m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mplotting[0m [0;32mimport[0m [0mfigure[0m[0;34m,[0m [0moutput_notebook[0m[0;34m,[0m [0mshow[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mlayouts[0m [0;32mimport[0m [0mcolumn[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mpalettes[0m [0;32mimport[0m [0mRdYlGn4[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'bokeh'
ModuleNotFoundError: No module named 'bokeh'

Executability                            : False
"
1587,/mnt/fit-Knowledgezoo/jupyternotebooks/doku@ipython_notebooks/sketch_book/Magic_squares.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
#importing all required modules
#important otherwise pop-up window may not work
%matplotlib inline 
import numpy as np
import scipy as sp
import matplotlib as mpl
import matplotlib.pyplot as plt
from math import *
import seaborn

from ipywidgets import interact

#bokeh
from bokeh.plotting import figure, output_file, output_notebook, show
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-61f97583b18c>[0m in [0;36m<module>[0;34m()[0m
[1;32m     11[0m [0;32mimport[0m [0mseaborn[0m[0;34m[0m[0m
[1;32m     12[0m [0;34m[0m[0m
[0;32m---> 13[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m[0m[0m
[0m[1;32m     14[0m [0;34m[0m[0m
[1;32m     15[0m [0;31m#bokeh[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
1588,/mnt/fit-Knowledgezoo/jupyternotebooks/doku@ipython_notebooks/sketch_book/Assignment9.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
#importing all required modules
#important otherwise pop-up window may not work
%matplotlib inline 
import numpy as np
import scipy as sp
from scipy.integrate import odeint, ode, romb, cumtrapz
import matplotlib as mpl
import matplotlib.pyplot as plt
from math import *
import seaborn
from IPython.display import Image

#bokeh
from bokeh.plotting import figure, output_file, output_notebook, show
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-16cf5062471c>[0m in [0;36m<module>[0;34m[0m
[1;32m     14[0m [0;34m[0m[0m
[1;32m     15[0m [0;31m#bokeh[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 16[0;31m [0;32mfrom[0m [0mbokeh[0m[0;34m.[0m[0mplotting[0m [0;32mimport[0m [0mfigure[0m[0;34m,[0m [0moutput_file[0m[0;34m,[0m [0moutput_notebook[0m[0;34m,[0m [0mshow[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;31mModuleNotFoundError[0m: No module named 'bokeh'
ModuleNotFoundError: No module named 'bokeh'

Executability                            : False
"
1599,/mnt/fit-Knowledgezoo/jupyternotebooks/yw5aj@ipynb/winpythondocs/seaborn_demo_from_jakevdp.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%pylab inline

from ipywidgets import interact, FloatSlider
import math
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-a00a96872b58>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'pylab'[0m[0;34m,[0m [0;34m'inline'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0minteract[0m[0;34m,[0m [0mFloatSlider[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mimport[0m [0mmath[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
1645,/mnt/fit-Knowledgezoo/jupyternotebooks/chrisalbon@notes_on_data_science_machine_learning_and_artificial_intelligence/content/python/pandas_create_column_with_loop.ipynb,"3.5
An error occurred while executing the following cell:
------------------
df.to_csv('pandas_dataframe_importing_csv/example.csv')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-c319376967c2>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mdf[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m'pandas_dataframe_importing_csv/example.csv'[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/core/frame.py[0m in [0;36mto_csv[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)[0m
[1;32m   1743[0m                                  [0mdoublequote[0m[0;34m=[0m[0mdoublequote[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1744[0m                                  escapechar=escapechar, decimal=decimal)
[0;32m-> 1745[0;31m         [0mformatter[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1746[0m [0;34m[0m[0m
[1;32m   1747[0m         [0;32mif[0m [0mpath_or_buf[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/formats/csvs.py[0m in [0;36msave[0;34m(self)[0m
[1;32m    154[0m             f, handles = _get_handle(self.path_or_buf, self.mode,
[1;32m    155[0m                                      [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0m
[0;32m--> 156[0;31m                                      compression=self.compression)
[0m[1;32m    157[0m             [0mclose[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    158[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/common.py[0m in [0;36m_get_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)[0m
[1;32m    398[0m         [0;32melif[0m [0mencoding[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    399[0m             [0;31m# Python 3 and encoding[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 400[0;31m             [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    401[0m         [0;32melif[0m [0mis_text[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    402[0m             [0;31m# Python 3 and no explicit encoding[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'pandas_dataframe_importing_csv/example.csv'
PermissionError: [Errno 13] Permission denied: 'pandas_dataframe_importing_csv/example.csv'

Executability                            : False
"
1737,/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/3-activation-function.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import matplotlib.pylab as plt
import mnist

fig, subplots = plt.subplots(2, 5)

# MNIST 데이터셋 로드
MNIST = mnist.load(one_hot_label=False)
images = MNIST['train_img']
sample = images[np.random.choice(images.shape[0], subplots.size)]

for i, subplot in enumerate(subplots.flatten()):
    subplot.imshow(sample[i].reshape(28, -1))
plt.show()
plt.close(fig)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-1-5f79876215f5>[0m in [0;36m<module>[0;34m[0m
[1;32m      8[0m [0;34m[0m[0m
[1;32m      9[0m [0;31m# MNIST 데이터셋 로드[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 10[0;31m [0mMNIST[0m [0;34m=[0m [0mmnist[0m[0;34m.[0m[0mload[0m[0;34m([0m[0mone_hot_label[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     11[0m [0mimages[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_img'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     12[0m [0msample[0m [0;34m=[0m [0mimages[0m[0;34m[[0m[0mnp[0m[0;34m.[0m[0mrandom[0m[0;34m.[0m[0mchoice[0m[0;34m([0m[0mimages[0m[0;34m.[0m[0mshape[0m[0;34m[[0m[0;36m0[0m[0;34m][0m[0;34m,[0m [0msubplots[0m[0;34m.[0m[0msize[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mload[0;34m(normalize, flatten, one_hot_label)[0m
[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m     [0;31m# MNIST 데이터를 로드한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 86[0;31m     [0mdataset[0m [0;34m=[0m [0mdownload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     87[0m [0;34m[0m[0m
[1;32m     88[0m     [0;31m# [0.0, 1.0] 구간 안에 들어가도록 이미지를 정규화한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mdownload[0;34m()[0m
[1;32m     39[0m         [0;31m# 이미 다운받은 파일일경우 생략한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m         [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mpath[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 41[0;31m             [0mrequest[0m[0;34m.[0m[0murlretrieve[0m[0;34m([0m[0mURL_BASE[0m [0;34m+[0m [0mfile_name[0m[0;34m,[0m [0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     42[0m [0;34m[0m[0m
[1;32m     43[0m     [0;32mdef[0m [0mload[0m[0;34m([0m[0mcallback[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    256[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 258[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    260[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'
PermissionError: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'

Executability                            : False
"
1739,/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/4-learning.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import signal
import sys
import mnist
from common import sigmoid, gradient_sigmoid, softmax, cross_entropy_error_batch

#
# Hyper parameters
#
# 히든레이어 뉴런 수 (ex: 50, 100)
HIDDEN_LAYER_SIZE = 100
# 정규분포 난수로 생성될 초기 가중치의 표준편차
WEIGHT_INIT_STD = 0.01
# 경사하강법을 몇번 적용할지
ITERATION_COUNT = 10000
# 학습에 사용할 미니배치의 크기
BATCH_SIZE = 100
# 학습률
LEARNING_RATE = 0.1
# 에퍼크, 학습 진척도를 얼마나 자주 표시할지 (ex: 100, 300)
UPDATE_PER_EPOCH = 300

#
# Utility functions
#
def make_predict(input):
    def predict(w0, b0, w1, b1):
        a0 = input @ w0 + b0
        z0 = sigmoid(a0)
        a1 = z0 @ w1 + b1
        z1 = softmax(a1)
        return [a0, z0, a1, z1]
    return predict

def accuracy(expected, actual):
    return (expected.argmax(axis=-1) == actual.argmax(axis=-1)).mean()

#
# Main logic
#
MNIST = mnist.load()
TRAIN_IMG = MNIST['train_img']
TRAIN_LABEL = MNIST['train_label']

layer0_size = TRAIN_IMG.shape[-1]
layer1_size = HIDDEN_LAYER_SIZE
layer2_size = TRAIN_LABEL.shape[-1]

# Randomly initialize the parameters
parameters = [
    # w0
    WEIGHT_INIT_STD * np.random.randn(layer0_size, layer1_size), 
    # b0
    np.zeros(layer1_size),
    # w1
    WEIGHT_INIT_STD * np.random.randn(layer1_size, layer2_size),
    # b1
    np.zeros(layer2_size),
]

print('''학습 시작!

반복횟수\t정확도\tLoss
-------------------------------------------''')
for iteration in range(ITERATION_COUNT):
    # Sample a batch from the train image/label set
    sample = np.random.choice(TRAIN_IMG.shape[0], BATCH_SIZE)
    BATCH_IMG = TRAIN_IMG[sample]
    BATCH_LABEL = TRAIN_LABEL[sample]

    predict = make_predict(BATCH_IMG)

    # Try the result
    if iteration % UPDATE_PER_EPOCH == 0:
        expected = predict(*parameters)[-1]
        percentage = accuracy(expected, BATCH_LABEL)*100
        loss = cross_entropy_error_batch(expected, BATCH_LABEL)
        print(f'{iteration:8}\t{percentage:.04}%\t{loss}')

    # Calculate gradient
    def grad(parameters):
        w1 = parameters[2]
        a0, z0, _, expected = predict(*parameters)

        # Backward propagation
        dz1 = (expected - BATCH_LABEL)/BATCH_SIZE
        dw1 = z0.T @ dz1
        db1 = dz1.sum(axis=0)

        dz0 = gradient_sigmoid(a0) * (dz1 @ w1.T)
        dw0 = BATCH_IMG.T @ dz0
        db0 = dz0.sum(axis=0)
        return [dw0, db0, dw1, db1]

    # Update parameters using gradient descent method
    gradient = grad(parameters)
    for param, grad in zip(parameters, gradient):
        param -= LEARNING_RATE * grad

expected = make_predict(MNIST['test_img'])(*parameters)[-1]
TEST_LABEL = MNIST['test_label']
percentage = accuracy(expected, TEST_LABEL)*100

print(f'''
학습 완료!

최종 점수
-------------
정확도 : {percentage}%
''')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-1-bfbd9bee1bc0>[0m in [0;36m<module>[0;34m[0m
[1;32m     41[0m [0;31m# Main logic[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     42[0m [0;31m#[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 43[0;31m [0mMNIST[0m [0;34m=[0m [0mmnist[0m[0;34m.[0m[0mload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     44[0m [0mTRAIN_IMG[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_img'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     45[0m [0mTRAIN_LABEL[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_label'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mload[0;34m(normalize, flatten, one_hot_label)[0m
[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m     [0;31m# MNIST 데이터를 로드한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 86[0;31m     [0mdataset[0m [0;34m=[0m [0mdownload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     87[0m [0;34m[0m[0m
[1;32m     88[0m     [0;31m# [0.0, 1.0] 구간 안에 들어가도록 이미지를 정규화한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mdownload[0;34m()[0m
[1;32m     39[0m         [0;31m# 이미 다운받은 파일일경우 생략한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m         [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mpath[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 41[0;31m             [0mrequest[0m[0;34m.[0m[0murlretrieve[0m[0;34m([0m[0mURL_BASE[0m [0;34m+[0m [0mfile_name[0m[0;34m,[0m [0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     42[0m [0;34m[0m[0m
[1;32m     43[0m     [0;32mdef[0m [0mload[0m[0;34m([0m[0mcallback[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    256[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 258[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    260[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'
PermissionError: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'

Executability                            : False
"
1742,/mnt/fit-Knowledgezoo/jupyternotebooks/PyDataTokyo@pydata-tokyo-tutorial-1/pydatatokyo_tutorial_dh.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import time
import numpy as np
import mnist
from common import sigmoid, gradient_sigmoid, softmax, cross_entropy_error_batch

#
# Hyper parameters
#
# 히든레이어 뉴런 수 (ex: 50, 100)
HIDDEN_LAYER_SIZE = 50
# 정규분포 난수로 생성될 초기 가중치의 표준편차
WEIGHT_INIT_STD = 0.01
# 학습에 사용할 미니배치의 크기
BATCH_SIZE = 100

#
# Main logic
#
MNIST = mnist.load()
TRAIN_IMG = MNIST['train_img']
TRAIN_LABEL = MNIST['train_label']

# 각 레이어의 뉴런 수
layer0_size = TRAIN_IMG.shape[-1]
layer1_size = HIDDEN_LAYER_SIZE
layer2_size = TRAIN_LABEL.shape[-1]

# 랜덤으로 웨이트 행렬과 가중치 벡터 초기화
parameters = [
    # w0
    WEIGHT_INIT_STD * np.random.randn(layer0_size, layer1_size), 
    # b0
    np.zeros(layer1_size),
    # w1
    WEIGHT_INIT_STD * np.random.randn(layer1_size, layer2_size),
    # b1
    np.zeros(layer2_size),
]

# 미니배치: 트레인셋에서 그래디언트 계산용으로 쓸 데이터 N개 임의추출
indices = np.random.choice(TRAIN_IMG.shape[0], BATCH_SIZE)
BATCH_IMG, BATCH_LABEL = TRAIN_IMG[indices], TRAIN_LABEL[indices]

def predict(w0, b0, w1, b1):
    a0 = BATCH_IMG @ w0 + b0
    z0 = sigmoid(a0)
    a1 = z0 @ w1 + b1
    z1 = softmax(a1)
    return [a0, z0, a1, z1]

def grad_analytic(parameters):
    w1 = parameters[2]
    a0, z0, _, expected = predict(*parameters)

    # Backward propagation
    dz1 = (expected - BATCH_LABEL)/BATCH_SIZE
    dw1 = z0.T @ dz1
    db1 = dz1.sum(axis=0)

    dz0 = gradient_sigmoid(a0) * (dz1 @ w1.T)
    dw0 = BATCH_IMG.T @ dz0
    db0 = dz0.sum(axis=0)
    return [dw0, db0, dw1, db1]

def grad_numerical(parameters, h=1E-4):
    def loss_function(*arguments):
        expected = predict(*arguments)[-1]
        return cross_entropy_error_batch(expected, BATCH_LABEL)
    def grad(param):
        shape = param.shape
        gradient = np.empty(shape)
        for j in np.ndindex(shape):
            orig = param[j]
            param[j] = orig + h
            y2 = loss_function(*parameters)
            param[j] = orig - h
            y1 = loss_function(*parameters)
            param[j] = orig
            gradient[j] = (y2 - y1)/(2*h)
        return gradient
    return [grad(param) for param in parameters]

print('\x1b[31m1. 계산시간 비교\x1b[0m')
# 해석적으로 그래디언트 계산
t0 = time.time()
analytic = grad_analytic(parameters)
t1 = time.time()
print(f'해석적으로 계산하는데에 든 시간 : {t1 - t0:.04}초')
# 수치적으로 그래디언트 계산
t0 = time.time()
numerical = grad_numerical(parameters)
t1 = time.time()
print(f'수치적으로 계산하는데에 든 시간 : {t1 - t0:.04}초\n\n')

# 행렬 출력
names = ['∇W0', '∇B0', '∇W1', '∇B1']
np.set_printoptions(suppress=True, precision=5, threshold=5)
print('\x1b[31m2. 그래디언트값 생김새\x1b[0m')
for name, mat in zip(names, analytic): print(f'  {name}\n{mat}\n')

# 해석적으로 계산한것과, 수치적으로 계산한것 비교
print('''
\x1b[31m3. 해석적으로 구한 그래디언트와, 수치적으로 구한 그래디언트가 얼마나 비슷할까?\x1b[0m
항목\t행렬 원소 이차평균\t수치적으로 계산한것과의 오차
------------------------------------------------------------''')
for analytic, numerical, name in zip(analytic, numerical, names):
    mean = np.sqrt((analytic**2).mean())
    error = np.sqrt(((analytic - numerical)**2).mean())

    print(f'{name}\t{mean:18.02}\t{error:28.02}')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-1-2a371c93ce37>[0m in [0;36m<module>[0;34m[0m
[1;32m     19[0m [0;31m# Main logic[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     20[0m [0;31m#[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 21[0;31m [0mMNIST[0m [0;34m=[0m [0mmnist[0m[0;34m.[0m[0mload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     22[0m [0mTRAIN_IMG[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_img'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     23[0m [0mTRAIN_LABEL[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_label'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mload[0;34m(normalize, flatten, one_hot_label)[0m
[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m     [0;31m# MNIST 데이터를 로드한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 86[0;31m     [0mdataset[0m [0;34m=[0m [0mdownload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     87[0m [0;34m[0m[0m
[1;32m     88[0m     [0;31m# [0.0, 1.0] 구간 안에 들어가도록 이미지를 정규화한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mdownload[0;34m()[0m
[1;32m     39[0m         [0;31m# 이미 다운받은 파일일경우 생략한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m         [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mpath[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 41[0;31m             [0mrequest[0m[0;34m.[0m[0murlretrieve[0m[0;34m([0m[0mURL_BASE[0m [0;34m+[0m [0mfile_name[0m[0;34m,[0m [0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     42[0m [0;34m[0m[0m
[1;32m     43[0m     [0;32mdef[0m [0mload[0m[0;34m([0m[0mcallback[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    256[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 258[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    260[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'
PermissionError: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'

Executability                            : False
"
1747,/mnt/fit-Knowledgezoo/jupyternotebooks/amarallab@Introduction-to-Python-Programming-and-Data-Science/Lessons/Day7_am2_Bootstrapping_MC_chains.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import signal
import sys
import mnist
from common import sigmoid, gradient_sigmoid, softmax, cross_entropy_error_batch

#
# Hyper parameters
#
# 히든레이어 뉴런 수 (ex: 50, 100)
HIDDEN_LAYER_SIZE = 50
# 정규분포 난수로 생성될 초기 가중치의 표준편차
WEIGHT_INIT_STD = 0.01
# 경사하강법을 몇번 적용할지
ITERATION_COUNT = 3
# 학습에 사용할 미니배치의 크기
BATCH_SIZE = 100
# 학습률
LEARNING_RATE = 10
# 에퍼크, 학습 진척도를 얼마나 자주 표시할지 (ex: 100, 300)
UPDATE_PER_EPOCH = 1

#
# Utility functions
#
def make_predict(input):
    def predict(w0, b0, w1, b1):
        a0 = input @ w0 + b0
        z0 = sigmoid(a0)
        a1 = z0 @ w1 + b1
        z1 = softmax(a1)
        return [a0, z0, a1, z1]
    return predict

def accuracy(expected, actual):
    return (expected.argmax(axis=-1) == actual.argmax(axis=-1)).mean()

#
# Main logic
#
MNIST = mnist.load()
TRAIN_IMG = MNIST['train_img']
TRAIN_LABEL = MNIST['train_label']

layer0_size = TRAIN_IMG.shape[-1]
layer1_size = HIDDEN_LAYER_SIZE
layer2_size = TRAIN_LABEL.shape[-1]

# Randomly initialize the parameters
parameters = [
    # w0
    WEIGHT_INIT_STD * np.random.randn(layer0_size, layer1_size), 
    # b0
    np.zeros(layer1_size),
    # w1
    WEIGHT_INIT_STD * np.random.randn(layer1_size, layer2_size),
    # b1
    np.zeros(layer2_size),
]

print('''학습 시작!

반복횟수\t정확도\tLoss
-------------------------------------------''')

try:
    for iteration in range(ITERATION_COUNT):
        # Sample a batch from the train image/label set
        sample = np.random.choice(TRAIN_IMG.shape[0], BATCH_SIZE)
        BATCH_IMG = TRAIN_IMG[sample]
        BATCH_LABEL = TRAIN_LABEL[sample]

        predict = make_predict(BATCH_IMG)

        # Try the result
        if iteration % UPDATE_PER_EPOCH == 0:
            expected = predict(*parameters)[-1]
            percentage = accuracy(expected, BATCH_LABEL)*100
            loss = cross_entropy_error_batch(expected, BATCH_LABEL)
            print(f'{iteration:8}\t{percentage:.04}%\t{loss}')

        # Calculate gradient
        def grad(parameters, h=1E-4):
            def loss_function(*arguments):
                expected = predict(*arguments)[-1]
                return cross_entropy_error_batch(expected, BATCH_LABEL)
            def grad(param):
                shape = param.shape
                gradient = np.empty(shape)
                for j in np.ndindex(shape):
                    orig = param[j]
                    param[j] = orig + h
                    y2 = loss_function(*parameters)
                    param[j] = orig - h
                    y1 = loss_function(*parameters)
                    param[j] = orig
                    gradient[j] = (y2 - y1)/(2*h)
                return gradient
            return [grad(param) for param in parameters]

        # Update parameters using gradient descent method
        gradient = grad(parameters)
        for param, grad in zip(parameters, gradient):
            param -= LEARNING_RATE * grad

    expected = make_predict(MNIST['test_img'])(*parameters)[-1]
    TEST_LABEL = MNIST['test_label']
    percentage = accuracy(expected, TEST_LABEL)*100

    print(f'''
    학습 완료!

    최종 점수
    -------------
    정확도 : {percentage}%
    ''')
except KeyboardInterrupt:
    print('\n\x1b[31mInterrupted!!!\x1b[31m')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-1-9a8997e879b7>[0m in [0;36m<module>[0;34m[0m
[1;32m     41[0m [0;31m# Main logic[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     42[0m [0;31m#[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 43[0;31m [0mMNIST[0m [0;34m=[0m [0mmnist[0m[0;34m.[0m[0mload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     44[0m [0mTRAIN_IMG[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_img'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m     45[0m [0mTRAIN_LABEL[0m [0;34m=[0m [0mMNIST[0m[0;34m[[0m[0;34m'train_label'[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mload[0;34m(normalize, flatten, one_hot_label)[0m
[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m     [0;31m# MNIST 데이터를 로드한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 86[0;31m     [0mdataset[0m [0;34m=[0m [0mdownload[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     87[0m [0;34m[0m[0m
[1;32m     88[0m     [0;31m# [0.0, 1.0] 구간 안에 들어가도록 이미지를 정규화한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/__init__.py[0m in [0;36mdownload[0;34m()[0m
[1;32m     39[0m         [0;31m# 이미 다운받은 파일일경우 생략한다.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     40[0m         [0;32mif[0m [0;32mnot[0m [0mos[0m[0;34m.[0m[0mpath[0m[0;34m.[0m[0mexists[0m[0;34m([0m[0mpath[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 41[0;31m             [0mrequest[0m[0;34m.[0m[0murlretrieve[0m[0;34m([0m[0mURL_BASE[0m [0;34m+[0m [0mfile_name[0m[0;34m,[0m [0mpath[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     42[0m [0;34m[0m[0m
[1;32m     43[0m     [0;32mdef[0m [0mload[0m[0;34m([0m[0mcallback[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/urllib/request.py[0m in [0;36murlretrieve[0;34m(url, filename, reporthook, data)[0m
[1;32m    256[0m         [0;31m# Handle temporary file setup.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    257[0m         [0;32mif[0m [0mfilename[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 258[0;31m             [0mtfp[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m'wb'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    259[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    260[0m             [0mtfp[0m [0;34m=[0m [0mtempfile[0m[0;34m.[0m[0mNamedTemporaryFile[0m[0;34m([0m[0mdelete[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'
PermissionError: [Errno 13] Permission denied: '/mnt/fit-Knowledgezoo/jupyternotebooks/simnalamburt@snucse/Deep Learning from Scratch/mnist/train-images-idx3-ubyte.gz'

Executability                            : False
"
1751,/mnt/fit-Knowledgezoo/jupyternotebooks/amarallab@Introduction-to-Python-Programming-and-Data-Science/Homework/HW1/Day1Homework.ipynb,"3.5
An error occurred while executing the following cell:
------------------
df_kaggle = pd.DataFrame({'PassengerId': df_test['PassengerId'], 'Survived':np.array(y_test_pred)})
df_kaggle.to_csv('kaggle_gendermodel.csv', index=False)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-14-be252914a4fb>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0mdf_kaggle[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m([0m[0;34m{[0m[0;34m'PassengerId'[0m[0;34m:[0m [0mdf_test[0m[0;34m[[0m[0;34m'PassengerId'[0m[0;34m][0m[0;34m,[0m [0;34m'Survived'[0m[0;34m:[0m[0mnp[0m[0;34m.[0m[0marray[0m[0;34m([0m[0my_test_pred[0m[0;34m)[0m[0;34m}[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mdf_kaggle[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m'kaggle_gendermodel.csv'[0m[0;34m,[0m [0mindex[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/core/frame.py[0m in [0;36mto_csv[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)[0m
[1;32m   1743[0m                                  [0mdoublequote[0m[0;34m=[0m[0mdoublequote[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1744[0m                                  escapechar=escapechar, decimal=decimal)
[0;32m-> 1745[0;31m         [0mformatter[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1746[0m [0;34m[0m[0m
[1;32m   1747[0m         [0;32mif[0m [0mpath_or_buf[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/formats/csvs.py[0m in [0;36msave[0;34m(self)[0m
[1;32m    154[0m             f, handles = _get_handle(self.path_or_buf, self.mode,
[1;32m    155[0m                                      [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0m
[0;32m--> 156[0;31m                                      compression=self.compression)
[0m[1;32m    157[0m             [0mclose[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    158[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/common.py[0m in [0;36m_get_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)[0m
[1;32m    398[0m         [0;32melif[0m [0mencoding[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    399[0m             [0;31m# Python 3 and encoding[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 400[0;31m             [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    401[0m         [0;32melif[0m [0mis_text[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    402[0m             [0;31m# Python 3 and no explicit encoding[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'kaggle_gendermodel.csv'
PermissionError: [Errno 13] Permission denied: 'kaggle_gendermodel.csv'

Executability                            : False
"
1755,/mnt/fit-Knowledgezoo/jupyternotebooks/odtu@ee564/TRAIN/Melih/Worse Design 2.ipynb,"3.6
list index out of range
Executability                            : False
"
1757,/mnt/fit-Knowledgezoo/jupyternotebooks/odtu@ee564/TRAIN/Melih/worse design 1.ipynb,"3.6
list index out of range
Executability                            : False
"
1809,/mnt/fit-Knowledgezoo/jupyternotebooks/JWarmenhoven@ipython_notebooks/Pandas/Pandas - Alternative DataFrame Constructors.ipynb,"3.5
An error occurred while executing the following cell:
------------------
ax = seaborn.violinplot(x='z_score_ihs', y='status', data=self_df, inner='quartile', hue='pert_type', split=True)
text = ax.set_xlabel(""IHS-transformed z-score"")
text = ax.set_ylabel('')
ax.legend_.set_title('')
matplotlib.pyplot.savefig('viz/self-targeting-perts.png', bbox_inches='tight', cut=0, dpi=300)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-8-1634bda5f898>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0mtext[0m [0;34m=[0m [0max[0m[0;34m.[0m[0mset_ylabel[0m[0;34m([0m[0;34m''[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0max[0m[0;34m.[0m[0mlegend_[0m[0;34m.[0m[0mset_title[0m[0;34m([0m[0;34m''[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m'viz/self-targeting-perts.png'[0m[0;34m,[0m [0mbbox_inches[0m[0;34m=[0m[0;34m'tight'[0m[0;34m,[0m [0mcut[0m[0;34m=[0m[0;36m0[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0;36m300[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36msavefig[0;34m(*args, **kwargs)[0m
[1;32m    686[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    687[0m     [0mfig[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 688[0;31m     [0mres[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    689[0m     [0mfig[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mdraw_idle[0m[0;34m([0m[0;34m)[0m   [0;31m# need this if 'transparent=True' to reset colors[0m[0;34m[0m[0m
[1;32m    690[0m     [0;32mreturn[0m [0mres[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, frameon, transparent, **kwargs)[0m
[1;32m   2095[0m             [0mself[0m[0;34m.[0m[0mset_frameon[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2096[0m [0;34m[0m[0m
[0;32m-> 2097[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2098[0m [0;34m[0m[0m
[1;32m   2099[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2073[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2074[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2075[0;31m                     **kwargs)
[0m[1;32m   2076[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2077[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py[0m in [0;36mprint_png[0;34m(self, filename_or_obj, *args, **kwargs)[0m
[1;32m    519[0m [0;34m[0m[0m
[1;32m    520[0m         [0;32mwith[0m [0mcbook[0m[0;34m.[0m[0m_setattr_cm[0m[0;34m([0m[0mrenderer[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mfigure[0m[0;34m.[0m[0mdpi[0m[0;34m)[0m[0;34m,[0m[0;31m [0m[0;31m\[0m[0;34m[0m[0m
[0;32m--> 521[0;31m                 [0mcbook[0m[0;34m.[0m[0mopen_file_cm[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m,[0m [0;34m""wb""[0m[0;34m)[0m [0;32mas[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m    522[0m             _png.write_png(renderer._renderer, fh,
[1;32m    523[0m                             self.figure.dpi, metadata=metadata)

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/contextlib.py[0m in [0;36m__enter__[0;34m(self)[0m
[1;32m     57[0m     [0;32mdef[0m [0m__enter__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     58[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 59[0;31m             [0;32mreturn[0m [0mnext[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mgen[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     60[0m         [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     61[0m             [0;32mraise[0m [0mRuntimeError[0m[0;34m([0m[0;34m""generator didn't yield""[0m[0;34m)[0m [0;32mfrom[0m [0;32mNone[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mopen_file_cm[0;34m(path_or_file, mode, encoding)[0m
[1;32m    405[0m [0;32mdef[0m [0mopen_file_cm[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0;34m""r""[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    406[0m     [0;34mr""""""Pass through file objects and context-manage `.PathLike`\s.""""""[0m[0;34m[0m[0m
[0;32m--> 407[0;31m     [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mto_filehandle[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0;32mTrue[0m[0;34m,[0m [0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    408[0m     [0;32mif[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    409[0m         [0;32mwith[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    390[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    391[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 392[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    393[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    394[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'viz/self-targeting-perts.png'
PermissionError: [Errno 13] Permission denied: 'viz/self-targeting-perts.png'

Executability                            : False
"
1828,/mnt/fit-Knowledgezoo/jupyternotebooks/nfaggian@notebooks/Introductions/Tutorial - 1.5 - Scikit-Learn.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# Import the required packages
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

# Make the display easy to read
% precision 2
------------------


UsageError: Line magic function `%` not found.

Executability                            : False
"
1829,/mnt/fit-Knowledgezoo/jupyternotebooks/nfaggian@notebooks/Introductions/Tutorial - 1.1 - Numpy.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
# Plot the frequency response.
w, h = signal.freqz(b, a, worN=8000)
plt.subplot(2, 1, 1)
plt.plot(0.5*rate*w/np.pi, np.abs(h), 'b')
plt.semilogx(cutoff, 0.5*np.sqrt(2), 'ko')
plt.axvline(cutoff, color='r')
plt.xlim(0, 0.5*rate)
plt.title(""Lowpass Filter Frequency Response"")
plt.xlabel('Frequency [Hz]')
plt.grid()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-8-6a4c3443d299>[0m in [0;36m<module>[0;34m[0m
[1;32m      3[0m [0mplt[0m[0;34m.[0m[0msubplot[0m[0;34m([0m[0;36m2[0m[0;34m,[0m [0;36m1[0m[0;34m,[0m [0;36m1[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      4[0m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0;36m0.5[0m[0;34m*[0m[0mrate[0m[0;34m*[0m[0mw[0m[0;34m/[0m[0mnp[0m[0;34m.[0m[0mpi[0m[0;34m,[0m [0mnp[0m[0;34m.[0m[0mabs[0m[0;34m([0m[0mh[0m[0;34m)[0m[0;34m,[0m [0;34m'b'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0mplt[0m[0;34m.[0m[0msemilogx[0m[0;34m([0m[0mcutoff[0m[0;34m,[0m [0;36m0.5[0m[0;34m*[0m[0mnp[0m[0;34m.[0m[0msqrt[0m[0;34m([0m[0;36m2[0m[0;34m)[0m[0;34m,[0m [0;34m'ko'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0mplt[0m[0;34m.[0m[0maxvline[0m[0;34m([0m[0mcutoff[0m[0;34m,[0m [0mcolor[0m[0;34m=[0m[0;34m'r'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      7[0m [0mplt[0m[0;34m.[0m[0mxlim[0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0;36m0.5[0m[0;34m*[0m[0mrate[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mNameError[0m: name 'cutoff' is not defined
NameError: name 'cutoff' is not defined

Executability                            : False
"
1836,/mnt/fit-Knowledgezoo/jupyternotebooks/raphaelcastaneda@pycon_notes/2016/Talks/refactoring python.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from IPython.display import HTML
from ipywidgets import widgets, HBox, VBox
from IPython import display

import numpy as np
import pandas as pd

HTML('''<script>
code_show=true; 
function code_toggle() {
 if (code_show){
 $('div.input').hide();
 } else {
 $('div.input').show();
 }
 code_show = !code_show
} 
$( document ).ready(code_toggle);
</script>
<form action=""javascript:code_toggle()""><input type=""submit"" value=""Click here to toggle on/off the raw code.""></form>''')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-1af4d40775fc>[0m in [0;36m<module>[0;34m()[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0mIPython[0m[0;34m.[0m[0mdisplay[0m [0;32mimport[0m [0mHTML[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0mipywidgets[0m [0;32mimport[0m [0mwidgets[0m[0;34m,[0m [0mHBox[0m[0;34m,[0m [0mVBox[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;32mfrom[0m [0mIPython[0m [0;32mimport[0m [0mdisplay[0m[0;34m[0m[0m
[1;32m      6[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'ipywidgets'
ImportError: No module named 'ipywidgets'

Executability                            : False
"
1849,/mnt/fit-Knowledgezoo/jupyternotebooks/kkai@perception-aware/3.analysis/Anscombe.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as dts
import pandas as pd
import statsmodels.api as sm
from bs4 import BeautifulSoup
import subprocess,os
import runProcs
%matplotlib inline
------------------

[0;36m  File [0;32m""<ipython-input-1-cf048f4a6de6>""[0;36m, line [0;32m6[0m
[0;31m    import matplotlib.dates as dts[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-cf048f4a6de6>, line 6)

Executability                            : False
"
1850,/mnt/fit-Knowledgezoo/jupyternotebooks/kkai@perception-aware/3.analysis/MacAndPC.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from __future__ import division
import matplotlib.pyplot as plt
plt.style.use('classic')
import matplotlib.dates as dts
import numpy as np
import runProcs
from scipy.stats import gaussian_kde
import pandas as pd
%matplotlib inline

# This program requires the Penn World Tables data file: pwt90.xlsx
# available at https://pwt.sas.upenn.edu/
------------------

[0;36m  File [0;32m""<ipython-input-1-f6945eb0f426>""[0;36m, line [0;32m6[0m
[0;31m    import matplotlib.dates as dts[0m
[0m           ^[0m
[0;31mSyntaxError[0m[0;31m:[0m from __future__ imports must occur at the beginning of the file

SyntaxError: from __future__ imports must occur at the beginning of the file (<ipython-input-1-f6945eb0f426>, line 6)

Executability                            : False
"
1855,/mnt/fit-Knowledgezoo/jupyternotebooks/tristan-salles@notebooks-2015/MARS5001/Modelling-session2/Lecture-overview.ipynb,"3.5
list index out of range
Executability                            : False
"
1856,/mnt/fit-Knowledgezoo/jupyternotebooks/ketch@PseudoSpectralPython/PSPython_01-linear-PDEs.ipynb,"3.5
An error occurred while executing the following cell:
------------------
y = [[3, 3, 2], [0, 3, 2], [0, 0, 3]]
x = [datetime(year=2014 + i, month=1, day=1) for i in range(3)]
stackplot(x, y, colors=[""#CB8C1D"", ""#F1684E"", ""#4EB1BA""])
gca().xaxis.set_major_locator(matplotlib.dates.YearLocator())
xlim( [datetime(year=2014 + i * 2, month=1, day=1) for i in range(2)])
ylim(0, 7)
ylabel(""Lines"")
xlabel(""Time"")
gca().spines[""bottom""].set_color(""white"")
gca().spines[""top""].set_color(""white"")
gca().spines[""left""].set_color(""white"")
gca().spines[""right""].set_color(""white"")
gca().yaxis.label.set_color(""white"")
gca().xaxis.label.set_color(""white"")
gca().tick_params(axis=""x"", colors=""white"")
gca().tick_params(axis=""y"", colors=""white"")
savefig(""pictures/objective.svg"", transparent=True)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
[0;32m<ipython-input-3-5542d1aa9f78>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0my[0m [0;34m=[0m [0;34m[[0m[0;34m[[0m[0;36m3[0m[0;34m,[0m [0;36m3[0m[0;34m,[0m [0;36m2[0m[0;34m][0m[0;34m,[0m [0;34m[[0m[0;36m0[0m[0;34m,[0m [0;36m3[0m[0;34m,[0m [0;36m2[0m[0;34m][0m[0;34m,[0m [0;34m[[0m[0;36m0[0m[0;34m,[0m [0;36m0[0m[0;34m,[0m [0;36m3[0m[0;34m][0m[0;34m][0m[0;34m[0m[0m
[1;32m      2[0m [0mx[0m [0;34m=[0m [0;34m[[0m[0mdatetime[0m[0;34m([0m[0myear[0m[0;34m=[0m[0;36m2014[0m [0;34m+[0m [0mi[0m[0;34m,[0m [0mmonth[0m[0;34m=[0m[0;36m1[0m[0;34m,[0m [0mday[0m[0;34m=[0m[0;36m1[0m[0;34m)[0m [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0;36m3[0m[0;34m)[0m[0;34m][0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0mstackplot[0m[0;34m([0m[0mx[0m[0;34m,[0m [0my[0m[0;34m,[0m [0mcolors[0m[0;34m=[0m[0;34m[[0m[0;34m""#CB8C1D""[0m[0;34m,[0m [0;34m""#F1684E""[0m[0;34m,[0m [0;34m""#4EB1BA""[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mgca[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mxaxis[0m[0;34m.[0m[0mset_major_locator[0m[0;34m([0m[0mmatplotlib[0m[0;34m.[0m[0mdates[0m[0;34m.[0m[0mYearLocator[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0mxlim[0m[0;34m([0m [0;34m[[0m[0mdatetime[0m[0;34m([0m[0myear[0m[0;34m=[0m[0;36m2014[0m [0;34m+[0m [0mi[0m [0;34m*[0m [0;36m2[0m[0;34m,[0m [0mmonth[0m[0;34m=[0m[0;36m1[0m[0;34m,[0m [0mday[0m[0;34m=[0m[0;36m1[0m[0;34m)[0m [0;32mfor[0m [0mi[0m [0;32min[0m [0mrange[0m[0;34m([0m[0;36m2[0m[0;34m)[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36mstackplot[0;34m(x, data, *args, **kwargs)[0m
[1;32m   2834[0m [0;34m@[0m[0mdocstring[0m[0;34m.[0m[0mcopy_dedent[0m[0;34m([0m[0mAxes[0m[0;34m.[0m[0mstackplot[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2835[0m [0;32mdef[0m [0mstackplot[0m[0;34m([0m[0mx[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2836[0;31m     [0;32mreturn[0m [0mgca[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mstackplot[0m[0;34m([0m[0mx[0m[0;34m=[0m[0mx[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0mdata[0m[0;34m=[0m[0mdata[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2837[0m [0;34m[0m[0m
[1;32m   2838[0m [0;31m# Autogenerated by boilerplate.py.  Do not edit as changes will be lost.[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/__init__.py[0m in [0;36minner[0;34m(ax, data, *args, **kwargs)[0m
[1;32m   1783[0m                         [0;34m""the Matplotlib list!)""[0m [0;34m%[0m [0;34m([0m[0mlabel_namer[0m[0;34m,[0m [0mfunc[0m[0;34m.[0m[0m__name__[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1784[0m                         RuntimeWarning, stacklevel=2)
[0;32m-> 1785[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0max[0m[0;34m,[0m [0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1786[0m [0;34m[0m[0m
[1;32m   1787[0m         inner.__doc__ = _add_data_doc(inner.__doc__,

[0;31mTypeError[0m: stackplot() got multiple values for argument 'x'
TypeError: stackplot() got multiple values for argument 'x'

Executability                            : False
"
1919,/mnt/fit-Knowledgezoo/jupyternotebooks/bartleyn@practice/NetworkX Graphs.ipynb,"3.5
An error occurred while executing the following cell:
------------------
Ns = 4096 # number of samples
np.random.seed(1234) # random seed (for repeatability)
rn = np.random.random(Ns)-0.5 # zero mean random noise

Fs = 100 # sampling frequency
dt = 1./Fs # time discretisation
tt = np.arange(Ns)*dt # time sampling

A = 0.067 # sine wave amplitude
f = 10.24 # sine wave frequency
sw = A*np.sin(2*np.pi*f*tt) # sine wave

ss = sw+rn # sample signal
signals = (rn, sw, ss)
labels = ('Random noise', 'Sine wave', 'Sample signal')

v = [(np.max(v), np.min(v), np.mean(v), rms_flat(v)) for v in signals]
df = pd.DataFrame(data=v, index=labels, columns=('Max', 'Min', 'Mean', 'RMS'))
print(df)

fig, ax = plt.subplots()
ax.hold(True)
for v in (2,1):
    ax.plot(tt, signals[v], label=labels[v])
ax.set_title('Time history')
ax.set_xlabel('Time [s]')
ax.set_ylabel('Amplitude [V]')
ax.legend()
ax.grid()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-3-a9948000f5d2>[0m in [0;36m<module>[0;34m()[0m
[1;32m     20[0m [0;34m[0m[0m
[1;32m     21[0m [0mfig[0m[0;34m,[0m [0max[0m [0;34m=[0m [0mplt[0m[0;34m.[0m[0msubplots[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 22[0;31m [0max[0m[0;34m.[0m[0mhold[0m[0;34m([0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     23[0m [0;32mfor[0m [0mv[0m [0;32min[0m [0;34m([0m[0;36m2[0m[0;34m,[0m[0;36m1[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     24[0m     [0max[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mtt[0m[0;34m,[0m [0msignals[0m[0;34m[[0m[0mv[0m[0;34m][0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0mlabels[0m[0;34m[[0m[0mv[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0m

[0;31mAttributeError[0m: 'AxesSubplot' object has no attribute 'hold'
AttributeError: 'AxesSubplot' object has no attribute 'hold'

Executability                            : False
"
1923,/mnt/fit-Knowledgezoo/jupyternotebooks/matted@ipynb_test/Pandas groupby example.ipynb,"3.5
An error occurred while executing the following cell:
------------------
plt.hold(True)
plt.plot(wn, zn_a+zn_b, label='Rayleigh damping')
plt.plot(wn, zn_a, label='mass proportional')
plt.plot(wn, zn_b, label='stiffness proportional')
plt.xlabel('Vibration frequency $\omega_n$ [rad/s]')
plt.ylabel('Damping coefficient $\zeta_n$ [-]')
plt.legend(loc='best')
plt.grid(True)
plt.xlim([0, 35.])
plt.ylim([0, 0.2])
plt.show()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-5-833beee62a50>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mplt[0m[0;34m.[0m[0mhold[0m[0;34m([0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mwn[0m[0;34m,[0m [0mzn_a[0m[0;34m+[0m[0mzn_b[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0;34m'Rayleigh damping'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      3[0m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mwn[0m[0;34m,[0m [0mzn_a[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0;34m'mass proportional'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      4[0m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mwn[0m[0;34m,[0m [0mzn_b[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0;34m'stiffness proportional'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0mplt[0m[0;34m.[0m[0mxlabel[0m[0;34m([0m[0;34m'Vibration frequency $\omega_n$ [rad/s]'[0m[0;34m)[0m[0;34m[0m[0m

[0;31mAttributeError[0m: module 'matplotlib.pyplot' has no attribute 'hold'
AttributeError: module 'matplotlib.pyplot' has no attribute 'hold'

Executability                            : False
"
1954,/mnt/fit-Knowledgezoo/jupyternotebooks/aenfield@random/10MinutesToPandas.ipynb,"3.5
An error occurred while executing the following cell:
------------------
%timeit df.to_csv(""csv_format"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-8f9730d0b553>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0mget_ipython[0m[0;34m([0m[0;34m)[0m[0;34m.[0m[0mrun_line_magic[0m[0;34m([0m[0;34m'timeit'[0m[0;34m,[0m [0;34m'df.to_csv(""csv_format"")'[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/interactiveshell.py[0m in [0;36mrun_line_magic[0;34m(self, magic_name, line, _stack_depth)[0m
[1;32m   2129[0m                 [0mkwargs[0m[0;34m[[0m[0;34m'local_ns'[0m[0;34m][0m [0;34m=[0m [0msys[0m[0;34m.[0m[0m_getframe[0m[0;34m([0m[0mstack_depth[0m[0;34m)[0m[0;34m.[0m[0mf_locals[0m[0;34m[0m[0m
[1;32m   2130[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0mbuiltin_trap[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2131[0;31m                 [0mresult[0m [0;34m=[0m [0mfn[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m[0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2132[0m             [0;32mreturn[0m [0mresult[0m[0;34m[0m[0m
[1;32m   2133[0m [0;34m[0m[0m

[0;32m</home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/decorator.py:decorator-gen-61>[0m in [0;36mtimeit[0;34m(self, line, cell, local_ns)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magic.py[0m in [0;36m<lambda>[0;34m(f, *a, **k)[0m
[1;32m    185[0m     [0;31m# but it's overkill for just that one bit of state.[0m[0;34m[0m[0;34m[0m[0m
[1;32m    186[0m     [0;32mdef[0m [0mmagic_deco[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 187[0;31m         [0mcall[0m [0;34m=[0m [0;32mlambda[0m [0mf[0m[0;34m,[0m [0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m:[0m [0mf[0m[0;34m([0m[0;34m*[0m[0ma[0m[0;34m,[0m [0;34m**[0m[0mk[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    188[0m [0;34m[0m[0m
[1;32m    189[0m         [0;32mif[0m [0mcallable[0m[0;34m([0m[0marg[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/execution.py[0m in [0;36mtimeit[0;34m(self, line, cell, local_ns)[0m
[1;32m   1095[0m             [0;32mfor[0m [0mindex[0m [0;32min[0m [0mrange[0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0;36m10[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1096[0m                 [0mnumber[0m [0;34m=[0m [0;36m10[0m [0;34m**[0m [0mindex[0m[0;34m[0m[0m
[0;32m-> 1097[0;31m                 [0mtime_number[0m [0;34m=[0m [0mtimer[0m[0;34m.[0m[0mtimeit[0m[0;34m([0m[0mnumber[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1098[0m                 [0;32mif[0m [0mtime_number[0m [0;34m>=[0m [0;36m0.2[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   1099[0m                     [0;32mbreak[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/IPython/core/magics/execution.py[0m in [0;36mtimeit[0;34m(self, number)[0m
[1;32m    157[0m         [0mgc[0m[0;34m.[0m[0mdisable[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m    158[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 159[0;31m             [0mtiming[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0minner[0m[0;34m([0m[0mit[0m[0;34m,[0m [0mself[0m[0;34m.[0m[0mtimer[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    160[0m         [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    161[0m             [0;32mif[0m [0mgcold[0m[0;34m:[0m[0;34m[0m[0m

[0;32m<magic-timeit>[0m in [0;36minner[0;34m(_it, _timer)[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/core/frame.py[0m in [0;36mto_csv[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)[0m
[1;32m   1743[0m                                  [0mdoublequote[0m[0;34m=[0m[0mdoublequote[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1744[0m                                  escapechar=escapechar, decimal=decimal)
[0;32m-> 1745[0;31m         [0mformatter[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1746[0m [0;34m[0m[0m
[1;32m   1747[0m         [0;32mif[0m [0mpath_or_buf[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/formats/csvs.py[0m in [0;36msave[0;34m(self)[0m
[1;32m    154[0m             f, handles = _get_handle(self.path_or_buf, self.mode,
[1;32m    155[0m                                      [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0m
[0;32m--> 156[0;31m                                      compression=self.compression)
[0m[1;32m    157[0m             [0mclose[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    158[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/common.py[0m in [0;36m_get_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)[0m
[1;32m    398[0m         [0;32melif[0m [0mencoding[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    399[0m             [0;31m# Python 3 and encoding[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 400[0;31m             [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    401[0m         [0;32melif[0m [0mis_text[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    402[0m             [0;31m# Python 3 and no explicit encoding[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'csv_format'
PermissionError: [Errno 13] Permission denied: 'csv_format'

Executability                            : False
"
1961,/mnt/fit-Knowledgezoo/jupyternotebooks/asheeshdwivedi@tutorials/python-tutorials/Python statement/While loops.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import sympy
sympy.init_printing()

Q11, Q12, Q21, Q22 = sympy.symbols('Q_11 Q_12 Q_21 Q_22')
x1, x2, y1, y2, x, y  = sympy.symbols('x_1 x_2 y_1 y_2 x y')
l,w, csi, eta = sympy.symbols('l w xi eta')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-b26b84b226f4>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0msympy[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0msympy[0m[0;34m.[0m[0minit_printing[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'sympy'
ModuleNotFoundError: No module named 'sympy'

Executability                            : False
"
1967,/mnt/fit-Knowledgezoo/jupyternotebooks/socc-io@ALPC/DeepLearning/lecture/ImageManipulation.ipynb,"3.5
An error occurred while executing the following cell:
------------------
d = pd.read_excel('data.xlsx')
d
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, **kwds)[0m
[1;32m    351[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 352[0;31m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0m
[0m[1;32m    353[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'xlrd'

During handling of the above exception, another exception occurred:

[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-e859d8c0bf5a>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0md[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mread_excel[0m[0;34m([0m[0;34m'data.xlsx'[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      2[0m [0md[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    176[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    177[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0m
[0;32m--> 178[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    179[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0m
[1;32m    180[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    176[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    177[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0m
[0;32m--> 178[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    179[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0m
[1;32m    180[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36mread_excel[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, **kwds)[0m
[1;32m    305[0m [0;34m[0m[0m
[1;32m    306[0m     [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mExcelFile[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 307[0;31m         [0mio[0m [0;34m=[0m [0mExcelFile[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mengine[0m[0;34m=[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    308[0m [0;34m[0m[0m
[1;32m    309[0m     return io.parse(

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, **kwds)[0m
[1;32m    352[0m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0m
[1;32m    353[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 354[0;31m             [0;32mraise[0m [0mImportError[0m[0;34m([0m[0merr_msg[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    355[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    356[0m             [0mver[0m [0;34m=[0m [0mtuple[0m[0;34m([0m[0mmap[0m[0;34m([0m[0mint[0m[0;34m,[0m [0mxlrd[0m[0;34m.[0m[0m__VERSION__[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m"".""[0m[0;34m)[0m[0;34m[[0m[0;34m:[0m[0;36m2[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: Install xlrd >= 0.9.0 for Excel support
ImportError: Install xlrd >= 0.9.0 for Excel support

Executability                            : False
"
2006,/mnt/fit-Knowledgezoo/jupyternotebooks/DavidsonNext@Interactives/macroeconomics/various/old-structure/Phillips_Curve/LC2/Phillips_LC2_HOA1.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from sympy import *
init_printing(use_unicode=True, wrap_line=False, no_global=True)
import matplotlib.pyplot as plt
%matplotlib notebook
from sympy.abc import x,y
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-18406a12412b>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0msympy[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0minit_printing[0m[0;34m([0m[0muse_unicode[0m[0;34m=[0m[0;32mTrue[0m[0;34m,[0m [0mwrap_line[0m[0;34m=[0m[0;32mFalse[0m[0;34m,[0m [0mno_global[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sympy'
ImportError: No module named 'sympy'

Executability                            : False
"
2053,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/data_analysis/coursera_vvedenie_v_analyz_dannyh/3_1_svm/3_1_statement_svm.ipynb,"3.5
An error occurred while executing the following cell:
------------------
### Construct Harald graph

import matplotlib.pyplot as plt
import numpy as np

# a1,c, sbar, k, mop = .8, 100.0, 100.0, .5, 0.0

a1 = .8
c = 10
sbar  = 10
k = 1.0
mop = 0;    # this is m/p



s = np.arange(sbar*(.6), sbar*(.85),.01)

f1 = (k-mop)/(sbar -s) 
f2 = ((1.0-a1)/a1)*(c/s)
f3 = (k - .5*k)/(sbar-s)
plt.plot(s, f1)
plt.plot(s, f2)
plt.plot(s, f3)
plt.title('Ricardo doctrine')
plt.xlabel('silver(s)')
plt.ylabel('p/e')
plt.savefig(""Ricardo.png"")
plt.show()

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-2-c63a3aa4a6cd>[0m in [0;36m<module>[0;34m()[0m
[1;32m     25[0m [0mplt[0m[0;34m.[0m[0mxlabel[0m[0;34m([0m[0;34m'silver(s)'[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     26[0m [0mplt[0m[0;34m.[0m[0mylabel[0m[0;34m([0m[0;34m'p/e'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 27[0;31m [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m""Ricardo.png""[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     28[0m [0mplt[0m[0;34m.[0m[0mshow[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36msavefig[0;34m(*args, **kwargs)[0m
[1;32m    686[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    687[0m     [0mfig[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 688[0;31m     [0mres[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    689[0m     [0mfig[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mdraw_idle[0m[0;34m([0m[0;34m)[0m   [0;31m# need this if 'transparent=True' to reset colors[0m[0;34m[0m[0m
[1;32m    690[0m     [0;32mreturn[0m [0mres[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, frameon, transparent, **kwargs)[0m
[1;32m   2095[0m             [0mself[0m[0;34m.[0m[0mset_frameon[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2096[0m [0;34m[0m[0m
[0;32m-> 2097[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2098[0m [0;34m[0m[0m
[1;32m   2099[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2073[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2074[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2075[0;31m                     **kwargs)
[0m[1;32m   2076[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2077[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_agg.py[0m in [0;36mprint_png[0;34m(self, filename_or_obj, *args, **kwargs)[0m
[1;32m    519[0m [0;34m[0m[0m
[1;32m    520[0m         [0;32mwith[0m [0mcbook[0m[0;34m.[0m[0m_setattr_cm[0m[0;34m([0m[0mrenderer[0m[0;34m,[0m [0mdpi[0m[0;34m=[0m[0mself[0m[0;34m.[0m[0mfigure[0m[0;34m.[0m[0mdpi[0m[0;34m)[0m[0;34m,[0m[0;31m [0m[0;31m\[0m[0;34m[0m[0m
[0;32m--> 521[0;31m                 [0mcbook[0m[0;34m.[0m[0mopen_file_cm[0m[0;34m([0m[0mfilename_or_obj[0m[0;34m,[0m [0;34m""wb""[0m[0;34m)[0m [0;32mas[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m    522[0m             _png.write_png(renderer._renderer, fh,
[1;32m    523[0m                             self.figure.dpi, metadata=metadata)

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/contextlib.py[0m in [0;36m__enter__[0;34m(self)[0m
[1;32m     57[0m     [0;32mdef[0m [0m__enter__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     58[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m---> 59[0;31m             [0;32mreturn[0m [0mnext[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mgen[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     60[0m         [0;32mexcept[0m [0mStopIteration[0m[0;34m:[0m[0;34m[0m[0m
[1;32m     61[0m             [0;32mraise[0m [0mRuntimeError[0m[0;34m([0m[0;34m""generator didn't yield""[0m[0;34m)[0m [0;32mfrom[0m [0;32mNone[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mopen_file_cm[0;34m(path_or_file, mode, encoding)[0m
[1;32m    405[0m [0;32mdef[0m [0mopen_file_cm[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m=[0m[0;34m""r""[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0;32mNone[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    406[0m     [0;34mr""""""Pass through file objects and context-manage `.PathLike`\s.""""""[0m[0;34m[0m[0m
[0;32m--> 407[0;31m     [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mto_filehandle[0m[0;34m([0m[0mpath_or_file[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0;32mTrue[0m[0;34m,[0m [0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    408[0m     [0;32mif[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    409[0m         [0;32mwith[0m [0mfh[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    390[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    391[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 392[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    393[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    394[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'Ricardo.png'
PermissionError: [Errno 13] Permission denied: 'Ricardo.png'

Executability                            : False
"
2061,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/data_analysis/coursera_vvedenie_v_analyz_dannyh/3_4_metrics/3_4_statement_metrics.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import sklearn.cross_validation as cv

from sklearn import datasets
from sklearn.svm import SVC
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.grid_search import GridSearchCV
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-dc3a09ebc32d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mas[0m [0mcv[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;34m[0m[0m
[1;32m      7[0m [0;32mfrom[0m [0msklearn[0m [0;32mimport[0m [0mdatasets[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
2062,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/data_analysis/coursera_vvedenie_v_analyz_dannyh/6_1_clastering/6_1_clastering.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import sklearn.datasets as skdata
import sklearn.preprocessing as prep
import sklearn.cross_validation as cv

from sklearn.neighbors import KNeighborsRegressor
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-ced30721332d>[0m in [0;36m<module>[0;34m()[0m
[1;32m      5[0m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mdatasets[0m [0;32mas[0m [0mskdata[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mpreprocessing[0m [0;32mas[0m [0mprep[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mas[0m [0mcv[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0;34m[0m[0m
[1;32m      9[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mneighbors[0m [0;32mimport[0m [0mKNeighborsRegressor[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
2063,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/data_analysis/coursera_mashinnoe_obuchenie_i_analiz_dannyh/matematika_i_python_dlya_analiza_dannyh/4_1/4_1.ipynb,"3.5
An error occurred while executing the following cell:
------------------
res = ' '.join([str(x + 1) for x in clf.support_]) 
with open(""1.txt"", 'w') as txt1:
    txt1.write(res)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-4-c35de10ef8fc>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0mres[0m [0;34m=[0m [0;34m' '[0m[0;34m.[0m[0mjoin[0m[0;34m([0m[0;34m[[0m[0mstr[0m[0;34m([0m[0mx[0m [0;34m+[0m [0;36m1[0m[0;34m)[0m [0;32mfor[0m [0mx[0m [0;32min[0m [0mclf[0m[0;34m.[0m[0msupport_[0m[0;34m][0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      3[0m     [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2064,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/data_analysis/coursera_mashinnoe_obuchenie_i_analiz_dannyh/matematika_i_python_dlya_analiza_dannyh/2_1/2_1.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy                    as np
import pandas                   as pd
import sklearn.cross_validation as cv

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics  import r2_score
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f47ee4f7b6b7>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m                    [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mimport[0m [0mpandas[0m                   [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mas[0m [0mcv[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;34m[0m[0m
[1;32m      7[0m [0;32mfrom[0m [0msklearn[0m[0;34m.[0m[0mensemble[0m [0;32mimport[0m [0mRandomForestRegressor[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
2065,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/data_analysis/coursera_mashinnoe_obuchenie_i_analiz_dannyh/matematika_i_python_dlya_analiza_dannyh/3_1/3_1.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy as np
import pandas as pd
import scipy as sp
import sklearn.cross_validation as cv
import sklearn.preprocessing as prep

from  sklearn.neighbors import KNeighborsClassifier
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-b6d30663eba6>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mscipy[0m [0;32mas[0m [0msp[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mas[0m [0mcv[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mpreprocessing[0m [0;32mas[0m [0mprep[0m[0;34m[0m[0m
[1;32m      8[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
2066,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/programming_technologies (6 term)/task_3/task_3.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy                    as np
import pandas                   as pd
import sklearn.cross_validation as cv
import matplotlib.pyplot        as plt

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics  import log_loss

%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-2450864ae5cd>[0m in [0;36m<module>[0;34m()[0m
[1;32m      3[0m [0;32mimport[0m [0mnumpy[0m                    [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m      4[0m [0;32mimport[0m [0mpandas[0m                   [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[0;32m----> 5[0;31m [0;32mimport[0m [0msklearn[0m[0;34m.[0m[0mcross_validation[0m [0;32mas[0m [0mcv[0m[0;34m[0m[0m
[0m[1;32m      6[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m        [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'sklearn.cross_validation'
ImportError: No module named 'sklearn.cross_validation'

Executability                            : False
"
2067,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/optimization_methods (6 term)/programming_gorishniy_376.ipynb,"3.5
An error occurred while executing the following cell:
------------------
res = score_scaled - score
print(res)
with open(""1.txt"", 'w') as txt1:
    txt1.write(""%.3f"" % res)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-7-7fb21982d276>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0mres[0m [0;34m=[0m [0mscore_scaled[0m [0;34m-[0m [0mscore[0m[0;34m[0m[0m
[1;32m      2[0m [0mprint[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      4[0m     [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0;34m""%.3f""[0m [0;34m%[0m [0mres[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2068,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/optimization_methods (6 term)/task6_gorishniy.ipynb,"3.5
An error occurred while executing the following cell:
------------------
answer = clf.predict(X_test)
res = ' '.join(""%.2f"" % x for x in answer)
with open(""1.txt"", 'w') as txt1:
    txt1.write(res)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-5-eb9614dfb919>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0manswer[0m [0;34m=[0m [0mclf[0m[0;34m.[0m[0mpredict[0m[0;34m([0m[0mX_test[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      2[0m [0mres[0m [0;34m=[0m [0;34m' '[0m[0;34m.[0m[0mjoin[0m[0;34m([0m[0;34m""%.2f""[0m [0;34m%[0m [0mx[0m [0;32mfor[0m [0mx[0m [0;32min[0m [0manswer[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      4[0m     [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2069,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/parallel_data_processing (7 term)/3/task_3_diagrams.ipynb,"3.5
An error occurred while executing the following cell:
------------------
pca = PCA(n_components=10)
pca.fit(X)

i = 0
total_ratio = 0
for ratio in pca.explained_variance_ratio_:
    i += 1
    total_ratio += ratio
    if (total_ratio >= 0.9):
        break

res = ""%d"" % (i)
print(res)
with open(""1.txt"", 'w') as txt1:
    txt1.write(res)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-e89efc10776b>[0m in [0;36m<module>[0;34m()[0m
[1;32m     12[0m [0mres[0m [0;34m=[0m [0;34m""%d""[0m [0;34m%[0m [0;34m([0m[0mi[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     13[0m [0mprint[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m     15[0m     [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2070,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/parallel_data_processing (7 term)/4/task_4_diagrams.ipynb,"3.5
An error occurred while executing the following cell:
------------------
with open(""1.txt"", ""w"") as txt1: 
        txt1.write(""%d %d"" % (df['Sex'].value_counts()['male'], df['Sex'].value_counts()['female']))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-4-2b3f1d02632f>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m""w""[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      2[0m         [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0;34m""%d %d""[0m [0;34m%[0m [0;34m([0m[0mdf[0m[0;34m[[0m[0;34m'Sex'[0m[0;34m][0m[0;34m.[0m[0mvalue_counts[0m[0;34m([0m[0;34m)[0m[0;34m[[0m[0;34m'male'[0m[0;34m][0m[0;34m,[0m [0mdf[0m[0;34m[[0m[0;34m'Sex'[0m[0;34m][0m[0;34m.[0m[0mvalue_counts[0m[0;34m([0m[0;34m)[0m[0;34m[[0m[0;34m'female'[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2071,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/parallel_data_processing (7 term)/1/task_1_diagrams.ipynb,"3.5
An error occurred while executing the following cell:
------------------
tp = np.sum((y_true == 1) & (y_pred == 1))
fp = np.sum((y_true == 0) & (y_pred == 1))
fn = np.sum((y_true == 1) & (y_pred == 0))
tn = np.sum((y_true == 0) & (y_pred == 0))
res = ""%d %d %d %d"" % (tp, fp, fn, tn)
print(res)
with open(""1.txt"", 'w') as txt1:
    txt1.write(res)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-f4f595679128>[0m in [0;36m<module>[0;34m()[0m
[1;32m      5[0m [0mres[0m [0;34m=[0m [0;34m""%d %d %d %d""[0m [0;34m%[0m [0;34m([0m[0mtp[0m[0;34m,[0m [0mfp[0m[0;34m,[0m [0mfn[0m[0;34m,[0m [0mtn[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      6[0m [0mprint[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m'w'[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      8[0m     [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2072,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/mipt/parallel_data_processing (7 term)/5/task_5_diagrams.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import numpy             as np
import pandas            as pd
import matplotlib.pyplot as plt
import skimage           as skim
import scipy.linalg      as lin

from sklearn.cluster import KMeans
from skimage.io      import imread

%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-e74e01cfb45b>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0;32mimport[0m [0mpandas[0m            [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[1;32m      5[0m [0;32mimport[0m [0mmatplotlib[0m[0;34m.[0m[0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0;32mimport[0m [0mskimage[0m           [0;32mas[0m [0mskim[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0;32mimport[0m [0mscipy[0m[0;34m.[0m[0mlinalg[0m      [0;32mas[0m [0mlin[0m[0;34m[0m[0m
[1;32m      8[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'skimage'
ImportError: No module named 'skimage'

Executability                            : False
"
2074,/mnt/fit-Knowledgezoo/jupyternotebooks/StrausMG@learning/python/pandas.ipynb,"3.5
An error occurred while executing the following cell:
------------------
with open(""1.txt"", ""w"") as txt1:
    txt1.write(res)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-7-ee19d6f9d85e>[0m in [0;36m<module>[0;34m()[0m
[0;32m----> 1[0;31m [0;32mwith[0m [0mopen[0m[0;34m([0m[0;34m""1.txt""[0m[0;34m,[0m [0;34m""w""[0m[0;34m)[0m [0;32mas[0m [0mtxt1[0m[0;34m:[0m[0;34m[0m[0m
[0m[1;32m      2[0m     [0mtxt1[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0mres[0m[0;34m)[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: '1.txt'
PermissionError: [Errno 13] Permission denied: '1.txt'

Executability                            : False
"
2099,/mnt/fit-Knowledgezoo/jupyternotebooks/atremblay@AMRAP/Opens2017/17.2/Julia Shaw/Julia Shaw.ipynb,"3.6
An error occurred while executing the following cell:
------------------
E = 72000. # modulus [MPa]
ν = 0.33   # Poisson's coefficient

nx = [[6,6,12,12,24,24],[18,36,36,72,72,144]]
ny = [[6,12,12,24,24,48],[6,6,12,12,24,24]]

#test many nodes
#nx = [50,100]
#ny = [50,50]

# list of gammas
γ_v = [0.0, 0.1, 0.25, 0.5, 0.75, 1.0, 2.0, 4.0, 6.0, 9.0]

#test
#γ_v = [0.0, .5, 2.0, 6.0]


if len(nx[0]) == len(ny[0]) and len(nx[1]) == len(ny[1]):
    for i, a in enumerate(a_l):
        for j in range(len(nx[i])):
            for γ_act in γ_v:
                write_inp_file(a, b, h, nx[i][j], ny[i][j], E, ν, γ_act)
else:
    print(""nx and ny vector lenghts don't match"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-5-b6e6f3624f41>[0m in [0;36m<module>[0;34m[0m
[1;32m     20[0m         [0;32mfor[0m [0mj[0m [0;32min[0m [0mrange[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mnx[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m             [0;32mfor[0m [0mγ_act[0m [0;32min[0m [0mγ_v[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 22[0;31m                 [0mwrite_inp_file[0m[0;34m([0m[0ma[0m[0;34m,[0m [0mb[0m[0;34m,[0m [0mh[0m[0;34m,[0m [0mnx[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m[[0m[0mj[0m[0;34m][0m[0;34m,[0m [0mny[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m[[0m[0mj[0m[0;34m][0m[0;34m,[0m [0mE[0m[0;34m,[0m [0mν[0m[0;34m,[0m [0mγ_act[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     23[0m [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m     24[0m     [0mprint[0m[0;34m([0m[0;34m""nx and ny vector lenghts don't match""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m<ipython-input-3-15bfa5d739ef>[0m in [0;36mwrite_inp_file[0;34m(a, b, h, nx, ny, E, ν, γ, num_modes, num_vects, max_iter)[0m
[1;32m     52[0m     [0mfilename[0m [0;34m=[0m [0mbasename[0m[0;34m+[0m[0;34m'.inp'[0m[0;34m[0m[0;34m[0m[0m
[1;32m     53[0m [0;34m[0m[0m
[0;32m---> 54[0;31m     [0moutfile[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m""wt""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     55[0m [0;34m[0m[0m
[1;32m     56[0m     [0moutfile[0m[0;34m.[0m[0mwrite[0m[0;34m([0m[0;34m""** Lab 08 input file - buckling of plate under compression and shear\n""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'cs_a06_nx006_ny006_g000.inp'
PermissionError: [Errno 13] Permission denied: 'cs_a06_nx006_ny006_g000.inp'

Executability                            : False
"
2100,/mnt/fit-Knowledgezoo/jupyternotebooks/tentrillion@ipython_notebooks/CodeReview_125255.ipynb,"3.6
An error occurred while executing the following cell:
------------------
maxD = 60.0
maxF = 20000.
plt.figure(figsize=(16,10), dpi=300)

plt.plot(d1,f1*4, 'o-', label='fine')
plt.plot(d2,f2*4, '^-', ms=12, label='coarse')
plt.plot(d3,f3*4, 'h-', ms=12, label='coarse 2')

plt.xlim([0,maxD])
plt.ylim([-500,maxF])
plt.xticks(np.arange(0.0,maxD+1,5))
plt.yticks(np.arange(-500.0,maxF+.5,1000))
plt.title('Hinged Roof - Force displacement relation',fontsize=18, fontweight='bold')
plt.xlabel('Node $y$ displacement $[mm]$', fontsize=16)
plt.ylabel('Force $y$ $[N]$', fontsize=16)
plt.legend(loc='lower right', shadow=True)
plt.grid()
plt.savefig('Lab04.jpg')
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
[0;32m<ipython-input-5-1d8e32e94ee0>[0m in [0;36m<module>[0;34m[0m
[1;32m     16[0m [0mplt[0m[0;34m.[0m[0mlegend[0m[0;34m([0m[0mloc[0m[0;34m=[0m[0;34m'lower right'[0m[0;34m,[0m [0mshadow[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     17[0m [0mplt[0m[0;34m.[0m[0mgrid[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 18[0;31m [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m'Lab04.jpg'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/pyplot.py[0m in [0;36msavefig[0;34m(*args, **kwargs)[0m
[1;32m    714[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    715[0m     [0mfig[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 716[0;31m     [0mres[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    717[0m     [0mfig[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mdraw_idle[0m[0;34m([0m[0;34m)[0m   [0;31m# need this if 'transparent=True' to reset colors[0m[0;34m[0m[0;34m[0m[0m
[1;32m    718[0m     [0;32mreturn[0m [0mres[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, transparent, **kwargs)[0m
[1;32m   2178[0m             [0mself[0m[0;34m.[0m[0mpatch[0m[0;34m.[0m[0mset_visible[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2179[0m [0;34m[0m[0m
[0;32m-> 2180[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2181[0m [0;34m[0m[0m
[1;32m   2182[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2012[0m [0;34m[0m[0m
[1;32m   2013[0m         [0;31m# get canvas object and print method for format[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2014[0;31m         [0mcanvas[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_get_output_canvas[0m[0;34m([0m[0mformat[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2015[0m         [0mprint_method[0m [0;34m=[0m [0mgetattr[0m[0;34m([0m[0mcanvas[0m[0;34m,[0m [0;34m'print_%s'[0m [0;34m%[0m [0mformat[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2016[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/matplotlib/backend_bases.py[0m in [0;36m_get_output_canvas[0;34m(self, fmt)[0m
[1;32m   1954[0m         raise ValueError(
[1;32m   1955[0m             [0;34m""Format {!r} is not supported (supported formats: {})""[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1956[0;31m             .format(fmt, "", "".join(sorted(self.get_supported_filetypes()))))
[0m[1;32m   1957[0m [0;34m[0m[0m
[1;32m   1958[0m     def print_figure(self, filename, dpi=None, facecolor=None, edgecolor=None,

[0;31mValueError[0m: Format 'jpg' is not supported (supported formats: eps, pdf, pgf, png, ps, raw, rgba, svg, svgz)
ValueError: Format 'jpg' is not supported (supported formats: eps, pdf, pgf, png, ps, raw, rgba, svg, svgz)

Executability                            : False
"
2112,/mnt/fit-Knowledgezoo/jupyternotebooks/stitchfix@Algorithms-Notebooks/Long-Tails.ipynb,"3.6
An error occurred while executing the following cell:
------------------
# In R, I exported the dataset from package 'ISLR' to an Excel file
df = pd.read_excel('Data/Default.xlsx')

# Note: factorize() returns two objects: a label array and an array with the unique values.
# We are only interested in the first object. 
df['default2'] = df.default.factorize()[0]
df['student2'] = df.student.factorize()[0]
df.head(3)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, filepath_or_buffer)[0m
[1;32m    390[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 391[0;31m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    392[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'xlrd'

During handling of the above exception, another exception occurred:

[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-2-00ebe670de53>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;31m# In R, I exported the dataset from package 'ISLR' to an Excel file[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mdf[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mread_excel[0m[0;34m([0m[0;34m'Data/Default.xlsx'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      3[0m [0;34m[0m[0m
[1;32m      4[0m [0;31m# Note: factorize() returns two objects: a label array and an array with the unique values.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;31m# We are only interested in the first object.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    186[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    187[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 188[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    189[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0;34m[0m[0m
[1;32m    190[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    186[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    187[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 188[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    189[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0;34m[0m[0m
[1;32m    190[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36mread_excel[0;34m(io, sheet_name, header, names, index_col, parse_cols, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, keep_default_na, verbose, parse_dates, date_parser, thousands, comment, skip_footer, skipfooter, convert_float, mangle_dupe_cols, **kwds)[0m
[1;32m    348[0m [0;34m[0m[0m
[1;32m    349[0m     [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mExcelFile[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 350[0;31m         [0mio[0m [0;34m=[0m [0mExcelFile[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mengine[0m[0;34m=[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    351[0m [0;34m[0m[0m
[1;32m    352[0m     return io.parse(

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, engine)[0m
[1;32m    651[0m         [0mself[0m[0;34m.[0m[0m_io[0m [0;34m=[0m [0m_stringify_path[0m[0;34m([0m[0mio[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    652[0m [0;34m[0m[0m
[0;32m--> 653[0;31m         [0mself[0m[0;34m.[0m[0m_reader[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_engines[0m[0;34m[[0m[0mengine[0m[0;34m][0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_io[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    654[0m [0;34m[0m[0m
[1;32m    655[0m     [0;32mdef[0m [0m__fspath__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py36/lib/python3.6/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, filepath_or_buffer)[0m
[1;32m    391[0m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0;34m[0m[0m
[1;32m    392[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 393[0;31m             [0;32mraise[0m [0mImportError[0m[0;34m([0m[0merr_msg[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    394[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    395[0m             [0;32mif[0m [0mxlrd[0m[0;34m.[0m[0m__VERSION__[0m [0;34m<[0m [0mLooseVersion[0m[0;34m([0m[0;34m""1.0.0""[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: Install xlrd >= 1.0.0 for Excel support
ImportError: Install xlrd >= 1.0.0 for Excel support

Executability                            : False
"
2115,/mnt/fit-Knowledgezoo/jupyternotebooks/jbwhit@jupyter-tips-and-tricks/deliver/03-Pandas-and-Plotting.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# Read in some data to show some real world exampled
df = pd.read_excel(""https://github.com/chris1610/pbpython/blob/master/data/sample-salesv3.xlsx?raw=true"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, **kwds)[0m
[1;32m    351[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 352[0;31m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0m
[0m[1;32m    353[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'xlrd'

During handling of the above exception, another exception occurred:

[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-3-ca6bfba6883c>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;31m# Read in some data to show some real world exampled[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 2[0;31m [0mdf[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mread_excel[0m[0;34m([0m[0;34m""https://github.com/chris1610/pbpython/blob/master/data/sample-salesv3.xlsx?raw=true""[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    176[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    177[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0m
[0;32m--> 178[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    179[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0m
[1;32m    180[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/util/_decorators.py[0m in [0;36mwrapper[0;34m(*args, **kwargs)[0m
[1;32m    176[0m                 [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    177[0m                     [0mkwargs[0m[0;34m[[0m[0mnew_arg_name[0m[0;34m][0m [0;34m=[0m [0mnew_arg_value[0m[0;34m[0m[0m
[0;32m--> 178[0;31m             [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    179[0m         [0;32mreturn[0m [0mwrapper[0m[0;34m[0m[0m
[1;32m    180[0m     [0;32mreturn[0m [0m_deprecate_kwarg[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36mread_excel[0;34m(io, sheet_name, header, names, index_col, usecols, squeeze, dtype, engine, converters, true_values, false_values, skiprows, nrows, na_values, parse_dates, date_parser, thousands, comment, skipfooter, convert_float, **kwds)[0m
[1;32m    305[0m [0;34m[0m[0m
[1;32m    306[0m     [0;32mif[0m [0;32mnot[0m [0misinstance[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mExcelFile[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 307[0;31m         [0mio[0m [0;34m=[0m [0mExcelFile[0m[0;34m([0m[0mio[0m[0;34m,[0m [0mengine[0m[0;34m=[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    308[0m [0;34m[0m[0m
[1;32m    309[0m     return io.parse(

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/excel.py[0m in [0;36m__init__[0;34m(self, io, **kwds)[0m
[1;32m    352[0m             [0;32mimport[0m [0mxlrd[0m[0;34m[0m[0m
[1;32m    353[0m         [0;32mexcept[0m [0mImportError[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 354[0;31m             [0;32mraise[0m [0mImportError[0m[0;34m([0m[0merr_msg[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    355[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    356[0m             [0mver[0m [0;34m=[0m [0mtuple[0m[0;34m([0m[0mmap[0m[0;34m([0m[0mint[0m[0;34m,[0m [0mxlrd[0m[0;34m.[0m[0m__VERSION__[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m"".""[0m[0;34m)[0m[0;34m[[0m[0;34m:[0m[0;36m2[0m[0;34m][0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: Install xlrd >= 0.9.0 for Excel support
ImportError: Install xlrd >= 0.9.0 for Excel support

Executability                            : False
"
2166,/mnt/fit-Knowledgezoo/jupyternotebooks/DELabUW@szkola-letnia-2015/zajecia/dzien1_czesc2_wykresy_start.ipynb,"3.5
RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =            3     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f= -2.23631D+00    |proj g|=  1.63430D+00

At iterate    5    f= -2.23662D+00    |proj g|=  6.93942D-01

At iterate   10    f= -2.24577D+00    |proj g|=  2.06362D+00

At iterate   15    f= -2.25525D+00    |proj g|=  1.70535D-01

At iterate   20    f= -2.26299D+00    |proj g|=  1.14851D+01

At iterate   25    f= -2.28726D+00    |proj g|=  3.44734D-01

At iterate   30    f= -2.28816D+00    |proj g|=  3.13610D-02

At iterate   35    f= -2.28817D+00    |proj g|=  1.55076D-02

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    3     35     57      1     0     0   1.551D-02  -2.288D+00
  F =  -2.2881675302817315     

CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             

 Cauchy                time 0.000E+00 seconds.
 Subspace minimization time 0.000E+00 seconds.
 Line search           time 0.000E+00 seconds.

 Total User time 0.000E+00 seconds.

RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =            9     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f= -2.06355D+00    |proj g|=  4.02690D+01

At iterate    5    f= -2.13103D+00    |proj g|=  2.13138D-01

At iterate   10    f= -2.13780D+00    |proj g|=  2.96358D+00

At iterate   15    f= -2.17842D+00    |proj g|=  1.26508D+00

At iterate   20    f= -2.18186D+00    |proj g|=  4.05429D+00

At iterate   25    f= -2.18365D+00    |proj g|=  3.67702D-02

At iterate   30    f= -2.18389D+00    |proj g|=  7.87436D-01

At iterate   35    f= -2.18559D+00    |proj g|=  5.37962D-02

At iterate   40    f= -2.18568D+00    |proj g|=  5.54285D-02

At iterate   45    f= -2.18655D+00    |proj g|=  8.28836D-01

At iterate   50    f= -2.18771D+00    |proj g|=  5.64060D-02

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    9     50     67      1     0     0   5.641D-02  -2.188D+00
  F =  -2.1877105331795215     

STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 

 Cauchy                time 0.000E+00 seconds.
 Subspace minimization time 0.000E+00 seconds.
 Line search           time 0.000E+00 seconds.

 Total User time 0.000E+00 seconds.

RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =            3     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f= -2.23631D+00    |proj g|=  1.63430D+00

At iterate    5    f= -2.23662D+00    |proj g|=  6.93942D-01

At iterate   10    f= -2.24577D+00    |proj g|=  2.06362D+00

At iterate   15    f= -2.25525D+00    |proj g|=  1.70535D-01

At iterate   20    f= -2.26299D+00    |proj g|=  1.14851D+01

At iterate   25    f= -2.28726D+00    |proj g|=  3.44734D-01

At iterate   30    f= -2.28816D+00    |proj g|=  3.13610D-02

At iterate   35    f= -2.28817D+00    |proj g|=  1.55076D-02

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    3     35     57      1     0     0   1.551D-02  -2.288D+00
  F =  -2.2881675302817315     

CONVERGENCE: REL_REDUCTION_OF_F_<=_FACTR*EPSMCH             

 Cauchy                time 0.000E+00 seconds.
 Subspace minimization time 0.000E+00 seconds.
 Line search           time 0.000E+00 seconds.

 Total User time 0.000E+00 seconds.

RUNNING THE L-BFGS-B CODE

           * * *

Machine precision = 2.220D-16
 N =            9     M =           10

At X0         0 variables are exactly at the bounds

At iterate    0    f= -2.06355D+00    |proj g|=  4.02690D+01

At iterate    5    f= -2.13103D+00    |proj g|=  2.13138D-01

At iterate   10    f= -2.13780D+00    |proj g|=  2.96358D+00

At iterate   15    f= -2.17842D+00    |proj g|=  1.26508D+00

At iterate   20    f= -2.18186D+00    |proj g|=  4.05429D+00

At iterate   25    f= -2.18365D+00    |proj g|=  3.67702D-02

At iterate   30    f= -2.18389D+00    |proj g|=  7.87436D-01

At iterate   35    f= -2.18559D+00    |proj g|=  5.37962D-02

At iterate   40    f= -2.18568D+00    |proj g|=  5.54285D-02

At iterate   45    f= -2.18655D+00    |proj g|=  8.28836D-01

At iterate   50    f= -2.18771D+00    |proj g|=  5.64060D-02

           * * *

Tit   = total number of iterations
Tnf   = total number of function evaluations
Tnint = total number of segments explored during Cauchy searches
Skip  = number of BFGS updates skipped
Nact  = number of active bounds at final generalized Cauchy point
Projg = norm of the final projected gradient
F     = final function value

           * * *

   N    Tit     Tnf  Tnint  Skip  Nact     Projg        F
    9     50     67      1     0     0   5.641D-02  -2.188D+00
  F =  -2.1877105331795215     

STOP: TOTAL NO. of ITERATIONS REACHED LIMIT                 

 Cauchy                time 0.000E+00 seconds.
 Subspace minimization time 0.000E+00 seconds.
 Line search           time 0.000E+00 seconds.

 Total User time 0.000E+00 seconds.

Executability                            : True
Reproducibility                          : number of matched cells: 3 ; number of cells: 21
Reproducibility                          : matched ratio: 0.143 ; index of matched cells: [4, 6, 12]
-------------------------------------------
Source Code of a Unmatched Cell 0
-------------------------------------------
%matplotlib inline

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
import statsmodels.tsa.api as smt
sns.set(style='ticks', context='talk')


-----------------
Original output:
/Users/mikemull/anaconda/envs/hamilton/lib/python3.5/site-packages/IPython/html.py:14: ShimWarning: The `IPython.html` package has been deprecated. You should import from `notebook` instead. `IPython.html.widgets` has moved to `ipywidgets`.
  ""`IPython.html.widgets` has moved to `ipywidgets`."", ShimWarning)

Executed output:

-------------------------------------------
Source Code of a Unmatched Cell 1
-------------------------------------------
sigma_h = 10.0
h = np.random.normal(0, sigma_h, 110)
h[0] = 0.0
a = np.cumsum(h)

df = pd.DataFrame(a[0:100], columns=['a'])
_=df.plot(figsize=(14,6), style='b--')

-----------------
Original output:
iVBORw0KGgoAAAANSUhEUgAAA0gAAAF+CAYAAAC4WzpCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xd4FOX2B/DvpkBCTaihhBZACIRegqCgFEUpKk0xCogF
MVzkCqIiXrFdUUGlo+JFBAUVpf5AkCpNiggookCkE2pAAiF1f38cxklI2zKz7+zu9/M8eWbYMnuA
ze6ced/3HJvdbreDiIiIiIiIEKA6ACIiIiIiIqtggkRERERERHQDEyQiIiIiIqIbmCARERERERHd
wASJiIiIiIjoBiZIRERERERENyhNkPbv348+ffqgadOmuP/++7Fnzx63jpeUlITJkycjKSnJoAiJ
Csb3HKnA9x2pwPcdqcD3HamgLEFKS0vD008/jd69e2Pnzp2Ii4vD008/jZSUFJePeenSJUyZMgWX
Ll0yMFKi/PE9RyrwfUcq8H1HKvB9RyooS5C2bduGwMBA9OvXD4GBgejVqxfKli2LDRs2qAqJiIiI
iIj8nLIEKSEhAVFRUTluq1mzJhISEhRFRERERERE/k5ZgpSSkoLQ0NAct4WGhuL69euKIiIiIiIi
In8XpOqF80qGUlJSUKxYMYeen5SUlGs+qjb6dOrUKQQHBxsTKFEBEhMT/9nyPUeewvcdqcD3HanA
9x2ZITMzEwkJCahcuTKKFCmS476wsDDY7Ha7XUVgGzduxOuvv47Vq1f/c1v37t0xfPhwdOrUqdDn
T548GVOmTDEzRCIiIiIi8iPx8fHqRpBiY2ORlpaGefPmoV+/fli0aBEuXryIdu3aOfT8uLg4dOvW
LcdtJ0+exODBg9G69Ty89VaEGWETEREREZEXS0xMxMMPP4xZs2ahSpUqOe4LCwtTlyAVKVIEH3/8
MV555RVMnDgR1atXx/Tp0xESEuLQ88PDwxEeHp7jNm3odfnyCMyYURUOztYjIiIiIiI/U6NGDVSt
WjXX7coSJACoW7cu5s+fb/hx//4bmD8feOwxww9NREREREQ+TFkVO7NNn646AiIiIiIi8jY+mSDd
fz/w4YeAmvITRERERETkrZROsTPLxIlAHtMJiYiIiIiICuSTI0hERERERESuYIJERERERER0AxMk
IiIiIiKiG3w+QTpyBPjzT9VREBERERGRN/DpBOn554FatYCXXlIdCREREREReQOfTpDq1ZNS34sW
AadOqY6GiIiIiIiszqcTpAcfBMLCgMxM4JNPVEdDRERERERW55N9kDTFigEDBwIffAB89JFMtQvy
6b8xEREREZExDh/O+/aoKGMfn9/9eVm+fDlmzZqFkydPAgDuvvtujBs3zvEDOMDn04UhQyRBOnkS
WLYMuO8+1REREREREVlf7dp53263G/v4/O6/2cmTJzF27FjMmTMHDRs2xOHDh9G3b1907doVsbGx
jh3EAT6fIN1yC9C7NxAZCTRurDoaIiIiIiJyRcWKFbFs2TJUrlwZly5dQlJSEkqXLo0zZ84Y+jo+
nyABwNdfq46AiIiIiMi7HDpkrccHBgZiwYIFWLhwIYoXL47o6GhkZGTA7ugQlIP8IkEiIiIiIiLn
OLM2yBOPX758OVauXIklS5agTJkyAIBOnTo5dxAHMEEiIiIiIiLLS05ORlBQEIKCgpCWlobPPvsM
J0+eRHp6uqGvwwSJiIiIiIgs7/7778fWrVtxxx13IDQ0FC1btkTnzp2RkJBg6Ov4ZYK0ejVQpgzQ
vLnqSIiIiIiIyBFFixbFhx9+aPrr+HSj2LyMGAF06QLExzteUpCIiIiIiPyD3yVI99wj223bgK++
UhsLERERERFZi98lSJ0760nS6NHA9etq4yEiIiIiIuvwuwQJAN59FwgMBI4eBTwwjZGIiIiIiLyE
XyZI0dHAU0/J/pw5QGam2niIiIiIiMga/LKKHQC8+ipQubIUbQgMVB0NERERERFZgd8mSOXLA2PG
qI6CiIiIiIisxC+n2BEREREREeWFCRIREREREdENTJCySUsDMjJUR0FERERERKowQbph0SKgQQPg
009VR0JERERERKowQbphwQLg0CHg9deB1FTV0RARERERkQpMkG4YNw4ICABOnAA++UR1NERERERE
pAITpBvq1gUeflj233oLuH5dbTxEREREROR5TJCyGTtWmsaeOgV8/LHqaIiIiIiIyNOYIGVTpw4Q
FyfbyEjV0RARERERkacFqQ7Aaj78ECheHAjivwwRERERkd9hGnCT0qVVR0BERERERKpwih0RERER
EdENTJCIiIiIiIhuYIJUiJQU4OefVUdBRERERESewASpAGvWAFFRQNeuwNWrqqMhIiIiIiKzMUEq
QFQUcO4ccPYsMH266miIiIiIiMhsTJAKUKMG8Nhjsv/OOxxFIiIiIiLydUyQCjFmDBAcLCNJU6eq
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

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 2
-------------------------------------------
sigma_e = 15.
e = np.random.normal(0, sigma_e, 110)
df['y'] = a[0:100] + e[0:100]
_=df.plot(figsize=(14,6), style=['b--', 'g-',])

-----------------
Original output:
iVBORw0KGgoAAAANSUhEUgAAA0gAAAF+CAYAAAC4WzpCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xl8VPW9//HXZF8gK4FACAECIjsoIFiRxbUqrlW72Ird
rJYu12t/3ttebbV6216vS6tFbau1Fm+17jtuiCJiERVF9hDCHkI2ErJnZn5/HL5nZrJMZpKZzCR5
Px8PH0xmOfMlhsn5nM/ydbjdbjciIiIiIiJCTKQXICIiIiIiEi0UIImIiIiIiBynAElEREREROQ4
BUgiIiIiIiLHKUASERERERE5TgGSiIiIiIjIcWENkDZs2MAVV1zBrFmzOPvss3nyyScBqKmpYdmy
ZcyaNYvFixfz9NNPh+T9qqqquO+++6iqqgrJ8US6op85iQT93Ekk6OdOIkE/dxIJYQuQampq+OEP
f8jSpUvZsGED9957L3fffTfr1q3jv/7rv0hNTWXdunXce++93HnnnXz++ec9fs/q6mruv/9+qqur
Q/A3EOmafuYkEvRzJ5GgnzuJBP3cSSSELUA6ePAgCxcu5LzzzgNg0qRJnHLKKXzyySesWrWKH//4
x8THxzNt2jSWLFnC888/H66liIiIiIiIBCRsAdKJJ57I7373O/vro0ePsmHDBgDi4uLIy8uzHxsz
ZgzFxcXhWoqIiIiIiEhAemVIQ21tLddddx1Tp07llFNOITEx0efxpKQkGhsbe2MpIiIiIiIinYoL
9xvs27eP6667joKCAu655x6Kiopobm72eU5jYyMpKSlBHbeqqqpdParJQh08eJD4+PieLVwkAKWl
pfaf+pmT3qKfO4kE/dxJJOjnTsLB6XRSXFzMiBEjSEhI8HksIyMDh9vtdofrzTdv3sz3vvc9Lrro
Im666SYA6urqOOWUU3jrrbfIzc0F4Pbbb8fhcPCLX/wi4GPfd9993H///WFZt4iIiIiIDDzLli0L
X4BUXl7OhRdeyLe//W2++93v+jz24x//mMTERH7961+zY8cOvv/97/OnP/2JadOmBXz8jjJIBw4c
4Dvf+Q6PP/64HXyJiIiIiIgYpaWlfOMb3+Dhhx/2mYsAVgYpbCV2zzzzDFVVVSxfvpw//vGPADgc
Dr71rW9x++23c8stt7BgwQJSU1O56aabggqOADIzM8nMzPS5z6Rec3NzGTlyZGj+IiIiIiIi0u+M
Hj26w5ghbAHStddey7XXXtvp4/fee2+43lpERERERKRbemWKnYiIiIiISF+gAElEREREROQ4BUgi
IiIiIiLHKUASERERERE5TgGSiIiIiIjIcQqQREREREREjlOAJCIiIiIicpwCJBERERERkeP6ZYC0
vXx7pJcgIiIiIiJ9UL8MkG5991bcbneklyEiIiIiIn1MXKQXEA7r9q/j2a3PctmkyyK9FBERERGR
PmnXro7vLywM7fM7e7wjr7zyCg8//DAHDhwA4Nxzz+XWW28N/AAB6JcBEsANb9zAl8d/mZT4lEgv
RURERESkzxk3ruP7OyvU6u7zAy38OnDgADfffDOPPfYYU6ZMYdeuXVxxxRV8+ctfZu7cuYEdJAD9
ssQuLiaOvUf3cufaOyO9FBERERERCYFhw4bx8ssvM2XKFKqrq6mqqiI9PZ3Dhw+H9H36ZQbp6ulX
89DOh/jt2t+ydMZSCjIKIr0kEREREZE+pagoup4fGxvLk08+yTPPPENqaiqTJk2itbU15LMH+mWA
9ONTfsyzB57lSP0Rfvbmz/jn5f+M9JJERERERPqUYHqDeuP5r7zyCitXruTFF18kKysLgDPPPDO4
gwSgX5bYpSWm8ZszfgPAU1ueYnXJ6sguSEREREREeuTYsWPExcURFxdHc3Mzf/7znzlw4AAtLS0h
fZ9+GSABXDPzGmaNmAXAj1/7Ma2u1givSEREREREuuuSSy5h3LhxLFq0iMWLF7NlyxbOOussiouL
Q/o+/bLEDiDGEcMfzv0Dpz5yKpvKNvHQhof44ZwfRnpZIiIiIiLSDYmJifz+978P+/v02wwSwLz8
eXxz2jcBuPmdm6mor4jwikREREREJJr16wAJ4Ldn/pbU+FSqGqu4+Z2bI70cERERERGJYv0+QBox
eAQ3n24FRg99/BCflX4W4RWJiIiIiEi06vcBEsBP5/6UcVnjcLld/HbtbyO9HBERERERiVIDIkBK
jEvkOzO/A6AMkoiIiIiIdGpABEgAJw45EYCiyiKN/BYRERERkQ4NuACpxdXC7qrdEV6NiIiIiIhE
owETII3NHEusIxaAbeXbIrwaERERERGJRgMmQEqITaAwqxCA7RXbI7waERERERGJRgMmQAKYkD0B
UAZJREREREQ6NiADJGWQRERERESkI3GRXkBvMoMalEESEREREelcs7OZfUf39cp75afnkxCb0OXz
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
RW5urr+nQ0RERERE5DO/A6T58+dDr9dj6tSpNrdnZ2dj3rx5GDlyJABg7Nix6N69O44fP47z58/j
3LlzuP/++6HT6TBhwgSMGDECn3zyib+nQ0RERERE5LMgdw8wmUyoqKhocLtGo0F4eDi2bduG2NhY
PPHEEzb3jx07FmPHjpW/z8rKwvnz59GnTx+kp6ejc+fOCA4Olu/v3r070tLS/HktREREREREfnEb
IB0+fBiLFy+GRqOxub1Tp07Yt28fYmNj3T5JXl4efv/73+PWW29F7969cebMGRgMBpvHGI1G5Ofn
e3n6RERERERE6nEbII0ePRqnT5/2+QlSU1OxdOlSTJ48Gc888wwAKRiqrq62eVxlZSVCQ0M9Pm5h
YSGKiopsbsvOzgYA7mUiIiIiIiKHRKyQkZGB2tpam/uio6PdB0j+OHDgAB555BGkpKRg0aJF8u09
evRAdnY2amtrodfrAQDp6ekYNWqUx8fevn07Nm3a5PC+u+66y6/zJiIiIiKi1u2ee+5pcFtKSkrg
AqRz587hoYcewrp16zB9+nSb+5KSkpCUlISXXnoJDz74IA4ePIgjR45gzZo1Hh9/wYIFmDFjhs1t
aWlpWLZsGd58801069ZNlddB5EpWVhYWLVqErVu3IjExsalPh9oIXnfUFHjdUVPgdUeBYDKZkJaW
hk6dOtn0RAACnEF6++23UV1djVWrVmHlypUApMYOTzzxBObOnYtNmzZh1apVGDNmDGJjY/HCCy+g
Y8eOHh8/JiYGMTExDu/r1KkTunTposrrIHJFpGXj4+N5zVGj4XVHTYHXHTUFXncUKK6SKaoFSM89
95zN988++yyeffZZp49PSEjAG2+8odbTExERERER+c3vOUhEREREREStBQMkIiIiIiKierrVq1ev
buqTUJPBYMDIkSNhNBqb+lSojeA1R02B1x01BV531BR43VFj01gsFktTnwQREREREVFzwBI7IiIi
IiKiegyQiIiIiIiI6jFAIiIiIiIiqscAiYiIiIiIqB4DJCIiIiIionoMkIiIiIiIiOoxQCIiIiIi
IqrXagKk1NRUzJ07F0OGDMHs2bNx7Nixpj4laoWOHj2KefPmYfjw4Zg6dSree+89AEBJSQlSUlIw
fPhwTJ48GR988EETnym1NpcvX8aYMWPw5ZdfAuA1R4GVl5eH++67D8OGDcOkSZPw9ttvA+B1R4H1
ww8/YM6cORg2bBimTZuGjz/+GACvO2p8QU19AmqoqanB0qVLsWzZMtx222348MMPsXTpUuzbt49T
l0k1JSUluP/++/HMM89g+vTpSE1NxeLFi9G1a1e8++67CAsLw8GDB/Hzzz9jyZIl6NWrFwYOHNjU
p02txMqVK1FcXCx/v2rVKl5zFDDLli3D6NGjsXnzZqSnp2P+/PkYMGAA3nzzTV53FBBmsxkpKSlY
s2YNpkyZgqNHj2LRokUYOnQo/vSnP/G6o0bVKjJIhw4dgk6nw+233w6dToc5c+agffv28korkRou
XbqESZMmYfr06QCAfv364frrr8cPP/yAL774Ag8++CD0ej0GDhyI5ORkfPjhh018xtRa7NixA2Fh
YYiPjwcAVFRUYN++fbzmKCCOHTuGgoICPProo9BqtUhKSsJ7772HuLg4XncUMCUlJSgsLERtbS0A
QKPRQK/XQ6vV8rqjRtcqAqS0tDQkJSXZ3Na9e3ekpaU10RlRa9SnTx88//zz8vfFxcU4evQoACAo
KAidO3eW7+P1R2pJT0/H//zP/2D16tWwWCwAgMzMTOj1el5zFBCnTp1Cz549sX79eowbNw4333wz
fvrpJxQXF/O6o4CJjo7GnXfeiUceeQTXXXcdfvOb3+Dpp59GYWEhrztqdK0iQKqsrGxQSmc0GlFV
VdVEZ0StXWlpKZYuXYoBAwbg+uuvR0hIiM39BoOB1x/5zWQyYfny5XjqqacQGRkp315RUcFrjgKm
uLgY3333Hdq1a4f9+/fjueeew9q1a1FeXs7rjgLGYrHAYDBg48aNOHbsGLZs2YJ169ahrKyM1x01
ulYRIDkKhiorKxEaGtpEZ0StWVZWFu68807ExMRg48aNCA0NRU1Njc1jqqqqeP2R31555RX07dsX
48aNs7ndaDTymqOACQ4ORnR0NJYsWYKgoCAMGTIEU6ZMwcaNG3ndUcB89tlnOHHiBKZMmYKgoCBM
nDgRkyZN4nVHTaJVBEg9evRAenq6zW3p6eno2bNnE50RtVanTp3C7bffjvHjx+OVV15BcHAwunXr
htraWuTm5sqPS09Pb1D2SeSt//znP/j0008xcuRIjBw5Ejk5OXj44Yexf/9+XnMUMN27d0ddXZ1c
0glIG+j79evH644CJicnp0EgFBQUhOuuu47XHTW6VhEgjRo1CjU1NXjnnXdQV1eHDz74AFevXm2w
6krkj8uXL2PJkiW4++67sXz5cvn2sLAwTJ48GRs2bEBVVRWOHz9tkJDyAAABZ0lEQVSOjz/+GMnJ
yU14ttQa/Oc//8GRI0dw+PBhHD58GAkJCfjrX/+KZcuW8ZqjgBk7diyMRiM2bdoEk8mEH374AXv3
7sW0adN43VHAjBkzBj///DP+9a9/AQAOHz6MvXv3YsaMGbzuqNFpLMolohbs7NmzePrpp3Hu3Dl0
69YNq1evZvtHUtWrr76KF198EUajUV5Z1Wg0WLhwIe6++248/fTTOHjwIMLCwvDAAw9g9uzZTXzG
1NrceOONePrppzFx4kQUFxfjmWee4TVHAZGVlYU1a9bgxIkTCA8PxwMPPIBZs2bxuqOA2r9/P158
8UVcvHgRCQkJ+MMf/oAbb7yR1x01ulYTIBEREREREfmrVZTYERERERERqYEBEhERERERUT0GSERE
RERERPUYIBEREREREdVjgERERERERFSPARIREREREVE9BkhERERERET1GCARERERERHVY4BERERE
RERU7/8BaThzWOLzmvEAAAAASUVORK5CYII=

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 3
-------------------------------------------
_=df.y.plot(figsize=(14,6), style=['g-',])

-----------------
Original output:
iVBORw0KGgoAAAANSUhEUgAAA0gAAAF+CAYAAAC4WzpCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xl4HOWZLvy7F+3Wvli2JEuybLxibLCNIRgvBAgkBkJY
kmucDAlhCIzDl5NhDjMnAzMQmCSTE8IZtoSZTDaYCVnALAEHCBgcY2MbMN5t2fIiy5a17y211F3f
H6X37epWL1XV1apu6f5dFxdyq5fXlrq6nnqW16EoigIiIiIiIiKC0+4FEBERERERJQsGSERERERE
RKMYIBEREREREY1igERERERERDSKARIREREREdEoBkhERERERESjEhog7dq1C7fccguWLl2Kq666
Cs8//zwAoKenBxs2bMDSpUuxdu1a/P73v7fk9To7O/H444+js7PTkucjioW/c2QH/t6RHfh7R3bg
7x3ZIWEBUk9PD/72b/8Wt912G3bt2oXHHnsMjz76KLZt24Z/+qd/Qk5ODrZt24bHHnsMP/zhD7Fn
z564X7OrqwtPPPEEurq6LPgbEMXG3zmyA3/vyA78vSM78PeO7JCwAOnMmTNYvXo1rr32WgDA/Pnz
cfHFF+Ojjz7C22+/jXvuuQdpaWlYtGgR1q1bh40bNyZqKURERERERLokLECaO3cufvCDH8g/d3d3
Y9euXQAAt9uNiooK+b3a2lo0NDQkailERERERES6jMuQht7eXtx11104//zzcfHFFyMjIyPo+5mZ
mRgcHByPpRAREREREUXkTvQLNDY24q677kJ1dTV+/OMf4+jRo/B6vUH3GRwcRHZ2tqHn7ezsHFOP
KrJQZ86cQVpaWnwLJ9KhublZ/p+/czRe+HtHduDvHdmBv3eUCD6fDw0NDZg+fTrS09ODvldQUACH
oihKol58//79uOOOO3D99dfjvvvuAwD09/fj4osvxltvvYXy8nIAwMMPPwyHw4HvfOc7up/78ccf
xxNPPJGQdRMRERER0eSzYcOGxAVIbW1tuO666/C1r30NX//614O+d8899yAjIwPf/e53ceTIEfzN
3/wNnnnmGSxatEj384fLIDU1NeH222/Hc889J4MvIiIiIiIiobm5GX/1V3+Fn/3sZ0FzEQA1g5Sw
Ers//OEP6OzsxFNPPYUnn3wSAOBwOPCVr3wFDz/8MB544AGsWrUKOTk5uO+++wwFRwBQWFiIwsLC
oNtE6rW8vByVlZXW/EWIiIiIiGjCqampCRszJCxAuvPOO3HnnXdG/P5jjz2WqJcmIiIiIiIyZVym
2BEREREREaUCBkhERERERESjGCARERERERGNYoBEREREREQ0igESERERERHRKAZIREREREREoxgg
ERERERERjWKARERERERENGpCBkiH2w7bvQQiIiIiIkpBEzJAevDdB6Eoit3LICIiIiKiFDMhA6Rt
p7fhhYMv2L0MIiIiIiJKMRMyQAKAb7/xbQwMD9i9DCIiIiIiSiETMkByO9041X0KP9z6Q7uXQkRE
REREKWRCBkh/fcFfAwC+v/X7ONl10ubVEBERERFRqpiQAdI9F9+D0uxSDI4M4u/f/Hu7l0NERERE
RCliQgZIeRl5+N4V3wMA/O7A77D5xGZ7F0RERERERClhQgZIAPDVJV/F0ulLAQD3vH4PRvwjNq+I
iIiIiIiS3YQNkJwOJ/79M/8OANjbshc/3fVTm1dERERERETJbsIGSABwSdUl+PKiLwMA7n/nfrQP
tNu8IiIiIiIiSmYTOkACgO9/+vvISctB52An7n/nfruXQ0RERERESWzCB0jTc6fj/svVwOinH/4U
nzR/YvOKiIiIiIgoWU34AAkAvrXiW5hVNAt+xY/vb/2+3cshIiIiIqIkNSkCpAx3Bm5fcjsAMINE
REREREQRTYoACQDmlswFABztOMqR30REREREFNakC5CG/cM43nnc5tUQEREREVEymjQB0szCmXA5
XACAQ22HbF4NERERERElo0kTIKW70lFXVAcAONx+2ObVEBERERFRMpo0ARIAzCmeA4AZJCIiIiIi
Cm9SBkjMIBERERERUTiTKkASgxqYQSIiIiIionAmVYA0p0TNILUNtKHD02HzaoiIiIiIKNlMqgBJ
ZJAA4HAby+yIiIiIiCjYpAqQSrJLUJRVBIBldkRERERENNakCpCAQBaJgxqIiIiIiCjUpAuQOOqb
iIiIiIgimbQBEjNIREREREQUatIFSKLE7mjHUQz7hm1eDRERERERJZNJFyCJUd8j/hEc7zpu82qI
iIiIiCiZ2BogHThwADfffDOWLFmCz3/+8/jkk08S/pp1hXVwO90A2IdERERERETBbAuQvF4v7rrr
Ltx0003YtWsX1q9fj7vuugsejyehr5vmSsPMwpkAuBcSEREREREFsy1A2r59O1wuF2699Va4XC58
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

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 5
-------------------------------------------
pd.DataFrame({'y_sim': ys.flatten(), 'a_sim': ah.flatten()}).plot(figsize=(12,6))

-----------------
Original output:
<matplotlib.axes._subplots.AxesSubplot at 0x1112ae438>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
j2H69On4wQ9+gN27d3fLD0FERERE1JOClnPs378fq1atajeOOiMjA7t27UJycrLf4+rr6zF16lSs
Xr0aTz31FD777DP88pe/xI4dOzBs2LCuOXsiIiIioggIGkRPnz4dp06dCvuJx40bh5dffln+ft68
eZg2bRo+++yzkILompoa1NbW+mwrKioCAJSWloZ9PkREREREoZLizQsXLqC1tdXnMZPJ1HXdOdra
u3cvLl26hFtvvVXeZrPZEBMTE9Lx27ZtwzPPPOP3sR/+8Iddco5ERERERB2566672m1bt25d9wXR
CoUCjz32GHJycjBhwgS8++67OHbsGB599NGQjl++fDkWL17ssy0/Px9r167Fli1bMGjQoO44bYpi
hYWFWLlyJbZu3YqsrKxInw71Irw2KBBeG9QRXh/9m8PhQH5+PjIyMqDRaHwe69ZM9NSpU/Gb3/wG
DzzwAMrLy5GdnY0XXngBKSkpIR1vNpthNpv9PpaRkYHMzMyuPF3qA6RbLWlpabw+yAevDQqE1wZ1
hNcHdZS07bIg+pFHHmm3benSpVi6dGlXvQQRERERUa/Asd9ERERERGFiEE1EREREFCblxo0bN0b6
JMKh1WoxZcoU6HS6SJ8K9UK8PigQXhsUCK8N6givDwpEcLlcrkifBBERERFRNGE5BxERERFRmBhE
ExERERGFiUE0EREREVGYGEQTEREREYWJQTQRERERUZgYRBMRERERhYlBNBERERFRmKImiM7Ly8Mt
t9yCCRMm4KabbsLRo0cjfUoUQQcPHsSyZctw9dVXY8GCBXjttdcAAPX19Vi3bh2uvvpqzJkzB6+/
/nqEz5QipbKyEjNmzMDnn38OgNcGAWVlZfiP//gPTJo0CbNnz8Zf//pXALw2SHT48GEsXboUkyZN
wsKFC/HOO+8A4PVBgakifQKhsNlsWLNmDdauXYubb74Zb731FtasWYNdu3ZxglA/VF9fj5/97Gd4
8MEHsWjRIuTl5WHVqlUYOHAg/v73v8NgMGDv3r04efIkVq9ejeHDh2Ps2LGRPm3qYb/5zW9QV1cn
f/8///M/vDb6ubVr12L69Ol47rnnUFBQgDvuuANjxozBli1beG30c06nE+vWrcOmTZswf/58HDx4
ECtXrsTEiRPx6KOP8vogv6IiE71v3z4olUrceuutUCqVWLp0KRITE+UME/UvxcXFmD17NhYtWgQA
GDVqFKZOnYrDhw/j008/xc9//nOo1WqMHTsWS5YswVtvvRXhM6ae9uqrr8JgMCAtLQ0A0NTUhF27
dvHa6MeOHj2KiooK/Od//icUCgWGDh2K1157DSkpKbw2CPX19aipqUFraysAQBAEqNVqKBQKXh8U
UFQE0fn5+Rg6dKjPtuzsbOTn50fojCiScnNz8dhjj8nf19XV4eDBgwAAlUqFAQMGyI/xOul/CgoK
8PLLL2Pjxo1wuVwAgIsXL0KtVvPa6MdOnDiBnJwc/OEPf8DMmTNx/fXX49tvv0VdXR2vDYLJZMLt
t9+OX/3qVxg9ejR+9KMfYcOGDaipqeH1QQFFRRDd3NzcrmxDp9PBarVG6Iyot2hoaMCaNWswZswY
TJ06FTExMT6Pa7VaXif9iMPhwPr16/Hb3/4WcXFx8vampiZeG/1cXV0dvvnmGyQkJGD37t145JFH
8PDDD6OxsZHXBsHlckGr1eLpp5/G0aNH8fzzz2Pz5s2wWCy8PiigqAii/QXMzc3N0Ov1EToj6g0K
Cwtx++23w2w24+mnn4Zer4fNZvPZx2q18jrpR5599lmMHDkSM2fO9Nmu0+l4bfRzGo0GJpMJq1ev
hkqlwoQJEzB//nw8/fTTvDYIH330EY4fP4758+dDpVJh1qxZmD17Nq8P6lBUBNFDhgxBQUGBz7aC
ggLk5ORE6Iwo0k6cOIFbb70V1157LZ599lloNBoMGjQIra2tKC0tlfcrKChoVwpEfdf777+P9957
D1OmTMGUKVNQUlKCe++9F7t37+a10c9lZ2fDbrfLJT6AuJhs1KhRvDYIJSUl7YJllUqF0aNH8/qg
gKIiiJ42bRpsNhu2b98Ou92O119/HdXV1e2yTdQ/VFZWYvXq1bjzzjuxfv16ebvBYMCcOXPw+OOP
w2q14tixY3jnnXewZMmSCJ4t9aT3338fBw4cwP79+7F//36kp6fjT3/6E9auXctro5+75pproNPp
8Mwzz8DhcODw4cP45JNPsHDhQl4bhBkzZuDkyZN48803AQD79+/HJ598gsWLF/P6oIAEl/fH8l7s
zJkz2LBhA86ePYtBgwZh48aNbC/TT7344ot48sknodPp5KySIAhYsWIF7rzzTmzYsAF79+6FwWDA
Pffcg5tuuinCZ0yRMnfuXGzYsAGzZs1CXV0dHnzwQV4b/VhhYSE2bdqE48ePw2g04p577sH3v/99
XhsEANi9ezeefPJJXL58Genp6fjlL3+JuXPn8vqggKImiCYiIiLePjM7AAAAV0lEQVQi6i2iopyD
iIiIiKg3YRBNRERERBQmBtFERERERGFiEE1EREREFCYG0UREREREYWIQTUREREQUJgbRRERERERh
YhBNRERERBQmBtFERERERGH6/6nhN1BEHJwiAAAAAElFTkSuQmCC

Executed output:
<matplotlib.axes._subplots.AxesSubplot at 0x7f054d1996d8>

-------------------------------------------
Source Code of a Unmatched Cell 7
-------------------------------------------
df['filtered_state'] = r.filtered_state[0][1:101]
df[['a', 'y', 'filtered_state']].plot(figsize=(14,6), style=['r--', 'g-', 'b.'])

-----------------
Original output:
<matplotlib.axes._subplots.AxesSubplot at 0x10e5519b0>iVBORw0KGgoAAAANSUhEUgAAA0gAAAF+CAYAAAC4WzpCAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAALEgAACxIB0t1+/AAAIABJREFUeJzs3Xd4VGX6//H3pBdaIIFACL1IB6ULAlHs4KqrbtEV++qi
6+7q2lYQRFfXr51FXcu6ir9dCygiioUuIEVBEKSEEEoghDTS+/z+ODknM8kkmSSTzCT5vK7Li+TM
mTMPmDL3uctjs9vtdkRERERERAQ/by9ARERERETEVyhAEhERERERKacASUREREREpJwCJBERERER
kXIKkERERERERMopQBIRERERESnXqAHS9u3bufbaaxk9ejQXXngh77//PgBZWVnMnj2b0aNHExcX
x0cffeSR18vIyODll18mIyPDI9cTqY2+5sQb9HUn3qCvO/EGfd2JNzRagJSVlcUf/vAHZs2axfbt
23nhhRd47rnn2Lx5M3/7298IDw9n8+bNvPDCCzzzzDPs2rWrwa+ZmZnJwoULyczM9MDfQKR2+poT
b9DXnXiDvu7EG/R1J97QaAHSiRMnmDp1KpdeeikAgwcPZty4cfzwww+sXr2ae+65h8DAQIYPH86M
GTP45JNPGmspIiIiIiIibmm0AOmss87i6aeftj4/c+YM27dvByAgIICYmBjrsd69e5OQkNBYSxER
EREREXFLkwxpyM7O5s4772TYsGGMGzeO4OBgp8dDQkIoKChoiqWIiIiIiIhUK6CxX+DYsWPceeed
9OzZk+eff574+HiKioqczikoKCAsLKxO183IyKhSj2pmoU6cOEFgYGDDFi7ihuTkZOtPfc1JU9HX
nXiDvu7EG/R1J42htLSUhIQEunXrRlBQkNNjHTp0wGa32+2N9eJ79uzhtttu44orruCBBx4AIDc3
l3HjxvHNN98QHR0NwIIFC7DZbDzyyCNuX/vll19m4cKFjbJuERERERFpfWbPnt14AVJqaiozZ87k
5ptv5tZbb3V67J577iE4OJjHH3+cAwcOcPvtt/Ovf/2L4cOHu319VxmkpKQkbrnlFt577z0r+BIR
ERERETElJyfz29/+ljfffNNpLgIYGaRGK7FbsmQJGRkZLFq0iH/+858A2Gw2fve737FgwQLmzJnD
lClTCA8P54EHHqhTcAQQERFBRESE0zEz9RodHU337t098xcREREREZEWp1evXi5jhkYLkO644w7u
uOOOah9/4YUXGuulRURERERE6qVJptiJiIiIiIg0BwqQREREREREyilAEhERERERKacASURERERE
pJwCJBERERERkXIKkERERERERMopQBIRERERESmnAElERERERKRciwyQ9qfu9/YSRERERESkGWqR
AdK8dfOw2+3eXoaIiIiIiDQzAd5eQGPYfHwzS39eytWDr/b2UkRERESkuTh0yPXxvn09e351j7uw
YsUK3nzzTZKSkgC4+OKLmTdvntvPl7prkQESwJ+/+jOX9L+EsMAwby9FRERERJqDfv1cH6+uMqm+
57tZ6ZSUlMSjjz7KO++8w9ChQzl06BDXXnstl1xyCePHj3frGlJ3LbLELsAvgKNnjvLMxme8vRQR
ERERkXrp0qULn332GUOHDiUzM5OMjAzat2/PqVOnvL20Fq1FZpBuHHEjrx18jac2PsWskbPo2aGn
t5ckIiIiIr4uPt6nzvf39+f9999nyZIlhIeHM3jwYEpKStRr38haZIB0z7h7WJq0lNN5p7n/6/v5
4JoPvL0kEREREfF1degNaorzV6xYwcqVK/n000/p2LEjABdccEHdXlPqrEWW2LULbsffz/87AB/u
/ZC1iWu9uyARERERkTrKyckhICCAgIAAioqKeP3110lKSqK4uNjbS2vRWmSABHDTqJsY3W00APd8
cQ8lZSVeXpGIiIiIiPuuvPJK+vXrx7Rp04iLi2Pv3r1Mnz6dhIQEby+tRWuRJXYAfjY/Xrr4JSa+
NZHdKbt5bftr/GHsH7y9LBERERERtwQHB/Piiy96exmtTovNIAFMiJ3ADcNvAODRNY+Slpfm5RWJ
iIiIiIgva9EBEsBTFzxFeGA4GQUZPLrmUW8vR0REREREfFiLD5C6te3Go+cZgdFr37/Gj8k/enlF
IiIiIiLiq1p8gARw7/h76dexH2X2Mp7a+JS3lyMiIiIiIj6qVQRIwQHB3DLqFgBlkEREREREpFot
MkD6xz+g8nj4syLPAiA+PV4jv0VERERExKUWGSC98grMnet8zAyQisuKOZxx2AurEhERERERX9ci
AySALVucP+8T0Qd/mz8A+1L3eWFFIiIiIiLi61psgDRunPPnQf5B9O3YF4D9afu9sCIREREREfF1
LTJAuusumDev6vGBnQYCyiCJiIiIiIhrLTJAuv9+CAysetwMkJRBEhERERERVwK8vYCmZA5qUAZJ
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

Executed output:
<matplotlib.axes._subplots.AxesSubplot at 0x7f054d1462b0>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

-------------------------------------------
Source Code of a Unmatched Cell 8
-------------------------------------------
p = r.predict(90, 115, dynamic=20)
s_f = pd.Series(p.results.forecasts[0][1:])
s_y = pd.Series(y)
pd.DataFrame({'y':s_y, 'f':s_f}).iloc[-25:].plot(figsize=(12,6))

-----------------
Original output:
<matplotlib.axes._subplots.AxesSubplot at 0x11122d6d8>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
VV5erjfeeMPqkmGR/ubK7Nmz9dZbb6m+vl6FhYVWlwiLPf3009qzZ4/uv//+0Fh7e7sOHTo04Fqy
b98+3X333UpPT1d6erruu+8+vf7661Z9BETRSOZLfX29CgoKrCoZFulvrkhSTU2NHnjggT7jUu/a
UlFRoUmTJsnpdOqnP/2p/vKXv0Sr5C81AvYQBAIBORyOsDGbzaZ33nlHCQkJys7ODo3n5ubK5XJF
u0TEiIHmSkNDg44fP65jx47pm9/8psrKyrR9+3b5/X6LKoVVVq5cqTfeeEPXX399aKyhoUF2u33A
tcTlcmn69OlhxxoaGqJWM6wzkvly/PhxXbx4UStWrNDChQu1fv16NTY2Rr12RFd/c0WSCgoKdOjQ
IS1btqxPa5nb7Q5bW/Ly8sgwJiFgD8E3vvEN1dbW6sCBA+ru7taRI0dUXV2tjo4OjRs3Luxch8Mh
n89nUaWw2kBzpaurS5MmTVJZWZn279+vl156Sf/85z/1xz/+0eqSEWVXX311n7HB1pKOjo6wX9wc
DocCgYC6urpGt1hYbiTzJTExUXPmzNFzzz2nAwcOKDk5WevWrYtKvbBOf3NFkiZMmKDExMR+j/W3
tnR3dysQCIxKjV8lBOwhyMnJ0R/+8Af96U9/0k033aR9+/Zp6dKlSkhI6PMDzufzKTk52aJKYbWB
5sqECRP01FNPqaKiQg6HQ1OnTtXPfvYzvf3221aXjBiQlJR0xbXki7+4+3w+xcfHD/hDE19ug82X
yspKbdmyRZMmTVJqaqo2bNig2tpaNTc3W1EuYpjD4VBnZ2fotc/nU2JiouLiiIeR4n9wCC5fvqzM
zEy9+eabqq6u1u9//3u53W7ddttt8vv98nq9oXPdbrfy8/MtrBZWGmiuFBUVafv27bp8+XLoXJ/P
1+cuFL6acnJyrriW5Ofnh33z3+Vysc58hQ02X3bt2qX6+vrQsc7OTtlsNtYb9JGXl8faMkoI2EPQ
1tamH/7wh6qvr1dXV5f27t0rr9erJUuWqKysTDt37pTP51NdXZ3++te/qry83OqSYZGB5kpZWZkO
HjyoqqoqdXd36/Tp03rmmWf0ve99z+qSEQNSUlL6XUuWL18uSVq+fLl2796txsZGNTc3a9euXVqx
YoXFVcMqg80Xt9ut7du3q62tTZcuXdJjjz2mb33rWxo/frzFlSPWLF++XM8++6waGxvV1NSkZ599
lrXFJAlWFzAWZGdna8uWLVq7dq0uXLigoqIiPffcc3I4HPrd736nhx9+WIsXL1ZKSoo2bNigmTNn
Wl0yLHKlufL0009r69atKi0tlcPh0J133qkf//jHVpeMGNHfWnLDDTdIklatWqWWlhatXLlSfr9f
t912myoqKqwtGJa60nzZvHmztm3bpqVLl6q7u1u33HKLfvvb31pcMWKBzWYLe33XXXeptbU1tLbc
fvvtuuuuuyyq7svFZnzxK6UAAAAARowWEQAAAMBEBGwAAADARARsAAAAwEQEbAAAAMBEBGwAAADA
RARsAAAAwEQEbAAAAMBEBGwAAADARARsAAAAwET/D6bZfBHLHFBMAAAAAElFTkSuQmCC

Executed output:
<matplotlib.axes._subplots.AxesSubplot at 0x7f054d15a748>

-------------------------------------------
Source Code of a Unmatched Cell 9
-------------------------------------------
df_indpro = pd.read_csv('./data/pydata_chicago/INDPRO.csv', parse_dates=['DATE'])
df_indpro.set_index('DATE', inplace=True)
df_indpro.head()
_ =df_indpro.plot(figsize=(10,6))

-----------------
Original output:
iVBORw0KGgoAAAANSUhEUgAAAmEAAAGRCAYAAAAtj2TPAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz
AAALEgAACxIB0t1+/AAAIABJREFUeJzs3XlA1HX+x/HnAMMplyCggogoHiimkrd5ZLdXZbWVlq1Z
af5qa2vd7i07tnZt3bTWbTus7HZbM83ySPPWvO8TUBARkVuugZnfH6OTE6jAAMPxevyz8/3M9/uZ
97cte/X5fr6fj8FisVgQERERkTrl4uwCRERERJoihTARERERJ1AIExEREXEChTARERERJ1AIExER
EXEChTARERERJ6hSCNu1axeDBg2yHZ86dYqHH36YPn36MHDgQF5++WVMJpPt+xkzZtCvXz/69OnD
q6++iqOrYWRlZTFr1iyysrIc6qc+awr3CE3jPnWPjUNTuEdoGvepe2w8Gst9VjqEzZ8/n4kTJ1Ja
Wmpre+KJJ2jZsiVr167l22+/Zffu3bzzzjsAzJs3j9WrV7No0SK+//57tm7dygcffOBQsdnZ2cye
PZvs7GyH+qnPmsI9QtO4T91j49AU7hGaxn3qHhuPxnKflQphc+bMYd68eUyePNnWZjKZ8PHxYfLk
yRiNRoKCghg5ciTbt28HYOHChdx7770EBQURFBTEgw8+yDfffFM7dyEiIiLSwFQqhI0dO5YFCxbQ
tWtXW5vRaGTOnDkEBQXZ2lauXEnnzp0BSEhIoH379rbvoqKiSEpKqqGy69aPP/7o7BJqne6x8WgK
96l7bByawj1C07hP3WP1VCqEBQcHX/acl19+mcTERB544AEACgsL8fT0tH3v6emJ2WympKSkmqU6
z9KlS51dQq3TPTYeTeE+dY+NQ1O4R2ga96l7rB43RzsoLi7mySef5PDhw8ybN4/AwEDAGrqKiops
5xUVFeHq6oq7u3ul+s3Kyir3rDchIQGA1NRUjEajo6VXWkFBASkpKXXyW2lpabb/baz3CM65z6Zw
j6C/X2taU7hH0D+TtUl/v9a8hvL3a1lZGQkJCbRq1apc/gkICMBQlQ28N2/ezKOPPsqGDRsAyMnJ
4f7776dZs2a89dZb+Pr62s69/fbbufvuuxk9ejRgHcZ75513+Pbbbyv1W7NmzWL27NmVLU1ERESk
wZg6dapjI2FTp06lRYsWzJo1C1dXV7vvRo0axfvvv0/fvn1xdXXl3XffZcyYMZXue9y4cYwYMcKu
7cSJE0ycOJFPP/2UsLAwR0oXERERqVVpaWncfffdvP/++7Ru3druu4CAgOqHsO3bt7NlyxY8PDyI
j4/HYDAAEBsbyyeffMJdd93FmTNnGDt2LCaTidGjRzNhwoRK9x8YGGh7tHne+SHHsLAwwsPDq1u6
iIiISJ1p27ZthbmlSo8jnS0lJYWrr76aFStWKISJiIhIvXa53KJti0REREScQCFMRERExAkUwkRE
REScQCFMRERExAkUwkREREScQCFMRERExAkUwkREREScQCFMRERExAkc3sBbREREpDLGjx/P9ddf
j7e3N8888wyfffYZV1xxhe37zZs388gjj7Bx40YAOnXqhJeXFwaDAYvFQrNmzRg6dChPPPEEfn5+
ADz11FN89913uLu7285r2bIl99xzD3fccQcAw4YN48yZM7YtFi0WC4GBgdx+++089NBDtt/PzMzk
n//8JytXriQvL4+QkBBuuOEGJk+ejIeHR43/9dBImIiIiNQ5s9nMtGnTKCoqsms/vw3i+c/z589n
27ZtbN++nfnz55Oens4DDzxgd80999zDtm3b2Lp1K9u2bePll1/m1VdfZd26dbZz3nrrLbZt22br
65VXXuGdd95h7dq1ALatFktKSvj888/Zvn07c+bMYd++fYwfP57S0tIa/2ugkTAREZFGxFRqJiO7
sE5+KzjAC6Nb9cZzOnXqhLu7O6+++iovvfRShedYLBYu3F0xNDSUN998k0GDBrFq1SqGDBlS4XU9
evSgQ4cOHDp0iAEDBlR4Tr9+/YiJieHw4cMMHDiQt956i5iYGF577TXbOVFRUcyePZuRI0fy2Wef
cc8991TrXi9GIUxERKSRMJWaeej1FaRnFtTJ74U092bOtKurFcTc3Nx44403uPnmmxk+fDhXXXVV
pa7z9vamZ8+ebN26tcIQVlpaypo1azhy5Ai9e/eusA+z2cwPP/zA4cOH6dOnDwA///wzjz/+eLlz
3d3dGTFiBMuXL1cIExERkcahbdu2PP744zz99NMsXry40tf5+/uTk5NjO543bx7z58+3HUdERPDS
Sy8RGxtra3vsscdwc3OjpKQEk8lEv379ePvtt+nSpQsAGRkZtGjRosLfa9GiBRkZGVW9vctSCBMR
EWkkjG4uzJl2dYN4HHne+PHjWblyJc8//zx33313pa7JysqidevWtuNx48bxpz/96ZLX/OMf/2Dw
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

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 10
-------------------------------------------
from statsmodels.tsa.statespace.structural import UnobservedComponents

indpro_mod = UnobservedComponents(df_indpro.INDPRO,
                                  level=True,
                                  trend=True,
                                  stochastic_level=True,
                                  stochastic_trend=True)
indpro_res = indpro_mod.fit(method='powell', disp=False)
#indpro_res.summary()

-----------------
Original output:

Executed output:
/home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/statsmodels/tsa/base/tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  % freq, ValueWarning)

-------------------------------------------
Source Code of a Unmatched Cell 11
-------------------------------------------
fig, ax = plt.subplots(figsize=(10,5))

fres = indpro_res.get_forecast('2018-06-01')
df_indpro.ix['2009-01-01':].plot(ax=ax)
fres.predicted_mean.plot()
fres_ci = fres.conf_int()
_=ax.fill_between(fres_ci.index, fres_ci['lower INDPRO'], fres_ci['upper INDPRO'], alpha=0.1)

-----------------
Original output:
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
SktLm3t730khTEREpIuwmI0sWTC9UzyOPOHaa69lzZo1PPDAA1xzzTVNOsZut5Oenh76PHv2bP7n
f/7nW4958sknmTp1KuXl5fziF7/AaDQyceLE0PaUlBQOHz7c6LGHDh0iJSWlSX1rDoUwERGRLsRi
NtIrJTrc3WiWRx99lFmzZhEbG/ud+1ZVVbF161bmzp17StdKSkri6aef5pJLLuGhhx5i4cKFAJx/
/vksW7aMyy+/vN7+brebt956i9mzZ5/S9b6N3o4UERGRsOrZsyf3339/vUeKjSkqKuKee+4hKyuL
s88++5SvFxMTwyOPPEJubi5r164F4LbbbuPQoUMsWLCA4uJigsEge/bs4ZZbbiEhIYGrr776lK93
MhoJExERkXbx9fIT33TxxRfz7rvvsnnz5nr7X3HFFRgMBoxGIwkJCVxwwQXccccdLb7uhAkTyM7O
5te//jUrVqwgPj6e3NxcFi9ezLXXXovD4aBHjx58//vf5+abb8ZisTTrmk3qV/Dr7352cMXFxUyf
Pp3Vq1eTkZER7u6IiIiInNR35RY9jhQREREJA4UwERERkTBQCBMREREJA4UwERERkTBQCBMREREJ
A4UwERERkTBQCBMREREJg2aFsG3btjFlypTQ5yNHjnDrrbcyYcIEJk+ezKJFi/B6vaHtjz/+OGed
dRYTJkzgkUceoROVJBMRERFpU00OYbm5ucydOxefzxdqu+eee+jVqxcffvghy5cvZ/v27fzhD38A
6lY0X7t2LStWrOC///0vn3zyCS+++GLr34GIiIhIJ9SkELZkyRJycnKYN29eqM3r9RIdHc28efOw
WCwkJycza9Ystm7dCsAbb7zBT37yE5KTk0lOTuamm27iX//6V9vchYiIiEgn06QQlp2dzbJlyxg5
cmSozWKxsGTJEpKTk0Nta9asYdiwYQAUFBSQmZkZ2jZgwAD27dvXSt0WERER6dyaFMJSUlK+c59F
ixZRWFjIjTfeCEBtbS02my203WazEQgE8Hg8p9hVERERkc7ju+bCm1t6AbfbzS9+8Qt2795NTk4O
iYmJQF3ocrlcof1cLhcmkwmr1dqk89rtdhwOR722kpKSlnZXREREpF2UO5wAFBUV1XtxESAhIaFl
IayiooLrr7+emJgY/v73vxMbGxvaNmjQIAoLC8nKygLqHk8OGjSoyefOyclh8eLFLemeiIiISFjY
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

Executed output:
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1Mknn1zvNQ6Hg5NPPpknnniClStX7jdq2NQa8jj1pTrf3xV73QwUABP4dp7bm/VcfxLwAYAxxmdZ1snAfcBjQAbRbbdOM8YsaUCfREREUlooHOFH985n597KZHeFrh2yefT2kxMe5H7+858zbdo0nnrqKW6++eYjukdmZiZ5eXns2bPngHPhcJhQKER5eTlvv/027777LkOGDKGgoKDedhUVFcybN493332Xa6+9lvbtv52mv3PnTgB69Ohx0L50794dgB07dqRGiDPGHHIZhjFmJtEttuK93y6i23SJiIhICzZgwADOOussZs6cySWXXBLX3Lj6HKwA7/jx42u+djgcTJo0id/+9reHbAcwdepUfnLzLYeul3GIfiR7hWpTFPsVERGRg3C7nDx6+8kt9nFqtZtvvpm5c+fy6KOPcssttzT4+qqqKkpKShgwYMAB55555hmysrLweDx069atZvHCwdoVFxfz3HPPMXfuXAYNGszVV19T06Zr1+gGU9u2baN/v3713mfHjh37tU0WhTgREZEkc7ucdG6flexuNKpu3boxY8YMnn/+ec4555wGX//RRx8RDocZO3bsAecGDRp00OB2sHbVteceeeRhpkyZWhPIJkyYwEsvvch7771Xb4izbZv58+fTrl07Bg8e3ODPkUjJLXAiIiIircYPfvAD0tPT+ctf/tKg63bt2sUf//hHsrOzufDCC4+6HxHbxulyc+edv8Tn8/H3v/+t5twpp5xK3759efKJJ9iyZcsB1z799NOsX7+eq6+++ogfCyeKRuJERESkSeTl5XHttdfy5z//+aBtNm7cyFdffUU4HGbfvn0sWbKEV155BYCHH36Y/Pz8o+pD7V0ZRo8ezeTJJ/Lqq69y3XXX0a1bd9xuNw8++BeuvfZqLrjgggOK/c6ZM4fTTz+da6+99qj6kQgKcSIiItJkrrzySp5//vl6V5kC3H///UB0a6ycnBz69u3LlVdeyQUXXHDUAQ6+3ZWh2s9+9jM+/vgjHn/8ce6+O7pLaP/+/Zk9Zw7/eOopXn75ZR566CE8Hg8DBw7kd7/7HdOnT0/6bg0AjoOt9Eg1lmWV5OTk5C5evDjZXRERETnA5s2bAejdu3eSe9J6RSKxUbg4OF0OnEex+vRwv99jxoyhvLy89HB7wx9K8mOkiIiISCOzbbtmV4aWQiFOREREWrzq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

-------------------------------------------
Source Code of a Unmatched Cell 13
-------------------------------------------
_=df_esales.logUsage.plot(figsize=(12,4))

-----------------
Original output:
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
TkSuQmCC

Executed output:
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

-------------------------------------------
Source Code of a Unmatched Cell 14
-------------------------------------------
import statsmodels.tsa.api as smt
f=plt.figure(figsize=(12,6))
_=smt.seasonal_decompose(df_esales.Usage).plot()

-----------------
Original output:
<matplotlib.figure.Figure at 0x1121109e8>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
mTNnAqDRaFi8eDFTp05l9uzZ1K9fn4ULF1qt774TNzc33Nzcbrq/UaNGd/3a7e3t8fHxuev9qtvx
it8u8fLyKrfxVdXXWt7HkrkrO5m7spO5K7uqPndV+d9B5q7sZO7K7n7Mnaen5y3rwgovspVKJSdO
nLjpfhcXF+bOnXvbfV577TVee+21W27v27cvffv2veW2hg0b8uOPP5Z9wOXokUceeaCOV56q8mut
yvMGMnf3Quau7GTuyq4qv1aZu6pzvPImc1d2txufwnRjdKIQ5SA2Npa+ffvy+++/4+/vX9nDqVZk
7spO5q7sZO7KTuau7GTuyk7mruwqcu4qrU+2EEIIIYQQNZUqPDw8vLIHIWoerVZLu3btbupTLu5M
5q7sZO7KTuau7GTuyk7mruxk7squouZOlosIIYQQQghRzmS5iBBCCCGEEOVMimwhhBBCCCHKmRTZ
QgghhBBClDMpsoUQQgghhChnUmQLIYQQQghRzqTIFkIIIYQQopxJkS2EEEIIIUQ5kyJbCCGEEEKI
ciZFthBCCCGEEOVMimwhhBBCCCHKmRTZQgghhBBClDMpsoUQQgghhChnUmQLIYQQQghRzqTIFkII
IYQQopxJkS2EEEIIIUQ5kyJbCCGEEEKIclbhRXZkZCRDhgyhdevW9OvXj/Xr11ttN5lMjB49mk8/
/dTq/lmzZtGxY0fat2/PzJkzMZlMlm3r16+nT58+hISEMG7cOFJSUizbTpw4wbBhwwgJCWHw4MFE
RUXd3xcoSEtLY968eaSlpVX2UKodmbuyk7krO5m7spO5KzuZu7KTuSu7ipy7Ci2yjUYjEydOZNy4
cRw6dIjp06czZcoULl++bHnM0qVLiYyMtNpvxYoV7Ny5k/Xr17Nx40YOHTrEsmXLAIiOjiY8PJw5
c+awb98+atWqRVhYGAAGg4Hx48czdOhQDh48yKhRoxg/fjx6vb7iXvQDKD09nfnz55Oenl7ZQ6l2
ZO7KTuau7GTuyk7mruxk7spO5q7sKnLuKrTIzszMJC0tjYKCAgAUCgVqtRqVSgWYC+bVq1fTp08f
q/3Wrl3LM888g06nQ6fT8dJLL7F69Wrg+lns5s2bo9FomDRpErt27SI1NZWIiAhUKhXDhw9HpVIx
ZMgQdDodO3bsqMiXLYQQQgghHjAVWmS7urry1FNP8cYbb9C0aVNGjx7N1KlT8fT0xGAwMGXKFD78
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
1WopLK0iNauUy1dLuVZZQ3dnG9ydbXF3tqG7sy02ViJCSiAQCAQCQdujiLbqly5dQqPREBUVxcqV
K6mqquIPf/gDzz33HCDaqgsMw8TEBFdHG1wdbRjt28PYwxEIBAKBQNCFUURb9eLiYlQqFSdPnuTr
r7/m2rVrPPHEE3Tr1o0VK1aItuoCgUAgEAgEgg6FItqqW1paotVqeeaZZ7C3t8fe3p5HH32UPXv2
sGLFCsW1Vc/MzAREe3WBQCAQCASCroysC16+fFmZbdUHDBiAqakpKpVKt622thY5J1OpbdUXLVpk
8HUEAoFAIBAIBJ2TZcuW3bBNEW3VHRwcmDp1Klu2bGHz5s1UVFTw6aef6lqnK62tukqlIisri4ED
B2JmZniTktdee40XX3zR4OM76vXS09NZunQpu3btom/fvq0wMuXea2tfS8iu+QjZNR8hu+ajdNkp
+XsQsms+QnbNp7Vlp1arefHFF3n55ZextLTU26eYtuqvv/46r7/+OjNmzKCmpoZ58+bx6KOPAspr
qw4wZMiQJt+7ra1tq5b8U+r1ZHeJh4dHq41Pqffa2tcSsms+QnbNR8iu+Shddkr+HoTsmo+QXfNp
C9n16NHjpnphuyvZpqamxMXF3bDd1taWf/7zn42es3r1alavXn3T/dOnT2+0JN/gwYP54osvmj/g
VuSee+7pUtdrTZR8r0qWGwjZtQQhu+YjZNd8lHyvQnbKuV5rI2TXfBobn1Gb0Qg6J6mpqUyfPp0j
R47g6elp7OF0KITsmo+QXfMRsms+QnbNR8iu+QjZNZ/2lJ1pm15dIBAIBAKBQCDogpht2LBhg7EH
Ieh8WFtbM3bs2Ba1r++qCNk1HyG75iNk13yE7JqPkF3zEbJrPu0lOxEuIhAIBAKBQCAQtDIiXEQg
EAgEAoFAIGhlhJItEAgEAoFAIBC0MkLJFggEAoFAIBAIWhmhZAsEAoFAIBAIBK2MULIFAoFAIBAI
BIJWRijZAoFAIBAIBAJBKyOUbIFAIBAIBAKBoJURSrZAIBAIBAKBQNDKCCVbIBAIBAKBQCBoZYSS
LRAIBAKBQCAQtDJCyRYIBAKBQCAQCFoZoWQLBAKBQCAQCAStjFCyBQKBQCAQCASCVkYo2QKBQCAQ
CAQCQSsjlGyBQCAQCAQCgaCVUZSSHRERwf3338+oUaO47777CA4OBqC0tJRVq1YxevRopkyZwv79
+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
RK5CYII=

Executed output:
<Figure size 864x432 with 0 Axes>

-------------------------------------------
Source Code of a Unmatched Cell 15
-------------------------------------------
sdiff = df_esales.logUsage.diff(12) # Seasonal diff
i1_sdiff = sdiff.dropna().diff().dropna()
fig = plt.figure(figsize=(12,8))
ax1 = fig.add_subplot(211)
fig = smt.graphics.plot_acf(i1_sdiff, lags=40, ax=ax1)
ax2 = fig.add_subplot(212)
fig = smt.graphics.plot_pacf(i1_sdiff, lags=40, ax=ax2)

-----------------
Original output:
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
+++/X5MmTepSW4cOHVJTU5OlFggEVFBQIL9/g44dS+7uj4FedOmN7ygx+Zv18gd3J2rTuq49505u
G31f/JAvNWHaFvlGNOrQ3qHa+mqGWg4PtLtb6CNMjl/9cWw69Xjv1H7bxe6xHROzW2lpU1VWVqak
pCTr90z+Y6/Xq9ZW63qfYDCo+Ph4S83j8XRpv+9TXl6u1atXd7+zsIVvROP3bvfVttH3TZi2peNE
mJh8UBOmbSHw9EF2PVcmxy+TselUW1/NCHuenMCp/bZLtIztgoKCsJpRoE5LS1NFRYWlVl9fr5yc
HEstPT1d9fX1HduNjY1qbm4OWy7yffLz85WdnW2pnZyhrq6Whg/vxg9gg127dmnq1CmSpLV/+btG
nN23Z9aragZpb+M3b2mdc9Yg/eON0xNs7Wp7757duvlXsyR17zk2fXx3mbRr12Pt9PgrjTrxH+/v
nZXS2OXxta76Xzr45deTDInJBzXvD5t1w8QJXW770/p6Vb5eLd+I0Tpr8EBN//EFESxn6n/Ps0nb
ps9Vd5kcv0zGpil7x8gPv/ly4VeSur4W1In9duqx06TfYWN7ZKM+/bSne/jd9u2T5s9Xz89QT5w4
UaFQSBUVFcrLy1NVVZUaGxvDlnFkZ2frl7/8pWbPnq3x48dr+fLluvLKKzVkyJAut+Xz+eTz+Sy1
2NhYSdLIkVKyM8aRpGOSvl5jPuLsr5Qy6oS93ell83zndfKx5afnZ7ar7eaWL3XpjTfJN2Ks3vvs
c80bPzTCO6N8JXvGiEm7dj3WPiOTBnV8rPTJ7a72/VDQesLc13Qkop+7quYLJSZ/PSFx8MtW/c//
/SSCj7Tuj89z99s2fa66y+T4ZTI2zfW/MWJ+zO8uZx47Tfr97bE9bvRQRTA3a2zAgK//TUlJUfK3
gqdRoI6Li9OaNWtUVFSk5cuXa9SoUSotLZXH41FxcbFcLpdKSko0duxY3X///br77rt18OBBZWZm
6sEHHzRpGg4xdLAnghN932h747YmJSZfIEna2xjS+o07bPsdoPfkTgkPPF01cvi3Ak+EH5a0r6nN
ss2nl/Ye0+equ0yOXyZjE5HjmH/65E45T+te367PD7Ro7Oih+t3c6FkiY/zR42PGjFFlZWVYfdmy
ZZbt6dOna/r06abNAVGPsNM/2Bl47Ap5/ZETw6mdExnNLcd06Y0PyDdirKpqDmieb0Sf/+wCjvmn
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
rkJggg==

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 16
-------------------------------------------
import statsmodels.api as sm
# Variables
endog = df_esales.logUsage
exog = sm.add_constant(df_esales[['lcoal', 'lgas', 'lpetrol', 'lelec', 'DlINDPRO']])

# Fit the model
ar_mod = smt.statespace.SARIMAX(endog, order=(0,1,0), seasonal_order=(1,1,1,12))
ar_res = ar_mod.fit()
#ar_res.summary()

-----------------
Original output:

Executed output:
/home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/statsmodels/tsa/base/tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  % freq, ValueWarning)

-------------------------------------------
Source Code of a Unmatched Cell 17
-------------------------------------------
ar_p = ar_res.get_prediction('2016-03-01', '2018-03-01', dynamic=True)

fig, ax = plt.subplots(figsize=(10,6))
df_esales.logUsage.plot(ax=ax)
ar_p.predicted_mean.plot(ax=ax)
ar_p_ci = ar_p.conf_int()
_=ax.fill_between(ar_p_ci.index, ar_p_ci['lower logUsage'], ar_p_ci['upper logUsage'], alpha=0.1)

-----------------
Original output:
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
TqcTzz//PFJSUrrcAK0HrcfWv39/fPHFF9ixYwd27NiBt956CwDwySefxLyMhR4/t/Pnz2P16tU4
fPgwXC4X1q9fj9bWVlxxxRV6DiUkPcY3b948bN26FR9//DEURcErr7wCh8OByZMn6zmUIHq9Xp44
cQLnzp3DyJEj9br1bukxthkzZuC1117DV199BbfbjT/+8Y/weDyYMGFCt+fKUY2Ggrz++uuora3F
7373O7zwwgsAvOvWd955J371q1/hF7/4Ba688krY7Xb8+Mc/xqhRowAARUVFOHv2LBYsWACn04l5
8+Zh0aJFALx/mF9//TWuv/56eDweXHXVVXjyySd7xfhGjx4ddI2O+2EKCgrw2GOP4ac//SnOnj2L
iRMn4vHHH4/JePzpMTaj0GNs69evh8vlwpIlSwB4l84EQcBzzz0X8zdFPcY3ffp0fP/738e9996L
hoYGjBs3DuvXr4/5zEwsfi8FQYjLjIweY/vOd76DM2fO4J577kFdXR0uu+wy/OEPfwhKyIoFPcY3
fPhwvPjii3j66aexatUqDB48GOvWrYv5MqFev5cnT55Eeno6ZDl+4YkeY7vllltQX1+PlStXoqGh
AcOHD8f69evDWjYVlHhuTCAiIiKiTnHpk4iIiMigGKgRERERGRQDNSIiIiKDYqBGREREZFAM1IiI
iIgMioEaERERkUExUCMiIiIyKAZqRJQwCgoKUFBQgEOHDgV978svv0RBQQHuvPNOzZ5vx44dOHjw
oO/fBQUFYTVZJiIKFwM1IkooJpMJH3zwQdDx9957D6Ko7UvenXfeidOnT/u+NmpnCiLqvRioEVFC
KSws7DRQGzt2bBzuiIgocgzUiCihXH311fjqq69w6tQp37GDBw+iqakpqOn40aNHsWzZMkyaNAmX
X345Vq9e7Vu6PHnyJAoKCvD+++/j2muvxejRo3Hbbbfh2LFjAICZM2cCAJYsWYK1a9cC8PY7ff31
1zFz5kyMHTsW9957L+rr62MxbCJKUAzUiCih5ObmYtiwYQGzau+99x6uvvrqgKXJc+fOoaioCKmp
qdi0aROeffZZfPjhh3jyyScDrrd27Vo8/vjj2Lx5M2pqavDMM88AADZv3gwAePbZZ7F48WLf4//6
17/id7/7HTZs2IAvv/wSL774op7DJaIEx0CNiBLOrFmzsGXLFt/X77//Pq655pqAx7z99tsQRRGr
V69Gfn4+pkyZgocffhh/+ctf0NDQ4HvcihUrMH78eAwdOhRFRUXYu3cvACAzMxMAkJqaCqvVCsC7
R+2Xv/wlCgoKMHbsWFx33XXYv3+/3sMlogTGQI2IEs7VV1+NHTt2oLGxEUePHsWpU6cwefLkgMeU
lZVh+PDhMJlMvmPjx4+H2+1GeXm579igQYN8/05OTobT6ezyufPy8nz/Tk1NRUtLS7TDIaILmBzv
GyAi0tqwYcMwcOBAfPTRRzh9+jRmzZoVlPGZlJQUdJ7H4wEAuN1u3zH/QA7w7kPritaZpUR0YeMr
ChElpFmzZuHDDz8MuewJABdffDH2798fMEO2a9cuSJLkm0VjuQ0iijcGakSUkK6++mp8/PHHKC8v
x9SpU4O+f+ONN0IURfzsZz/D4cOHsW3bNjz22GO47rrrfPvPups9s9lsOHToEBobG3UZAxERlz6J
KGH4z4CNHTsWdrsdU6ZMgSwHv9RZrVa8/PLLWL16Nb773e8iOTkZ8+bNwwMPPBDyeqEsWrQIv/3t
b1FRUYHZs2drNxAiojaC0t1HRiIiIiKKCy59EhERERkUAzUiIiIig2KgRkRERGRQDNSIiIiIDIqB
GhEREZFBMVAjIiIiMigGakREREQGxUCNiIiIyKAYqBEREREZ1P8HvRm26AbSJMkAAAAASUVORK5C
YII=

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 18
-------------------------------------------
# Fit the model
arx_mod = smt.statespace.SARIMAX(endog[:'2014-03-01'], exog[:'2014-03-01'], order=(0,1,0), seasonal_order=(1,1,1,12))
arx_res = arx_mod.fit()
#arx_res.summary()

-----------------
Original output:
/Users/mikemull/anaconda/envs/hamilton/lib/python3.5/site-packages/statsmodels-0.8.0-py3.5-macosx-10.6-x86_64.egg/statsmodels/base/model.py:489: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals
  ""Check mle_retvals"", ConvergenceWarning)

Executed output:
/home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/statsmodels/tsa/base/tsa_model.py:171: ValueWarning: No frequency information was provided, so inferred frequency MS will be used.
  % freq, ValueWarning)
/home/dabao/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/statsmodels/base/model.py:508: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals
  ""Check mle_retvals"", ConvergenceWarning)

-------------------------------------------
Source Code of a Unmatched Cell 19
-------------------------------------------
arx_p = arx_res.get_prediction('2014-03-01', '2016-03-01', exog=exog.ix['2014-05-01':],dynamic=True)

fig, ax = plt.subplots(figsize=(10,6))
df_esales.logUsage.ix[:'2014-02-01'].plot(ax=ax)
df_esales.logUsage.ix['2014-03-01':].plot(ax=ax, style='k.')
arx_p.predicted_mean.plot(ax=ax)
arx_p_ci = arx_p.conf_int()
_=ax.fill_between(arx_p_ci.index, arx_p_ci['lower logUsage'], arx_p_ci['upper logUsage'], alpha=0.1)

-----------------
Original output:
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
UVZWFrKysvyORdovioiIiKgzBEGA2LRMqWnusHZY9u/fH/369fO/ntbe9sgEd+zYMcycORPbtm1r
82BEREREsVRZVQNNVOBWHeiRndHh69uLW9g6iYiIiCgCkiRC07RO9bD0YkBGREREFAGzyQCXy9Xp
khcAAzIiIiKiiCiKAqfDDoPS+ZR8BmREREREERAEAdA618PSiwEZERERUYTSrGaIIpcsiYiIiHST
mWGLynUYkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHp
jAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBER
ERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4Y
kBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERER
kc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZERERkc4YkBERERHpjAEZ
ERERkc4YkBERERHpjAEZERERkc7CCshKSkowffp038c1NTW44447MHHiRBQUFKCoqCjoudu3b8e1
116LCRMmYMGCBSgpKYn8romIiIi6kJADsqKiIixZsgSqqvqOPfjgg7Bardi+fTuefvppPPnkkwED
rR9++AErV67ETTfdhJ07d2LFihVYunQpKioqovMUREREREkspIBsw4YN2Lx5M1asWOE7Vl9fj23b
tuGuu+6CoigYPXo05syZg+Li4jbnf/zxx8jLy0NhYSFEUcRFF12EMWPG4L333ovekxARERElqZAC
ssLCQhQXF2PkyJG+Y4cPH4aiKOjbt6/v2ODBg1FaWtrmfLfbDZPJ5P/GoojDhw9HeNtEREREXUdI
AVn37t3bHGtoaIDRaPQ7ZjKZ0NjY2Oa1F154Ifbs2YP3338fqqri448/xvbt22G32yO8bSIiIqKu
Q470RLPZDIfD4XessbERFoulzWsHDhyIp59+Gr/5zW+wevVqTJs2DVdeeSVsNlvI71dVVYXq6mq/
Yz/88AMAoLy8PIInICIiIoofb7xy+PBhOJ1Ov89FHJANHDgQTqcT5eXlyMnJAQCUlZUhNze3zWvr
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

Executed output:


-------------------------------------------
Source Code of a Unmatched Cell 20
-------------------------------------------
v_next = []
a_dist = np.random.normal(0, sigma_h, 1000)
a_1 = 0.
for i in range(1000):
    a_next = a_1 + np.random.normal(0, sigma_h)
    v_next.append(a_next + np.random.normal(0, sigma_e))
fig, ax = plt.subplots(figsize=(10,5))
_=sns.distplot(a_dist, color='b', label='alpha', ax=ax)
_=sns.distplot(v_next, color='g', label='vt', ax=ax)

-----------------
Original output:
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

Executed output:


"
2197,/mnt/fit-Knowledgezoo/jupyternotebooks/drorata@drorata.github.io/content/notebooks/Hypothesis-testing.ipynb,"3.5
An error occurred while executing the following cell:
------------------
r = np.linspace(0, 1.4, 200)
plt.plot(r, OA3s(r, z=11), ""b-"", label=""OA 3s"", lw=2)
#plt.plot(r, smooth_3s(r), ""m-"", label=""3s smooth"", lw=2)
ymin, ymax = plt.ylim()
plt.title(""Atomic orbitals"")
plt.xlabel(""r   /   $\AA$"")
plt.ylabel(""wavefunction"")
plt.legend()
plt.savefig(""orbitals_1.pdf"")
plt.plot(r, slater_ns(r, n=3, z=11), ""r-"", label=""Slater 3s"", lw=2)
plt.vlines(0.5, ymin, ymax, lw=2)
plt.fill_between(x=[0, .5], y1=[ymin, ymin], y2=[ymax, ymax], color=""k"", alpha=.15)
plt.annotate(""Core part"", xy=(0.25, 27), horizontalalignment=""center"")
plt.annotate(""Valence part"", xy=(0.9, 27), horizontalalignment=""center"")
plt.savefig(""orbitals_2.pdf"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-9-5c73661dba82>[0m in [0;36m<module>[0;34m()[0m
[1;32m      7[0m [0mplt[0m[0;34m.[0m[0mylabel[0m[0;34m([0m[0;34m""wavefunction""[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      8[0m [0mplt[0m[0;34m.[0m[0mlegend[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 9[0;31m [0mplt[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m""orbitals_1.pdf""[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     10[0m [0mplt[0m[0;34m.[0m[0mplot[0m[0;34m([0m[0mr[0m[0;34m,[0m [0mslater_ns[0m[0;34m([0m[0mr[0m[0;34m,[0m [0mn[0m[0;34m=[0m[0;36m3[0m[0;34m,[0m [0mz[0m[0;34m=[0m[0;36m11[0m[0;34m)[0m[0;34m,[0m [0;34m""r-""[0m[0;34m,[0m [0mlabel[0m[0;34m=[0m[0;34m""Slater 3s""[0m[0;34m,[0m [0mlw[0m[0;34m=[0m[0;36m2[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     11[0m [0mplt[0m[0;34m.[0m[0mvlines[0m[0;34m([0m[0;36m0.5[0m[0;34m,[0m [0mymin[0m[0;34m,[0m [0mymax[0m[0;34m,[0m [0mlw[0m[0;34m=[0m[0;36m2[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/pyplot.py[0m in [0;36msavefig[0;34m(*args, **kwargs)[0m
[1;32m    686[0m [0;32mdef[0m [0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    687[0m     [0mfig[0m [0;34m=[0m [0mgcf[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 688[0;31m     [0mres[0m [0;34m=[0m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    689[0m     [0mfig[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mdraw_idle[0m[0;34m([0m[0;34m)[0m   [0;31m# need this if 'transparent=True' to reset colors[0m[0;34m[0m[0m
[1;32m    690[0m     [0;32mreturn[0m [0mres[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, frameon, transparent, **kwargs)[0m
[1;32m   2095[0m             [0mself[0m[0;34m.[0m[0mset_frameon[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2096[0m [0;34m[0m[0m
[0;32m-> 2097[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2098[0m [0;34m[0m[0m
[1;32m   2099[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2073[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2074[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2075[0;31m                     **kwargs)
[0m[1;32m   2076[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2077[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36mprint_pdf[0;34m(self, filename, dpi, bbox_inches_restore, metadata, **kwargs)[0m
[1;32m   2556[0m             [0mfile[0m [0;34m=[0m [0mfilename[0m[0;34m.[0m[0m_file[0m[0;34m[0m[0m
[1;32m   2557[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2558[0;31m             [0mfile[0m [0;34m=[0m [0mPdfFile[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0mmetadata[0m[0;34m=[0m[0mmetadata[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2559[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2560[0m             [0mfile[0m[0;34m.[0m[0mnewPage[0m[0;34m([0m[0mwidth[0m[0;34m,[0m [0mheight[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36m__init__[0;34m(self, filename, metadata)[0m
[1;32m    431[0m         [0mself[0m[0;34m.[0m[0moriginal_file_like[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0m
[1;32m    432[0m         [0mself[0m[0;34m.[0m[0mtell_base[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0m
[0;32m--> 433[0;31m         [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mcbook[0m[0;34m.[0m[0mto_filehandle[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m""wb""[0m[0;34m,[0m [0mreturn_opened[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    434[0m         [0;32mif[0m [0;32mnot[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    435[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    390[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    391[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 392[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    393[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    394[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'orbitals_1.pdf'
PermissionError: [Errno 13] Permission denied: 'orbitals_1.pdf'

Executability                            : False
"
2199,/mnt/fit-Knowledgezoo/jupyternotebooks/drorata@drorata.github.io/content/notebooks/linear-regression-minimal-example.ipynb,"3.7
Python 3.7.3
An error occurred while executing the following cell:
------------------
fig, axes = plt.subplots(
    nrows=2, ncols=3, figsize=(12, 8), 
    gridspec_kw=dict(wspace=0, hspace=.0, height_ratios=[2, 1])
)

# nombre de photos
ntry = 5000
# dimension de la boite
L = 1

jitter = .5
x = np.linspace(0, L, 100)
for i in range(3):
    p = i + 1
    
    # sample the density
    pos = np.random.uniform(0, L, ntry)
    rho = phi(pos, p, L)**2
    rnd = np.random.uniform(0, 2/L, ntry)
    ix = np.where(rho > rnd)
    pos = pos[ix]

    # plot
    axes[0, i].plot(x, phi(x, p, L)**2, color=""C3"")
    axes[0, i].hist(pos, bins=20, normed=True, alpha=.4, edgecolor=""C7"")
    axes[1, i].scatter(pos, np.random.normal(0, jitter, ix[0].shape), color=""C7"", s=1)

    # layout
    axes[0, i].set_title(""$p$ = %d"" % p, fontsize=16)
    axes[1, i].set_ylim(-10, 10)
    axes[1, i].yaxis.set_visible(False)
    axes[1, i].set_xlim((0, L))
    axes[1, i].set_xticks([0, L/4, L/2, 3*L/4, L])
    text = axes[1, i].set_xticklabels([""0"", ""L/4"", ""L/2"", ""3L/4"", ""L""], fontsize=14)
    axes[1, i].set_xlabel(""$x$"", fontsize=18)
    if i > 0:
        axes[0, i].yaxis.set_visible(False)
        axes[1, i].set_xticks([L/4, L/2, 3*L/4, L])
        text = axes[1, i].set_xticklabels([""L/4"", ""L/2"", ""3L/4"", ""L""], fontsize=14)
    else:
        axes[1, i].set_xticks([0, L/4, L/2, 3*L/4, L])
        text = axes[1, i].set_xticklabels([""0"", ""L/4"", ""L/2"", ""3L/4"", ""L""], fontsize=14)

fig.savefig(""puits_infini.pdf"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-6-c2089cb37e52>[0m in [0;36m<module>[0;34m[0m
[1;32m     42[0m         [0mtext[0m [0;34m=[0m [0maxes[0m[0;34m[[0m[0;36m1[0m[0;34m,[0m [0mi[0m[0;34m][0m[0;34m.[0m[0mset_xticklabels[0m[0;34m([0m[0;34m[[0m[0;34m""0""[0m[0;34m,[0m [0;34m""L/4""[0m[0;34m,[0m [0;34m""L/2""[0m[0;34m,[0m [0;34m""3L/4""[0m[0;34m,[0m [0;34m""L""[0m[0;34m][0m[0;34m,[0m [0mfontsize[0m[0;34m=[0m[0;36m14[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     43[0m [0;34m[0m[0m
[0;32m---> 44[0;31m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m""puits_infini.pdf""[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py37/lib/python3.7/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, transparent, **kwargs)[0m
[1;32m   2178[0m             [0mself[0m[0;34m.[0m[0mpatch[0m[0;34m.[0m[0mset_visible[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2179[0m [0;34m[0m[0m
[0;32m-> 2180[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2181[0m [0;34m[0m[0m
[1;32m   2182[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py37/lib/python3.7/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2080[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2081[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2082[0;31m                     **kwargs)
[0m[1;32m   2083[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2084[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py37/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36mprint_pdf[0;34m(self, filename, dpi, bbox_inches_restore, metadata, **kwargs)[0m
[1;32m   2494[0m             [0mfile[0m [0;34m=[0m [0mfilename[0m[0;34m.[0m[0m_file[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2495[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2496[0;31m             [0mfile[0m [0;34m=[0m [0mPdfFile[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0mmetadata[0m[0;34m=[0m[0mmetadata[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2497[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2498[0m             [0mfile[0m[0;34m.[0m[0mnewPage[0m[0;34m([0m[0mwidth[0m[0;34m,[0m [0mheight[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py37/lib/python3.7/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36m__init__[0;34m(self, filename, metadata)[0m
[1;32m    430[0m         [0mself[0m[0;34m.[0m[0moriginal_file_like[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m    431[0m         [0mself[0m[0;34m.[0m[0mtell_base[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 432[0;31m         [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mcbook[0m[0;34m.[0m[0mto_filehandle[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m""wb""[0m[0;34m,[0m [0mreturn_opened[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    433[0m         [0;32mif[0m [0;32mnot[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    434[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py37/lib/python3.7/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    430[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m    431[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 432[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    433[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0;34m[0m[0m
[1;32m    434[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'puits_infini.pdf'
PermissionError: [Errno 13] Permission denied: 'puits_infini.pdf'

Executability                            : False
"
2202,/mnt/fit-Knowledgezoo/jupyternotebooks/Sean-Lan@PyMOTW/Collections/Counter.ipynb,"3.5
An error occurred while executing the following cell:
------------------
fig, axes = plt.subplots(
    ncols=3, nrows=3,
    figsize=(10, 10), sharex=True, sharey=True, 
    gridspec_kw=dict(wspace=.05, hspace=.05)
)

r = np.linspace(0, 15, 400)

axes[0, 0].plot(r, radial1s(r), label=r""$\phi_{1s}$"")
axes[0, 0].plot(r, r**2 * radial1s(r)**2, label=r""$r^2 \left\vert\phi_{1s}\right\vert^2$"")

axes[1, 0].plot(r, radial2s(r), label=r""$\phi_{2s}$"")
axes[1, 0].plot(r, r**2 * radial2s(r)**2, label=r""$r^2 \left\vert\phi_{2s}\right\vert^2$"")

axes[1, 1].plot(r, radial2p(r), label=r""$\phi_{2p}$"")
axes[1, 1].plot(r, r**2 * radial2p(r)**2, label=r""$r^2 \left\vert\phi_{2p}\right\vert^2$"")

axes[2, 0].plot(r, radial3s(r), label=r""$\phi_{3s}$"")
axes[2, 0].plot(r, r**2 * radial3s(r)**2, label=r""$r^2 \left\vert\phi_{3s}\right\vert^2$"")

axes[2, 1].plot(r, radial3p(r), label=r""$\phi_{3p}$"")
axes[2, 1].plot(r, r**2 * radial3p(r)**2, label=r""$r^2 \left\vert\phi_{3p}\right\vert^2$"")

axes[2, 2].plot(r, radial3d(r), label=r""$\phi_{3d}$"")
axes[2, 2].plot(r, r**2 * radial3d(r)**2, label=r""$r^2 \left\vert\phi_{3d}\right\vert^2$"")

for i in range(3):
    axes[i, 0].set_ylabel(""n = %d"" % (i + 1), fontsize=16)
    for j in range(3):
        if j > i:
            axes[i, j].axis(""off"")
        else:
            axes[i, j].plot([0, 15], [0, 0], linewidth=.5, color=""C7"", label="""")
            axes[i, j].legend(fontsize=14, frameon=False)
            if i == 2:
                axes[i, j].set_xlabel(""r ($\AA$)"", fontsize=14)
            if i == j:
                axes[i, j].set_title(""$\ell$ = %d"" % j, fontsize=16)

axes[0, 0].set_ylim((-.3, 1.05))
axes[0, 0].set_xlim((0, 14.9))
fig.suptitle(""Parties radiales des orbitales atomiques"", fontsize=18, y=.96)
fig.savefig(""AO_radial.pdf"", bbox_inches=""tight"")
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-9-55c9a43c5c8b>[0m in [0;36m<module>[0;34m()[0m
[1;32m     41[0m [0maxes[0m[0;34m[[0m[0;36m0[0m[0;34m,[0m [0;36m0[0m[0;34m][0m[0;34m.[0m[0mset_xlim[0m[0;34m([0m[0;34m([0m[0;36m0[0m[0;34m,[0m [0;36m14.9[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     42[0m [0mfig[0m[0;34m.[0m[0msuptitle[0m[0;34m([0m[0;34m""Parties radiales des orbitales atomiques""[0m[0;34m,[0m [0mfontsize[0m[0;34m=[0m[0;36m18[0m[0;34m,[0m [0my[0m[0;34m=[0m[0;36m.96[0m[0;34m)[0m[0;34m[0m[0m
[0;32m---> 43[0;31m [0mfig[0m[0;34m.[0m[0msavefig[0m[0;34m([0m[0;34m""AO_radial.pdf""[0m[0;34m,[0m [0mbbox_inches[0m[0;34m=[0m[0;34m""tight""[0m[0;34m)[0m[0;34m[0m[0m
[0m
[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/figure.py[0m in [0;36msavefig[0;34m(self, fname, frameon, transparent, **kwargs)[0m
[1;32m   2095[0m             [0mself[0m[0;34m.[0m[0mset_frameon[0m[0;34m([0m[0mframeon[0m[0;34m)[0m[0;34m[0m[0m
[1;32m   2096[0m [0;34m[0m[0m
[0;32m-> 2097[0;31m         [0mself[0m[0;34m.[0m[0mcanvas[0m[0;34m.[0m[0mprint_figure[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m**[0m[0mkwargs[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2098[0m [0;34m[0m[0m
[1;32m   2099[0m         [0;32mif[0m [0mframeon[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backend_bases.py[0m in [0;36mprint_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)[0m
[1;32m   2073[0m                     [0morientation[0m[0;34m=[0m[0morientation[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   2074[0m                     [0mbbox_inches_restore[0m[0;34m=[0m[0m_bbox_inches_restore[0m[0;34m,[0m[0;34m[0m[0m
[0;32m-> 2075[0;31m                     **kwargs)
[0m[1;32m   2076[0m             [0;32mfinally[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2077[0m                 [0;32mif[0m [0mbbox_inches[0m [0;32mand[0m [0mrestore_bbox[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36mprint_pdf[0;34m(self, filename, dpi, bbox_inches_restore, metadata, **kwargs)[0m
[1;32m   2556[0m             [0mfile[0m [0;34m=[0m [0mfilename[0m[0;34m.[0m[0m_file[0m[0;34m[0m[0m
[1;32m   2557[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m-> 2558[0;31m             [0mfile[0m [0;34m=[0m [0mPdfFile[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0mmetadata[0m[0;34m=[0m[0mmetadata[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   2559[0m         [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m
[1;32m   2560[0m             [0mfile[0m[0;34m.[0m[0mnewPage[0m[0;34m([0m[0mwidth[0m[0;34m,[0m [0mheight[0m[0;34m)[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/backends/backend_pdf.py[0m in [0;36m__init__[0;34m(self, filename, metadata)[0m
[1;32m    431[0m         [0mself[0m[0;34m.[0m[0moriginal_file_like[0m [0;34m=[0m [0;32mNone[0m[0;34m[0m[0m
[1;32m    432[0m         [0mself[0m[0;34m.[0m[0mtell_base[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0m
[0;32m--> 433[0;31m         [0mfh[0m[0;34m,[0m [0mopened[0m [0;34m=[0m [0mcbook[0m[0;34m.[0m[0mto_filehandle[0m[0;34m([0m[0mfilename[0m[0;34m,[0m [0;34m""wb""[0m[0;34m,[0m [0mreturn_opened[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    434[0m         [0;32mif[0m [0;32mnot[0m [0mopened[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    435[0m             [0;32mtry[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/matplotlib/cbook/__init__.py[0m in [0;36mto_filehandle[0;34m(fname, flag, return_opened, encoding)[0m
[1;32m    390[0m             [0mfh[0m [0;34m=[0m [0mbz2[0m[0;34m.[0m[0mBZ2File[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m)[0m[0;34m[0m[0m
[1;32m    391[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 392[0;31m             [0mfh[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0mflag[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    393[0m         [0mopened[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    394[0m     [0;32melif[0m [0mhasattr[0m[0;34m([0m[0mfname[0m[0;34m,[0m [0;34m'seek'[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'AO_radial.pdf'
PermissionError: [Errno 13] Permission denied: 'AO_radial.pdf'

Executability                            : False
"
2203,/mnt/fit-Knowledgezoo/jupyternotebooks/Sean-Lan@PyMOTW/Collections/defaultdict.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import bokeh.plotting as bp
bp.output_notebook()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-129c6e46ae54>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mbokeh[0m[0;34m.[0m[0mplotting[0m [0;32mas[0m [0mbp[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0mbp[0m[0;34m.[0m[0moutput_notebook[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'bokeh'
ImportError: No module named 'bokeh'

Executability                            : False
"
2210,/mnt/fit-Knowledgezoo/jupyternotebooks/OpenWIM@pywim/notebooks/specifications/Weigh-in-Motion-Data.ipynb,"3.5
An error occurred while executing the following cell:
------------------
# データをファイル出力

import pandas as pd

df = pd.DataFrame({""x"":x,""y"":y})
df.to_csv(""data.csv"")
df.to_csv(""data.csv"", header=None, index=False)

x = np.round(x, 3)
y = np.round(y, 3)
df = pd.DataFrame({""x"":x,""y"":y})
df.to_csv(""data.csv"", header=None, index=False)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mPermissionError[0m                           Traceback (most recent call last)
[0;32m<ipython-input-3-f8d1e9355bce>[0m in [0;36m<module>[0;34m()[0m
[1;32m      4[0m [0;34m[0m[0m
[1;32m      5[0m [0mdf[0m [0;34m=[0m [0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m([0m[0;34m{[0m[0;34m""x""[0m[0;34m:[0m[0mx[0m[0;34m,[0m[0;34m""y""[0m[0;34m:[0m[0my[0m[0;34m}[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 6[0;31m [0mdf[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m""data.csv""[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m      7[0m [0mdf[0m[0;34m.[0m[0mto_csv[0m[0;34m([0m[0;34m""data.csv""[0m[0;34m,[0m [0mheader[0m[0;34m=[0m[0;32mNone[0m[0;34m,[0m [0mindex[0m[0;34m=[0m[0;32mFalse[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      8[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/core/frame.py[0m in [0;36mto_csv[0;34m(self, path_or_buf, sep, na_rep, float_format, columns, header, index, index_label, mode, encoding, compression, quoting, quotechar, line_terminator, chunksize, tupleize_cols, date_format, doublequote, escapechar, decimal)[0m
[1;32m   1743[0m                                  [0mdoublequote[0m[0;34m=[0m[0mdoublequote[0m[0;34m,[0m[0;34m[0m[0m
[1;32m   1744[0m                                  escapechar=escapechar, decimal=decimal)
[0;32m-> 1745[0;31m         [0mformatter[0m[0;34m.[0m[0msave[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m   1746[0m [0;34m[0m[0m
[1;32m   1747[0m         [0;32mif[0m [0mpath_or_buf[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/formats/csvs.py[0m in [0;36msave[0;34m(self)[0m
[1;32m    154[0m             f, handles = _get_handle(self.path_or_buf, self.mode,
[1;32m    155[0m                                      [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0m
[0;32m--> 156[0;31m                                      compression=self.compression)
[0m[1;32m    157[0m             [0mclose[0m [0;34m=[0m [0;32mTrue[0m[0;34m[0m[0m
[1;32m    158[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/Osiris_py35/lib/python3.5/site-packages/pandas/io/common.py[0m in [0;36m_get_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text)[0m
[1;32m    398[0m         [0;32melif[0m [0mencoding[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    399[0m             [0;31m# Python 3 and encoding[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 400[0;31m             [0mf[0m [0;34m=[0m [0mopen[0m[0;34m([0m[0mpath_or_buf[0m[0;34m,[0m [0mmode[0m[0;34m,[0m [0mencoding[0m[0;34m=[0m[0mencoding[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    401[0m         [0;32melif[0m [0mis_text[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    402[0m             [0;31m# Python 3 and no explicit encoding[0m[0;34m[0m[0;34m[0m[0m

[0;31mPermissionError[0m: [Errno 13] Permission denied: 'data.csv'
PermissionError: [Errno 13] Permission denied: 'data.csv'

Executability                            : False
"
2215,/mnt/fit-Knowledgezoo/jupyternotebooks/dting@euler/py3/euler012_Highly_Divisible_Triangular_Number.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from IPython.display import display
from datetime import datetime
from matplotlib import pyplot as plt
from scipy import misc

import h5py
import json
import numpy as np
import os
import pandas as pd
import sys
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-8ece3b23a37f>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mfrom[0m [0mscipy[0m [0;32mimport[0m [0mmisc[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mh5py[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mjson[0m[0;34m[0m[0m
[1;32m     10[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'h5py'
ImportError: No module named 'h5py'

Executability                            : False
"
2216,/mnt/fit-Knowledgezoo/jupyternotebooks/dting@euler/py3/euler013_Large_Sum.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from matplotlib import pyplot as plt
from scipy.stats import norm
from scipy.optimize import root, fsolve
from scipy import stats

import numba as nb
import numpy as np
import pandas as pd

%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-aed0e536da91>[0m in [0;36m<module>[0;34m()[0m
[1;32m      6[0m [0;32mfrom[0m [0mscipy[0m [0;32mimport[0m [0mstats[0m[0;34m[0m[0m
[1;32m      7[0m [0;34m[0m[0m
[0;32m----> 8[0;31m [0;32mimport[0m [0mnumba[0m [0;32mas[0m [0mnb[0m[0;34m[0m[0m
[0m[1;32m      9[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m     10[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'numba'
ImportError: No module named 'numba'

Executability                            : False
"
2217,/mnt/fit-Knowledgezoo/jupyternotebooks/dting@euler/py3/euler004_Largest_Palindrome_Product.ipynb,"3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from matplotlib import pyplot as plt
from peakutils.plot import plot as pplot

import numpy as np
import pandas as pd
import peakutils
import matplotlib
import sys
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-24a00f121019>[0m in [0;36m<module>[0;34m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m      3[0m [0;32mfrom[0m [0mmatplotlib[0m [0;32mimport[0m [0mpyplot[0m [0;32mas[0m [0mplt[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 4[0;31m [0;32mfrom[0m [0mpeakutils[0m[0;34m.[0m[0mplot[0m [0;32mimport[0m [0mplot[0m [0;32mas[0m [0mpplot[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      5[0m [0;34m[0m[0m
[1;32m      6[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'peakutils'
ModuleNotFoundError: No module named 'peakutils'

Executability                            : False
"
2219,/mnt/fit-Knowledgezoo/jupyternotebooks/dting@euler/py3/euler017_Number_Letter_Counts.ipynb,"3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from IPython.display import display
from matplotlib import pyplot as plt
from scipy import signal
from scipy import constants
from scipy.signal import argrelextrema
from collections import defaultdict
from sklearn import metrics

import statsmodels.api as sm
import numpy as np
import pandas as pd
import numba as nb
import sqlalchemy
import os
import sys
import datetime
import peakutils

# local
sys.path.insert(
    0, os.path.dirname(os.path.dirname(os.path.dirname(os.getcwd())))
)

from pywim.utils.dsp.synthetic_data.sensor_data import gen_truck_raw_data
from pywim.estimation.vehicular_classification import dww

%matplotlib inline
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-297b965b3297>[0m in [0;36m<module>[0;34m()[0m
[1;32m     12[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[1;32m     13[0m [0;32mimport[0m [0mpandas[0m [0;32mas[0m [0mpd[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0;32mimport[0m [0mnumba[0m [0;32mas[0m [0mnb[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0;32mimport[0m [0msqlalchemy[0m[0;34m[0m[0m
[1;32m     16[0m [0;32mimport[0m [0mos[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'numba'
ImportError: No module named 'numba'

Executability                            : False
"
