3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
def computeCV(data):
    # http://scikit-learn.org/dev/modules/classes.html#module-sklearn.cross_validation
    from sklearn import ensemble, cross_validation
    clf = ensemble.RandomForestClassifier(n_estimators=1000, n_jobs=5, verbose=0)
    # http://randomforests.wordpress.com/2014/02/02/basics-of-k-fold-cross-validation-and-gridsearchcv-in-scikit-learn/
    res = cross_validation.cross_val_score(clf, data.data, data.target, cv=10, n_jobs = 5)
    print(res)

def dtime_to_seconds(dtime):
    return dtime.seconds + (dtime.microseconds * 1e-6)

def bench(func, data, n=10):
    assert n > 2
    score = np.inf
    try:
        time = []
        for i in range(n):
            score, t = func(*data)
            time.append(dtime_to_seconds(t))
        # remove extremal values
        time.pop(np.argmax(time))
        time.pop(np.argmin(time))
    except Exception as detail:
        print('%s error in function %s: ', (repr(detail), func))
        time = []
    return score, np.array(time)

def bench_skl(X, y, T, valid):
    from sklearn import ensemble #, linear_model
    #from sklearn.utils import safe_asarray
    start = datetime.now()
    
    # balance the dataset
    # https://github.com/scikit-learn/scikit-learn/blob/8dab222cfe894126dfb67832da2f4e871b87bce7/sklearn/preprocessing/_weights.py
    y = np.searchsorted(np.unique(y), y)
    class_weight_bins = np.bincount(y)
    # from class weights to sample weights
    sample_weights = 1. / class_weight_bins.take(y)
    sample_weights *= class_weight_bins.min()
    
    
    # http://scikit-learn.org/stable/modules/classes.html
    clf = ensemble.RandomForestClassifier(n_estimators=1000, n_jobs=5, verbose=0)
    #clf = linear_model.ElasticNet(alpha=0.5, l1_ratio=0.5)
    #clf = linear_model.LogisticRegression()
    #clf = neighbors.NeighborsClassifier(n_neighbors=n_neighbors, algorithm='brute_inplace')
    #clf = skl_cluster.KMeans(k=n_components, n_init=1)
    #...
    clf.fit(X, y, sample_weights)

    ## Regression
    # pred = clf.predict(T)
    # delta = datetime.now() - start
    # mse = np.linalg.norm(pred - valid, 2) ** 2
    # return mse, delta

    # Classification
    score = np.mean(clf.predict(T) == valid)
    return score, datetime.now() - start

def computeAverageFromNRuns(data, num_tries, TH):
    sample_range = np.random.random_sample(size=iris.target.shape[0])
    X = np.array([(iris.data[i,]) for i in range(len(iris.target)) if sample_range[i] >= TH])
    Y = np.array([(iris.target[i,]) for i in range(len(iris.target)) if sample_range[i] >= TH])
    T = np.array([(iris.data[i,]) for i in range(len(iris.target)) if sample_range[i] < TH])
    valid = np.array([(iris.target[i,]) for i in range(len(iris.target)) if sample_range[i] < TH])

    #X, T, y, valid = cross_validation.train_test_split(iris.data, iris.target, test_size=0.9, random_state=0)

    num_tries = 25
    score, times = bench(bench_skl, (X,Y,T,valid), num_tries)
    print('Tries:', num_tries, 'Score:', score, 'Time:', np.mean(times), '(mean)', np.median(times), '(median)')

from sklearn import datasets
import numpy as np
from datetime import datetime
#from sklearn import cross_validation

iris = datasets.load_iris()

computeCV(iris)

runs = 25
TH = 0.9

computeAverageFromNRuns(iris, runs, TH)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-ac8694af88d6>[0m in [0;36m<module>[0;34m()[0m
[1;32m     81[0m [0miris[0m [0;34m=[0m [0mdatasets[0m[0;34m.[0m[0mload_iris[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[1;32m     82[0m [0;34m[0m[0m
[0;32m---> 83[0;31m [0mcomputeCV[0m[0;34m([0m[0miris[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     84[0m [0;34m[0m[0m
[1;32m     85[0m [0mruns[0m [0;34m=[0m [0;36m25[0m[0;34m[0m[0m

[0;32m<ipython-input-1-ac8694af88d6>[0m in [0;36mcomputeCV[0;34m(data)[0m
[1;32m      3[0m [0;32mdef[0m [0mcomputeCV[0m[0;34m([0m[0mdata[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0m
[1;32m      4[0m     [0;31m# http://scikit-learn.org/dev/modules/classes.html#module-sklearn.cross_validation[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 5[0;31m     [0;32mfrom[0m [0msklearn[0m [0;32mimport[0m [0mensemble[0m[0;34m,[0m [0mcross_validation[0m[0;34m[0m[0m
[0m[1;32m      6[0m     [0mclf[0m [0;34m=[0m [0mensemble[0m[0;34m.[0m[0mRandomForestClassifier[0m[0;34m([0m[0mn_estimators[0m[0;34m=[0m[0;36m1000[0m[0;34m,[0m [0mn_jobs[0m[0;34m=[0m[0;36m5[0m[0;34m,[0m [0mverbose[0m[0;34m=[0m[0;36m0[0m[0;34m)[0m[0;34m[0m[0m
[1;32m      7[0m     [0;31m# http://randomforests.wordpress.com/2014/02/02/basics-of-k-fold-cross-validation-and-gridsearchcv-in-scikit-learn/[0m[0;34m[0m[0;34m[0m[0m

[0;31mImportError[0m: cannot import name 'cross_validation'
ImportError: cannot import name 'cross_validation'

Executability                            : False
