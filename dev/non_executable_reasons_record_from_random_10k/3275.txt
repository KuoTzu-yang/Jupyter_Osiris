3.6
Executability                            : True
Reproducibility                          : number of matched cells: 15 ; number of cells: 17
Reproducibility                          : matched ratio: 0.882 ; index of matched cells: [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
-------------------------------------------
Source Code of a Unmatched Cell 0
-------------------------------------------
import numpy as np
import h5py
import matplotlib.pyplot as plt

%matplotlib inline
plt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plots
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'

%load_ext autoreload
%autoreload 2

np.random.seed(1)

-----------------
Original output:
C:\Users\Joe\Anaconda3\envs\keras\lib\site-packages\h5py\__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters

Executed output:

-------------------------------------------
Source Code of a Unmatched Cell 2
-------------------------------------------
np.random.seed(1)
x = np.random.randn(4, 3, 3, 2)
x_pad = zero_pad(x, 2)
print ("x.shape =", x.shape)
print ("x_pad.shape =", x_pad.shape)
print ("x[1,1] =", x[1,1])
print ("x_pad[1,1] =", x_pad[1,1])

fig, axarr = plt.subplots(1, 2)
axarr[0].set_title('x')
axarr[0].imshow(x[0,:,:,0])
axarr[1].set_title('x_pad')
axarr[1].imshow(x_pad[0,:,:,0])

-----------------
Original output:
x.shape = (4, 3, 3, 2)
x_pad.shape = (4, 7, 7, 2)
x[1,1] = [[ 0.90085595 -0.68372786]
 [-0.12289023 -0.93576943]
 [-0.26788808  0.53035547]]
x_pad[1,1] = [[0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]]
<matplotlib.image.AxesImage at 0x29369fd7d30>iVBORw0KGgoAAAANSUhEUgAAAX8AAADHCAYAAADxqlPLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAEi5JREFUeJzt3X2QXXV9x/H3hyQGYYnYJEpMAkGJjKgVYoowdBjKQycgA86UdqBVQWUydUSx2lGxM0idqaX9w6rFgYmBACUD2kBrikGKw5NM5SFAeAgBGxlotoFJAgrEB2Dh0z/uCb3Z3Oxu9py95949n9fMTu6553fP73v3nvnk7Dnn/n6yTURENMtedRcQERHdl/CPiGighH9ERAMl/CMiGijhHxHRQAn/iIgGSvhHxKQl6RxJd9VdRy9K+EdENFDCPyKigRL+fUzSuyQ9L2lRsfwOSdskHVdzaRHA+PZRSbdL+ntJ90p6QdIPJf1e2/p/lfRsse5OSe9tWzdT0mpJL0q6F3jXRL6/fpbw72O2fwF8GVgpaR9gBXCl7dtrLSyiUGIf/TjwSeAdwBDwnbZ1NwELgbcBDwAr29Z9F/gdMKd4/SfLv4vJSRnbp/9JWg0cDBj4A9sv11xSxE72ZB+VdDtwt+2vFMuHAeuAN9t+bVjb/YFfAvsD22kF//ttP16s/wZwrO0/rPxN9bkc+U8O3wPeB/xzgj961J7uo5vaHj8NTANmSZoi6WJJv5D0IvBU0WYWMBuY2uG10UHCv89JGgC+BVwOXNR+bjSiF4xzH53f9vhA4FVgG/DnwOnAicBbgAU7ugG20jpFNPy10UHCv/99G7jf9rnAj4DLaq4nYrjx7KMflXRYcZ3g68Cq4pTPfsDLwHPAPsA3drygWH8Drf9g9ilOF51d7VuZPBL+fUzS6cAS4C+Lp74ALJL0F/VVFfH/Suyj/wJcCTwL7A18rnj+alqncv4XeAy4e9jrzgMGitddSesCc3SQC74R0VOKC77X2F5edy2TWY78IyIaaGqZFxcXbr5P66LLU8Cf2f5lh3avAY8Ui/9j+7Qy/UZEf5O0fTerTu5qIQ1W6rSPpH8Enrd9saSvAG+1/eUO7bbbHihRZ0REVKhs+D8BHGf7GUlzgNttH9qhXcI/IqKHlD3n/3bbzwAU/75tN+32lrRW0t2SPlKyz4iIKGnUc/6SfgIc0GHV3+xBPwfa3izpncCtkh4pxvwY3tdSYCnAvvvu+8F3v/vde9BF73rwwQfrLqEyBx10UN0lVObpp5/eZnt2t/udNm2ap0+f3u1uoyFefvllXn31VY3WriunfYa95krgRturRmq3aNEi33HHHeOurZfMmDGj7hIqs3z55Ln77txzz73f9uJu9zswMODDDz+8291GQ6xbt47t27ePGv5lT/us5v+/QXc28MPhDSS9VdL04vEs4BhaX86IiIialA3/i4GTJP03cFKxjKTFknYcIr4HWCvpIeA24GLbCf+IiBqVus/f9nPACR2eXwucWzz+L+D9ZfqJiIhq5Ru+ERENlPCPiGighH9ESZKWSHpC0sbim+4RPS/hH1GCpCm05o09GTgMOKsYRz6ipyX8I8o5Etho+0nbrwDX0ZppKqKnJfwjypnLznPGDhbP7UTS0mKIk7VDQ0NdKy5idxL+EeV0+iblLl+bt73M9mLbi6dOLXWHdUQlEv4R5Qyy84Th84DNNdUSMWYJ/4hy7gMWSjpY0puAM2kNexLR0/L3Z0QJtocknQfcDEwBrrC9vuayIkaV8I8oyfYaYE3ddUTsiZz2iYhooIR/REQDJfwjIhoo4R8R0UAJ/4iIBkr4R0Q0UCXhP9qQtpKmS/p+sf4eSQuq6DciIsandPiPcUjbTwG/tH0I8E/AP5TtNyIixq+KI/+xDGl7OnBV8XgVcIKkTgNiRUREF1QR/mMZ0vaNNraHgBeAmcM31D7s7bZt2yooLSIiOqki/McypO0eD3s7a9asCkqLiIhOqgj/sQxp+0YbSVOBtwDPV9B3RESMQxXhP5YhbVcDZxePzwButb3LkX9ERHRH6fAvzuHvGNJ2A/AD2+slfV3SaUWzy4GZkjYCXwB2uR00ol9JukLSFkmP1l1LxFhVMqRzpyFtbV/Y9vh3wJ9W0VdED7oSuAS4uuY6IsYs3/CNKMn2neQaVvSZhH9EF7Tfxjw0NFR3OREJ/4huaL+NeerUTKAX9Uv4R0Q0UMI/IqKBEv4RJUm6FvgZcKikQUmfqrumiNHk5GNESbbPqruGiD2VI/+IiAZK+EdENFDCPyKigRL+ERENlPCPiGig3O0TESO66aabKt/mjBkzKt8mwPLlyydkuytWrJiQ7dYpR/4REQ2U8I+IaKCEf0REA1US/pKWSHpC0kZJu8zSJekcSVslrSt+zq2i34iIGJ/SF3wlTQG+C5xEa6L2+ySttv3YsKbft31e2f4iIqK8Ko78jwQ22n7S9ivAdcDpFWw3IiImSBW3es4FNrUtDwIf6tDuTyQdC/wc+Cvbm4Y3kLQUWApw4IEHst9++1VQXv3OPvvsukuozIknnlh3CRFRgSqO/NXhOQ9b/g9gge3fB34CXNVpQ+2zHc2ePbuC0iImlqT5km6TtEHSeknn111TxFhUEf6DwPy25XnA5vYGtp+z/XKx+D3ggxX0G9ELhoAv2n4PcBTwGUmH1VxTxKiqCP/7gIWSDpb0JuBMYHV7A0lz2hZPAzZU0G9E7Ww/Y/uB4vFLtPbtufVWFTG60uf8bQ9JOg+4GZgCXGF7vaSvA2ttrwY+J+k0WkdJzwPnlO03otdIWgAcAdzTYd0b17OmT5/e1boiOqlkbB/ba4A1w567sO3xBcAFVfQV0YskDQDXA5+3/eLw9baXAcsABgYGhl8Ti+i6fMM3oiRJ02gF/0rbN9RdT8RYJPwjSpAk4HJgg+1v1l1PxFgl/CPKOQb4GHB82/Alp9RdVMRoMp5/RAm276Lzd10ielqO/CMiGijhHxHRQAn/iIgGSvhHRDRQwj8iooFyt09EjGgihlafqGHOJ2rI8RUrVkzIduuUI/+IiAZK+EdENFDCPyKigRL+ERENlPCPiGighH9ERANVEv6SrpC0RdKju1kvSd+RtFHSw5IWVdFvRC+QtLekeyU9VEzi/rd11xQxmqqO/K8Eloyw/mRgYfGzFLi0on4jesHLwPG2PwAcDiyRdFTNNUWMqJLwt30nrbl5d+d04Gq33A3sP2xS94i+VezX24vFacVPpmqMntatc/5zgU1ty4PFcxGTgqQpktYBW4BbbO8yiXtEL+lW+Hea7GKXIyNJSyWtlbR269atXSgrohq2X7N9ODAPOFLS+9rXt+/bQ0ND9RQZ0aZb4T8IzG9bngdsHt7I9jLbi20vnj17dpdKi6iO7V8BtzPsGlj7vj11aobUivp1K/xXAx8v7vo5CnjB9jNd6jtiQkmaLWn/4vGbgROBx+utKmJklRyCSLoWOA6YJWkQ+Bqti17YvgxYA5wCbAR+A3yiin4jesQc4CpJU2gdUP3A9o011xQxokrC3/ZZo6w38Jkq+oroNbYfBo6ou46IPZFv+EZENFDCPyKigRL+ERENlPCPiGighH9ERAPl2yYRMaIDDjig8m1ec801lW8TYMmSkcaXHL+ZM2dOyHbrlCP/iIgGSvhHRDRQwj8iooES/hERDZTwj4hooIR/REQDJfwjIhoo4R9RgWIaxwclZSjn6AsJ/4hqnA9sqLuIiLFK+EeUJGke8GFged21RIxVwj+ivG8BXwJe312DTOAevaaS8Jd0haQtkh7dzfrjJL0gaV3xc2EV/UbUTdKpwBbb94/ULhO4R6+pai+8ErgEuHqENj+1fWpF/UX0imOA0ySdAuwNzJB0je2P1lxXxIgqOfK3fSfwfBXbiugnti+wPc/2AuBM4NYEf/SDbv79ebSkh4DNwF/bXj+8gaSlwFKAvfbaa0KGkq3DRA1fW4eJGjI3IrqrW+H/AHCQ7e3Fn8f/Diwc3sj2MmAZwLRp09yl2iIqYft24Paay4gYk67c7WP7Rdvbi8drgGmSZnWj74iI2FVXwl/SAZJUPD6y6Pe5bvQdERG7quS0j6RrgeOAWZIGga8B0wBsXwacAXxa0hDwW+BM2zmtExFRk0rC3/ZZo6y/hNatoBER0QPyDd+IiAbKVw0jYkSHHHJI5du86KKLKt8mwMyZMydku5NRjvwjIhoo4R8R0UAJ/4iIBkr4R0Q0UMI/IqKBEv4REQ2U8I+IaKDc5x9RAUlPAS8BrwFDthfXW1HEyBL+EdX5I9vb6i4iYixy2iciooES/hHVMPCfku4vZqTbiaSlktZKWjs0NFRDeRE7y2mfiGocY3uzpLcBt0h6vJjbGth5lrqBgYEMZx61y5F/RAVsby7+3QL8G3BkvRVFjCzhH1GSpH0l7bfjMfDHwKP1VhUxstLhL2m+pNskbZC0XtL5HdpI0nckbZT0sKRFZfuN6CFvB+6S9BBwL/Aj2z+uuaaIEVVxzn8I+KLtB4qjn/sl3WL7sbY2JwMLi58PAZcW/0b0PdtPAh+ou46IPVH6yN/2M7YfKB6/BGwA5g5rdjpwtVvuBvaXNKds3xERMT6VnvOXtAA4Arhn2Kq5wKa25UF2/Q9ip9vhXn/99SpLi4iINpWFv6QB4Hrg87ZfHL66w0t2ud3N9jLbi20v3muvXIuOiJgolSSspGm0gn+l7Rs6NBkE5rctzwM2V9F3RETsuSru9hFwObDB9jd302w18PHirp+jgBdsP1O274iIGJ8q7vY5BvgY8IikdcVzXwUOBLB9GbAGOAXYCPwG+EQF/UZExDiVDn/bd9H5nH57GwOfKdtXRERUI1dVIyIaKOEfEdFACf+IiAZK+EdENFDCPyKigRL+ERENlPCPKEnS/pJWSXq8GNr86LprihhNpnGMKO/bwI9tnyHpTcA+dRcUMZqEf0QJkmYAxwLnANh+BXilzpoixiKnfSLKeSewFVgh6UFJy4upHHfSPlz50NBQ96uMGCbhH1HOVGARcKntI4BfA18Z3qh9uPKpU/MHd9Qv4R9RziAwaHvHBEaraP1nENHTEv4RJdh+Ftgk6dDiqROAx0Z4SURPyN+fEeV9FlhZ3OnzJBmyPPpAwj+iJNvrgMV11xGxJ3LaJyKigaqYxnG+pNuKbzaul3R+hzbHSXpB0rri58Ky/UZExPhVcdpnCPii7Qck7QfcL+kW28Mvev3U9qkV9BcRESWVPvK3/YztB4rHLwEbgLlltxsREROn0nP+khYARwD3dFh9tKSHJN0k6b1V9hsREXtGrbnVK9iQNADcAfyd7RuGrZsBvG57u6RTgG/bXthhG0uBpcXiocATlRQ3slnAti700w2T5b10630cZHt2F/rZiaStwNNjbN5Pn2k/1Qr9Ve+e1Dqm/bqS8Jc0DbgRuNn2N8fQ/ilgse3af/GS1tqeFLfpTZb3MlneRxX66XfRT7VCf9U7EbVWcbePgMuBDbsLfkkHFO2QdGTR73Nl+46IiPGp4m6fY4CPAY9IWlc891XgQADblwFnAJ+WNAT8FjjTVZ1vioiIPVY6/G3fBWiUNpcAl5Tta4Isq7uACk2W9zJZ3kcV+ul30U+1Qn/VW3mtlV3wjYiI/pHhHSIiGqix4S9piaQnJG2UtMvkG/1C0hWStkh6tO5ayhrLUCFN0U/7Zz9+bpKmFDOv3Vh3LaORtL+kVZIeL37HR1ey3Sae9pE0Bfg5cBKtyTjuA87qMCRFz5N0LLAduNr2++qupwxJc4A57UOFAB/px8+ljH7bP/vxc5P0BVojsc7o9WFnJF1Fa3ic5cWw4fvY/lXZ7Tb1yP9IYKPtJ4sJt68DTq+5pnGxfSfwfN11VCFDhbyhr/bPfvvcJM0DPgwsr7uW0RRfkD2W1u302H6liuCH5ob/XGBT2/IgPbyzNtEoQ4VMdn27f/bJ5/Yt4EvA63UXMgbvBLYCK4rTVMsl7VvFhpsa/p1uTW3e+a8eVQwVcj3wedsv1l1PDfpy/+yHz03SqcAW2/fXXcsYTaU1J/Slto8Afg1Ucg2oqeE/CMxvW54HbK6plmhTDBVyPbBy+BhRDdJ3+2cffW7HAKcVQ8xcBxwv6Zp6SxrRIDBoe8dfUqto/WdQWlPD/z5goaSDiwsoZwKra66p8cYyVEhD9NX+2U+fm+0LbM+zvYDW7/VW2x+tuazdsv0ssEnSocVTJwCVXEhvZPjbHgLOA26mdXHqB7bX11vV+Ei6FvgZcKikQUmfqrumEnYMFXJ826xvp9RdVLf14f6Zz21ifRZYKelh4HDgG1VstJG3ekZENF0jj/wjIpou4R8R0UAJ/4iIBkr4R0Q0UMI/IqKBEv4REQ2U8I+IaKCEf0REA/0fZbvVf+dwy5sAAAAASUVORK5CYII=

Executed output:
x.shape = (4, 3, 3, 2)
x_pad.shape = (4, 7, 7, 2)
x[1,1] = [[ 0.90085595 -0.68372786]
 [-0.12289023 -0.93576943]
 [-0.26788808  0.53035547]]
x_pad[1,1] = [[0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]
 [0. 0.]]
<matplotlib.image.AxesImage at 0x7f665d515710>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

