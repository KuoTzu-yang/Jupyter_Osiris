3.5
Executability                            : True
Reproducibility                          : number of matched cells: 26 ; number of cells: 33
Reproducibility                          : matched ratio: 0.788 ; index of matched cells: [0, 1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32]
-------------------------------------------
Source Code of a Unmatched Cell 5
-------------------------------------------
d = {'apples': 4,
 'oranges': 1,
 'grapes': 10,
 'kiwi': 3}

print('Keys:')
# print keys
for k in d:
    print(k)

print('\nValues:')
# print values
for k in d:
    print(d[k])
    
# Print it pretty
for k, v in d.items():
    print('We have %d %s' % (v, k))

-----------------
Original output:
Keys:
oranges
grapes
apples
kiwi

Values:
1
10
4
3
We have 1 oranges
We have 10 grapes
We have 4 apples
We have 3 kiwi

Executed output:
Keys:
grapes
kiwi
apples
oranges

Values:
10
3
4
1
We have 10 grapes
We have 3 kiwi
We have 4 apples
We have 1 oranges

-------------------------------------------
Source Code of a Unmatched Cell 8
-------------------------------------------
print(d.keys())
print(d.values())
print(d.items())

-----------------
Original output:
dict_keys(['oranges', 'grapes', 'apples', 'kiwi'])
dict_values([1, 10, 4, 3])
dict_items([('oranges', 1), ('grapes', 10), ('apples', 4), ('kiwi', 3)])

Executed output:
dict_keys(['grapes', 'kiwi', 'apples', 'oranges'])
dict_values([10, 3, 4, 1])
dict_items([('grapes', 10), ('kiwi', 3), ('apples', 4), ('oranges', 1)])

-------------------------------------------
Source Code of a Unmatched Cell 10
-------------------------------------------
# Quick way to make a dictionary from a different structure and perform an operation
#  at the same time

# Say we have some records in a tuple of tuples
t = (('Sam', 3.9), ('Natalie', 4.0), ('Henry', 3.7))

# Convert to a dictionary and increment a value at the same time
d = {k: v + 1 for k, v in t}
print(d)

-----------------
Original output:
{'Henry': 4.7, 'Natalie': 5.0, 'Sam': 4.9}

Executed output:
{'Sam': 4.9, 'Natalie': 5.0, 'Henry': 4.7}

-------------------------------------------
Source Code of a Unmatched Cell 28
-------------------------------------------
from string import ascii_uppercase

letters = ascii_uppercase

# convert to set
S = set(letters)
print(S)

-----------------
Original output:
{'F', 'J', 'O', 'M', 'Z', 'K', 'P', 'L', 'T', 'U', 'B', 'I', 'Q', 'D', 'V', 'G', 'E', 'N', 'H', 'X', 'W', 'S', 'Y', 'C', 'R', 'A'}

Executed output:
{'W', 'L', 'C', 'Q', 'M', 'D', 'X', 'N', 'A', 'G', 'K', 'S', 'V', 'J', 'Y', 'O', 'F', 'T', 'P', 'R', 'Z', 'E', 'B', 'H', 'U', 'I'}

-------------------------------------------
Source Code of a Unmatched Cell 29
-------------------------------------------
A = set(letters[0:5])
#print (A)
B = set(letters[1:3])
print('A:', A, 'B:', B, sep='\n')

d = A.difference(B)
print('Difference:', d)

i = A.intersection(B)
print('Intersection:', i)

symmdiff = A.symmetric_difference(B)
print('Symmetric difference:', symmdiff)

-----------------
Original output:
A:
{'C', 'B', 'D', 'E', 'A'}
B:
{'C', 'B'}
Difference: {'A', 'D', 'E'}
Intersection: {'C', 'B'}
Symmetric difference: {'A', 'D', 'E'}

Executed output:
A:
{'B', 'A', 'E', 'C', 'D'}
B:
{'B', 'C'}
Difference: {'E', 'A', 'D'}
Intersection: {'B', 'C'}
Symmetric difference: {'E', 'A', 'D'}

-------------------------------------------
Source Code of a Unmatched Cell 30
-------------------------------------------
# alternative of difference
print(A - B)

# alternative to intersection
print(A & B)

# alternative to union
print(A | B)

# alternative to symmetric difference
print(A ^ B)

-----------------
Original output:
{'A', 'D', 'E'}
{'C', 'B'}
{'C', 'B', 'A', 'D', 'E'}
{'A', 'D', 'E'}

Executed output:
{'E', 'A', 'D'}
{'B', 'C'}
{'B', 'E', 'D', 'A', 'C'}
{'E', 'A', 'D'}

-------------------------------------------
Source Code of a Unmatched Cell 31
-------------------------------------------
myset = {x + x for x in 'mississippi'}
print(myset)

-----------------
Original output:
{'mm', 'pp', 'ii', 'ss'}

Executed output:
{'pp', 'mm', 'ss', 'ii'}

