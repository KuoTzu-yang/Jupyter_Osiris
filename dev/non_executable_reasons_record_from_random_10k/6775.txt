3.5
Executability                            : True
Reproducibility                          : number of matched cells: 7 ; number of cells: 11
Reproducibility                          : matched ratio: 0.636 ; index of matched cells: [0, 3, 4, 6, 8, 9, 10]
-------------------------------------------
Source Code of a Unmatched Cell 1
-------------------------------------------
# let's create two lists with random samples of 10 values in the range of numbers 0-49
import random
a = random.sample(range(50), 10)
b = random.sample(range(50), 10)

# Take a peek at these lists
print(a)
print(b)

# What's the maximum value at each corresponding position in the two sequences
list(map(max, a, b))

-----------------
Original output:
[47, 29, 43, 42, 13, 20, 15, 32, 34, 30]
[25, 45, 24, 20, 40, 16, 41, 44, 26, 19]
[47, 45, 43, 42, 40, 20, 41, 44, 34, 30]
Executed output:
[4, 48, 44, 8, 47, 15, 37, 41, 30, 32]
[25, 39, 42, 36, 22, 16, 20, 11, 41, 18]
[25, 48, 44, 36, 47, 16, 37, 41, 41, 32]
-------------------------------------------
Source Code of a Unmatched Cell 2
-------------------------------------------
from itertools import groupby

# Our input is a list of integers
nums = [2, 0, 9, 4, 7, 5, 8, 3]

# An anonymous function to test even or odd
func = lambda x: 'Even' if x % 2 == 0 else 'Odd'

#Return a new list containing all items from the iterable in ascending order.
#A custom key function can be supplied to customise the sort order, and the
#reverse flag can be set to request the result in descending order.
sortednums = sorted(nums, key = func)

# Apply groupby() using our anonymous function
result = groupby(sortednums, func)
print(result)

# Do some printing
# Unpack the groupby object one group at a time
for k, group in result:
    # convert grouped numbers to a string with map and join method
    numstr = ','.join(map(str, group))
    print('%s = %s' % (k, numstr))

-----------------
Original output:
<itertools.groupby object at 0x7f69f4666958>
Even = 2,0,4,8
Odd = 9,7,5,3

Executed output:
<itertools.groupby object at 0x7ff0ec02a2c8>
Even = 2,0,4,8
Odd = 9,7,5,3

-------------------------------------------
Source Code of a Unmatched Cell 5
-------------------------------------------
from itertools import groupby

# Our input is a list of integers
nums = [2, 0, 9, 4, 7, 5, 8, 3]

# An anonymous function to test even or odd
func = lambda x: 'even' if x % 2 == 0 else 'odd'

# It is important to sort our list - don't worry about sorting in detail yet
sortednums = sorted(nums, key = func)

print(sortednums)

# Apply groupby() using our anonymous function
result = groupby(sortednums, func)
print(result)

# Do some printing
# Unpack the groupby object one group at a time
for k, group in result:
    # convert grouped numbers to a string with map and join method
    numstr = ','.join(map(str, group))
    print('%s = %s' % (k, numstr))

-----------------
Original output:
[2, 0, 4, 8, 9, 7, 5, 3]
<itertools.groupby object at 0x7f69f45f4408>
even = 2,0,4,8
odd = 9,7,5,3

Executed output:
[2, 0, 4, 8, 9, 7, 5, 3]
<itertools.groupby object at 0x7ff0ec02ae58>
even = 2,0,4,8
odd = 9,7,5,3

-------------------------------------------
Source Code of a Unmatched Cell 7
-------------------------------------------
import random
a = random.sample(range(50), 5)
b = random.sample(range(50), 5)

# Take a peek at these lists
print(a)
print(b)

# Combine into a zip object (iterable) which is made up of tuples
z = zip(a, b)
print(list(z))

print(list((sum, a, b)))
# Convert zip object to list and print
#print(list(z))# Try your solution here

-----------------
Original output:
[48, 39, 33, 40, 45]
[27, 31, 9, 24, 25]
[(48, 27), (39, 31), (33, 9), (40, 24), (45, 25)]
[<built-in function sum>, [48, 39, 33, 40, 45], [27, 31, 9, 24, 25]]

Executed output:
[7, 33, 39, 29, 20]
[15, 22, 36, 14, 20]
[(7, 15), (33, 22), (39, 36), (29, 14), (20, 20)]
[<built-in function sum>, [7, 33, 39, 29, 20], [15, 22, 36, 14, 20]]

