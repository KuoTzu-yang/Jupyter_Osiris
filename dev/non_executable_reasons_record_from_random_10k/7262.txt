3.5
Executability                            : True
Reproducibility                          : number of matched cells: 2 ; number of cells: 12
Reproducibility                          : matched ratio: 0.167 ; index of matched cells: [0, 2]
-------------------------------------------
Source Code of a Unmatched Cell 1
-------------------------------------------
# There are 3 types of data structures: series, data frames and planes
# Creating a series
s = pd.Series([1, 3, 5, np.nan, 6, 8])
s # Again, remembering that indexes in python start with 0 and not 1

# Creating a data frame by passing a numpy array with a datetime index and labelled columns
dates = pd.date_range('20130101', periods=6) # creates 6 rows with 4 columns
dates
df = pd.DataFrame(np.random.randn(6, 4), index = dates, columns = list('ABCD'))
df

# Creating a dataframe by passing a dict of objects that can be converted to seried-like
df2 = pd.DataFrame({'A' : 1.,
                   'B' : pd.Timestamp('20130102'),
                   'C' : pd.Series(1, index = list(range(4)), dtype = 'float32'),
                   'D' : np.array([3] * 4, dtype = 'int32'),
                   'E' : pd.Categorical(["test", "train", "test", "train"]),
                   'F' : 'foo'})
df2

# having specific dtypes
df2.dtypes 
# tab completion for attributes is automatic in ipython. For a list of attributes

-----------------
Original output:
0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
               '2013-01-05', '2013-01-06'],
              dtype='datetime64[ns]', freq='D')                   A         B         C         D
2013-01-01  0.483842  1.389233 -1.604447  0.686504
2013-01-02 -0.245957  0.424874  0.683387 -1.003888
2013-01-03 -1.438666  0.021363  0.025582 -1.372246
2013-01-04  0.371391 -0.065038  1.336967 -0.135345
2013-01-05 -0.592473 -0.322534 -0.281605  1.060983
2013-01-06  0.299948  0.329729  0.473723  0.888519     A          B    C  D      E    F
0  1.0 2013-01-02  1.0  3   test  foo
1  1.0 2013-01-02  1.0  3  train  foo
2  1.0 2013-01-02  1.0  3   test  foo
3  1.0 2013-01-02  1.0  3  train  fooA           float64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object
Executed output:
0    1.0
1    3.0
2    5.0
3    NaN
4    6.0
5    8.0
dtype: float64DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
               '2013-01-05', '2013-01-06'],
              dtype='datetime64[ns]', freq='D')                   A         B         C         D
2013-01-01  0.311965 -0.356805  0.278872 -1.548284
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-03 -1.832186  0.677821  0.893330 -1.382369
2013-01-04 -0.072372  1.347171  0.052199 -1.951638
2013-01-05  1.015810 -1.678260  0.313091  0.778213
2013-01-06  0.690490  0.144727  1.163184  2.024295     A          B    C  D      E    F
0  1.0 2013-01-02  1.0  3   test  foo
1  1.0 2013-01-02  1.0  3  train  foo
2  1.0 2013-01-02  1.0  3   test  foo
3  1.0 2013-01-02  1.0  3  train  fooA           float64
B    datetime64[ns]
C           float32
D             int32
E          category
F            object
dtype: object
-------------------------------------------
Source Code of a Unmatched Cell 3
-------------------------------------------
# Display the index, columns and the underlying numpy data
df.index
df.columns
df.values
df.describe()

# transposing the data
df.T

-----------------
Original output:
DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
               '2013-01-05', '2013-01-06'],
              dtype='datetime64[ns]', freq='D')Index(['A', 'B', 'C', 'D'], dtype='object')array([[ 0.48384223,  1.38923292, -1.60444713,  0.68650368],
       [-0.24595679,  0.4248742 ,  0.68338749, -1.00388756],
       [-1.43866564,  0.02136282,  0.02558235, -1.37224637],
       [ 0.37139074, -0.06503825,  1.33696713, -0.13534527],
       [-0.59247338, -0.32253431, -0.28160506,  1.06098323],
       [ 0.29994796,  0.32972933,  0.47372305,  0.88851935]])              A         B         C         D
count  6.000000  6.000000  6.000000  6.000000
mean  -0.186986  0.296271  0.105601  0.020755
std    0.739392  0.600210  1.006599  1.028885
min   -1.438666 -0.322534 -1.604447 -1.372246
25%   -0.505844 -0.043438 -0.204808 -0.786752
50%    0.026996  0.175546  0.249653  0.275579
75%    0.353530  0.401088  0.630971  0.838015
max    0.483842  1.389233  1.336967  1.060983   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06
A    0.483842   -0.245957   -1.438666    0.371391   -0.592473    0.299948
B    1.389233    0.424874    0.021363   -0.065038   -0.322534    0.329729
C   -1.604447    0.683387    0.025582    1.336967   -0.281605    0.473723
D    0.686504   -1.003888   -1.372246   -0.135345    1.060983    0.888519
Executed output:
DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
               '2013-01-05', '2013-01-06'],
              dtype='datetime64[ns]', freq='D')Index(['A', 'B', 'C', 'D'], dtype='object')array([[ 0.31196511, -0.35680507,  0.27887152, -1.5482842 ],
       [ 0.64457321,  0.15954656,  0.00469923,  0.77160331],
       [-1.83218604,  0.67782084,  0.89333028, -1.38236904],
       [-0.07237161,  1.34717148,  0.05219885, -1.95163774],
       [ 1.01580983, -1.67826048,  0.31309116,  0.77821338],
       [ 0.69049036,  0.14472716,  1.16318389,  2.02429456]])              A         B         C         D
count  6.000000  6.000000  6.000000  6.000000
mean   0.126380  0.049033  0.450896 -0.218030
std    1.028373  1.024710  0.471113  1.620528
min   -1.832186 -1.678260  0.004699 -1.951638
25%    0.023713 -0.231422  0.108867 -1.506805
50%    0.478269  0.152137  0.295981 -0.305383
75%    0.679011  0.548252  0.748271  0.776561
max    1.015810  1.347171  1.163184  2.024295   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06
A    0.311965    0.644573   -1.832186   -0.072372    1.015810    0.690490
B   -0.356805    0.159547    0.677821    1.347171   -1.678260    0.144727
C    0.278872    0.004699    0.893330    0.052199    0.313091    1.163184
D   -1.548284    0.771603   -1.382369   -1.951638    0.778213    2.024295
-------------------------------------------
Source Code of a Unmatched Cell 4
-------------------------------------------
# Sorting the data by an axis
df.sort_index(axis = 1, ascending = False)

# Sorting by a value
df.sort_values(by = "B")

-----------------
Original output:
                   D         C         B         A
2013-01-01  0.686504 -1.604447  1.389233  0.483842
2013-01-02 -1.003888  0.683387  0.424874 -0.245957
2013-01-03 -1.372246  0.025582  0.021363 -1.438666
2013-01-04 -0.135345  1.336967 -0.065038  0.371391
2013-01-05  1.060983 -0.281605 -0.322534 -0.592473
2013-01-06  0.888519  0.473723  0.329729  0.299948                   A         B         C         D
2013-01-05 -0.592473 -0.322534 -0.281605  1.060983
2013-01-04  0.371391 -0.065038  1.336967 -0.135345
2013-01-03 -1.438666  0.021363  0.025582 -1.372246
2013-01-06  0.299948  0.329729  0.473723  0.888519
2013-01-02 -0.245957  0.424874  0.683387 -1.003888
2013-01-01  0.483842  1.389233 -1.604447  0.686504
Executed output:
                   D         C         B         A
2013-01-01 -1.548284  0.278872 -0.356805  0.311965
2013-01-02  0.771603  0.004699  0.159547  0.644573
2013-01-03 -1.382369  0.893330  0.677821 -1.832186
2013-01-04 -1.951638  0.052199  1.347171 -0.072372
2013-01-05  0.778213  0.313091 -1.678260  1.015810
2013-01-06  2.024295  1.163184  0.144727  0.690490                   A         B         C         D
2013-01-05  1.015810 -1.678260  0.313091  0.778213
2013-01-01  0.311965 -0.356805  0.278872 -1.548284
2013-01-06  0.690490  0.144727  1.163184  2.024295
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-03 -1.832186  0.677821  0.893330 -1.382369
2013-01-04 -0.072372  1.347171  0.052199 -1.951638
-------------------------------------------
Source Code of a Unmatched Cell 5
-------------------------------------------
# While selecting and setting can be done by standard expressions, we should use optimized pandas data access methods
# .at, .iat, .loc, .iloc and .ix
# Selecting a single column which gives a Series
df['A']

# Selecting via [] which slices the rows
df[0:3] # last index is not included
df['20130102':'20130104']

# Selection by a label
# For getting a cross selection using a label
df.loc[dates[0]]

# Selecting a multi-axis by laebls
df.loc[:, ['A', 'B']]

# Showing label slicing, both endpoints are included
df.loc['20130102':'20130104', ['A', 'B']]

# Reduction in dimentions of the returned object
df.loc['20130102', ['A', 'B']]

# For getting a scalar value
df.loc[dates[0],'A']

# For getting fast access to a scalar (equivalent to the prior code)
df.at[dates[0], 'A']

-----------------
Original output:
2013-01-01    0.483842
2013-01-02   -0.245957
2013-01-03   -1.438666
2013-01-04    0.371391
2013-01-05   -0.592473
2013-01-06    0.299948
Freq: D, Name: A, dtype: float64                   A         B         C         D
2013-01-01  0.483842  1.389233 -1.604447  0.686504
2013-01-02 -0.245957  0.424874  0.683387 -1.003888
2013-01-03 -1.438666  0.021363  0.025582 -1.372246                   A         B         C         D
2013-01-02 -0.245957  0.424874  0.683387 -1.003888
2013-01-03 -1.438666  0.021363  0.025582 -1.372246
2013-01-04  0.371391 -0.065038  1.336967 -0.135345A    0.483842
B    1.389233
C   -1.604447
D    0.686504
Name: 2013-01-01 00:00:00, dtype: float64                   A         B
2013-01-01  0.483842  1.389233
2013-01-02 -0.245957  0.424874
2013-01-03 -1.438666  0.021363
2013-01-04  0.371391 -0.065038
2013-01-05 -0.592473 -0.322534
2013-01-06  0.299948  0.329729                   A         B
2013-01-02 -0.245957  0.424874
2013-01-03 -1.438666  0.021363
2013-01-04  0.371391 -0.065038A   -0.245957
B    0.424874
Name: 2013-01-02 00:00:00, dtype: float640.483842225051928250.48384222505192825
Executed output:
2013-01-01    0.311965
2013-01-02    0.644573
2013-01-03   -1.832186
2013-01-04   -0.072372
2013-01-05    1.015810
2013-01-06    0.690490
Freq: D, Name: A, dtype: float64                   A         B         C         D
2013-01-01  0.311965 -0.356805  0.278872 -1.548284
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-03 -1.832186  0.677821  0.893330 -1.382369                   A         B         C         D
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-03 -1.832186  0.677821  0.893330 -1.382369
2013-01-04 -0.072372  1.347171  0.052199 -1.951638A    0.311965
B   -0.356805
C    0.278872
D   -1.548284
Name: 2013-01-01 00:00:00, dtype: float64                   A         B
2013-01-01  0.311965 -0.356805
2013-01-02  0.644573  0.159547
2013-01-03 -1.832186  0.677821
2013-01-04 -0.072372  1.347171
2013-01-05  1.015810 -1.678260
2013-01-06  0.690490  0.144727                   A         B
2013-01-02  0.644573  0.159547
2013-01-03 -1.832186  0.677821
2013-01-04 -0.072372  1.347171A    0.644573
B    0.159547
Name: 2013-01-02 00:00:00, dtype: float640.311965106163461350.31196510616346135
-------------------------------------------
Source Code of a Unmatched Cell 6
-------------------------------------------
# Selection by position 
# select via the position of passed integers
df.iloc[3] # 4th date as 3 in index corresponds to the 4th value

# By integer slices, acting similar to numpy/python
df.iloc[3:5, 0:2] # Again, ignores the 5th index(6th value); 3:5 gives 4th and 5th value

# By lists of integer position locations, similar to numpy/python style
df.iloc[[1, 2, 4], [0, 2]]

# For slicing rows explicitly
df.iloc[1:3,:]

# For slicing columns explicitly
df.iloc[:, 1:3]

# For getting a value explicitly
df.iloc[1, 1]

# For getting fast access to a scalar (equivalent to previous method)
df.iat[1, 1]

-----------------
Original output:
A    0.371391
B   -0.065038
C    1.336967
D   -0.135345
Name: 2013-01-04 00:00:00, dtype: float64                   A         B
2013-01-04  0.371391 -0.065038
2013-01-05 -0.592473 -0.322534                   A         C
2013-01-02 -0.245957  0.683387
2013-01-03 -1.438666  0.025582
2013-01-05 -0.592473 -0.281605                   A         B         C         D
2013-01-02 -0.245957  0.424874  0.683387 -1.003888
2013-01-03 -1.438666  0.021363  0.025582 -1.372246                   B         C
2013-01-01  1.389233 -1.604447
2013-01-02  0.424874  0.683387
2013-01-03  0.021363  0.025582
2013-01-04 -0.065038  1.336967
2013-01-05 -0.322534 -0.281605
2013-01-06  0.329729  0.4737230.424874202995277670.42487420299527767
Executed output:
A   -0.072372
B    1.347171
C    0.052199
D   -1.951638
Name: 2013-01-04 00:00:00, dtype: float64                   A         B
2013-01-04 -0.072372  1.347171
2013-01-05  1.015810 -1.678260                   A         C
2013-01-02  0.644573  0.004699
2013-01-03 -1.832186  0.893330
2013-01-05  1.015810  0.313091                   A         B         C         D
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-03 -1.832186  0.677821  0.893330 -1.382369                   B         C
2013-01-01 -0.356805  0.278872
2013-01-02  0.159547  0.004699
2013-01-03  0.677821  0.893330
2013-01-04  1.347171  0.052199
2013-01-05 -1.678260  0.313091
2013-01-06  0.144727  1.1631840.159546559122707130.15954655912270713
-------------------------------------------
Source Code of a Unmatched Cell 7
-------------------------------------------
# Boolean Indexing
# Using a single column's value to select data
df[df.A > 0]

# A where operation for getting 
df[df > 0] # Converted all <= 0 to NaN

# Using the isin() method for filtering 
df2 = df.copy()
df2['E'] = ['one', 'one', 'two', 'three', 'four', 'three']
df2
df2[df2['E'].isin(['two', 'four'])]

-----------------
Original output:
                   A         B         C         D
2013-01-01  0.483842  1.389233 -1.604447  0.686504
2013-01-04  0.371391 -0.065038  1.336967 -0.135345
2013-01-06  0.299948  0.329729  0.473723  0.888519                   A         B         C         D
2013-01-01  0.483842  1.389233       NaN  0.686504
2013-01-02       NaN  0.424874  0.683387       NaN
2013-01-03       NaN  0.021363  0.025582       NaN
2013-01-04  0.371391       NaN  1.336967       NaN
2013-01-05       NaN       NaN       NaN  1.060983
2013-01-06  0.299948  0.329729  0.473723  0.888519                   A         B         C         D      E
2013-01-01  0.483842  1.389233 -1.604447  0.686504    one
2013-01-02 -0.245957  0.424874  0.683387 -1.003888    one
2013-01-03 -1.438666  0.021363  0.025582 -1.372246    two
2013-01-04  0.371391 -0.065038  1.336967 -0.135345  three
2013-01-05 -0.592473 -0.322534 -0.281605  1.060983   four
2013-01-06  0.299948  0.329729  0.473723  0.888519  three                   A         B         C         D     E
2013-01-03 -1.438666  0.021363  0.025582 -1.372246   two
2013-01-05 -0.592473 -0.322534 -0.281605  1.060983  four
Executed output:
                   A         B         C         D
2013-01-01  0.311965 -0.356805  0.278872 -1.548284
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-05  1.015810 -1.678260  0.313091  0.778213
2013-01-06  0.690490  0.144727  1.163184  2.024295                   A         B         C         D
2013-01-01  0.311965       NaN  0.278872       NaN
2013-01-02  0.644573  0.159547  0.004699  0.771603
2013-01-03       NaN  0.677821  0.893330       NaN
2013-01-04       NaN  1.347171  0.052199       NaN
2013-01-05  1.015810       NaN  0.313091  0.778213
2013-01-06  0.690490  0.144727  1.163184  2.024295                   A         B         C         D      E
2013-01-01  0.311965 -0.356805  0.278872 -1.548284    one
2013-01-02  0.644573  0.159547  0.004699  0.771603    one
2013-01-03 -1.832186  0.677821  0.893330 -1.382369    two
2013-01-04 -0.072372  1.347171  0.052199 -1.951638  three
2013-01-05  1.015810 -1.678260  0.313091  0.778213   four
2013-01-06  0.690490  0.144727  1.163184  2.024295  three                   A         B         C         D     E
2013-01-03 -1.832186  0.677821  0.893330 -1.382369   two
2013-01-05  1.015810 -1.678260  0.313091  0.778213  four
-------------------------------------------
Source Code of a Unmatched Cell 8
-------------------------------------------
# Setting
# setting a new column automatically aligns the data by indexes
s1 = pd.Series([1, 2, 3, 4, 5, 6], index = pd.date_range('20130102', periods = 6))

# Setting values by label
df.at[dates[0], 'A'] = 0

# Setting values by position 
df.iat[0, 1] = 0

# Setting with assigning with a numpy array
df.loc[:, 'D'] = np.array([5] * len(df))

# A where operation with setting
df2 = df.copy()
df2[df2 > 0] = -df2
df2

-----------------
Original output:
                   A         B         C  D
2013-01-01  0.000000  0.000000 -1.604447 -5
2013-01-02 -0.245957 -0.424874 -0.683387 -5
2013-01-03 -1.438666 -0.021363 -0.025582 -5
2013-01-04 -0.371391 -0.065038 -1.336967 -5
2013-01-05 -0.592473 -0.322534 -0.281605 -5
2013-01-06 -0.299948 -0.329729 -0.473723 -5
Executed output:
                   A         B         C  D
2013-01-01  0.000000  0.000000 -0.278872 -5
2013-01-02 -0.644573 -0.159547 -0.004699 -5
2013-01-03 -1.832186 -0.677821 -0.893330 -5
2013-01-04 -0.072372 -1.347171 -0.052199 -5
2013-01-05 -1.015810 -1.678260 -0.313091 -5
2013-01-06 -0.690490 -0.144727 -1.163184 -5
-------------------------------------------
Source Code of a Unmatched Cell 9
-------------------------------------------
# Missing data
# Pandas primarily uses the value np.nan to represent missing data. It is by default not included in the computations 
# reindexing allows you to add/change/delete the index on a specifiid axis. This returns a copy of the data
df1 = df.reindex(index = dates[0:4], columns = list(df.columns) + ['E'])
df1.loc[dates[0]:dates[1], 'E'] = 1
df1

# To drop any rows that have missing data
df1.dropna(how = 'any')

# To fill missing data
df1.fillna(value = 5)

# To get the boolean mask where values are nan
pd.isnull(df1)

-----------------
Original output:
                   A         B         C  D    E
2013-01-01  0.000000  0.000000 -1.604447  5  1.0
2013-01-02 -0.245957  0.424874  0.683387  5  1.0
2013-01-03 -1.438666  0.021363  0.025582  5  NaN
2013-01-04  0.371391 -0.065038  1.336967  5  NaN                   A         B         C  D    E
2013-01-01  0.000000  0.000000 -1.604447  5  1.0
2013-01-02 -0.245957  0.424874  0.683387  5  1.0                   A         B         C  D    E
2013-01-01  0.000000  0.000000 -1.604447  5  1.0
2013-01-02 -0.245957  0.424874  0.683387  5  1.0
2013-01-03 -1.438666  0.021363  0.025582  5  5.0
2013-01-04  0.371391 -0.065038  1.336967  5  5.0                A      B      C      D      E
2013-01-01  False  False  False  False  False
2013-01-02  False  False  False  False  False
2013-01-03  False  False  False  False   True
2013-01-04  False  False  False  False   True
Executed output:
                   A         B         C  D    E
2013-01-01  0.000000  0.000000  0.278872  5  1.0
2013-01-02  0.644573  0.159547  0.004699  5  1.0
2013-01-03 -1.832186  0.677821  0.893330  5  NaN
2013-01-04 -0.072372  1.347171  0.052199  5  NaN                   A         B         C  D    E
2013-01-01  0.000000  0.000000  0.278872  5  1.0
2013-01-02  0.644573  0.159547  0.004699  5  1.0                   A         B         C  D    E
2013-01-01  0.000000  0.000000  0.278872  5  1.0
2013-01-02  0.644573  0.159547  0.004699  5  1.0
2013-01-03 -1.832186  0.677821  0.893330  5  5.0
2013-01-04 -0.072372  1.347171  0.052199  5  5.0                A      B      C      D      E
2013-01-01  False  False  False  False  False
2013-01-02  False  False  False  False  False
2013-01-03  False  False  False  False   True
2013-01-04  False  False  False  False   True
-------------------------------------------
Source Code of a Unmatched Cell 10
-------------------------------------------
# Operations
# Operations in general exclude missing data
# Performing a descriptive statistic
df.mean() # Gives a column wise mean, completely ignores NA


# Same operation on the other axis
df.mean(1) # Other axis means a row wise mean or an index wise mean

# Operating with objects that have different dimensionality and need alignment. In addition, pandas automatically broadcast 
# along the specified dimension
s = pd.Series([1, 3, 5, np.nan, 6, 8], index = dates).shift(2) # Like lag/lead in data.table!
s

df.sub(s, axis = 'index')

-----------------
Original output:
A   -0.267626
B    0.064732
C    0.105601
D    5.000000
dtype: float64
Executed output:
A    0.074386
B    0.108501
C    0.450896
D    5.000000
dtype: float642013-01-01    1.319718
2013-01-02    1.452205
2013-01-03    1.184741
2013-01-04    1.581750
2013-01-05    1.162660
2013-01-06    1.749600
Freq: D, dtype: float642013-01-01    NaN
2013-01-02    NaN
2013-01-03    1.0
2013-01-04    3.0
2013-01-05    5.0
2013-01-06    NaN
Freq: D, dtype: float64                   A         B         C    D
2013-01-01       NaN       NaN       NaN  NaN
2013-01-02       NaN       NaN       NaN  NaN
2013-01-03 -2.832186 -0.322179 -0.106670  4.0
2013-01-04 -3.072372 -1.652829 -2.947801  2.0
2013-01-05 -3.984190 -6.678260 -4.686909  0.0
2013-01-06       NaN       NaN       NaN  NaN
-------------------------------------------
Source Code of a Unmatched Cell 11
-------------------------------------------
# Apply
# Applying functions to the data
df
df.apply(np.cumsum)

-----------------
Original output:
                   A         B         C  D
2013-01-01  0.000000  0.000000 -1.604447  5
2013-01-02 -0.245957  0.424874  0.683387  5
2013-01-03 -1.438666  0.021363  0.025582  5
2013-01-04  0.371391 -0.065038  1.336967  5
2013-01-05 -0.592473 -0.322534 -0.281605  5
2013-01-06  0.299948  0.329729  0.473723  5                   A         B         C   D
2013-01-01  0.000000  0.000000 -1.604447   5
2013-01-02 -0.245957  0.424874 -0.921060  10
2013-01-03 -1.684622  0.446237 -0.895477  15
2013-01-04 -1.313232  0.381199  0.441490  20
2013-01-05 -1.905705  0.058664  0.159885  25
2013-01-06 -1.605757  0.388394  0.633608  30
Executed output:
                   A         B         C  D
2013-01-01  0.000000  0.000000  0.278872  5
2013-01-02  0.644573  0.159547  0.004699  5
2013-01-03 -1.832186  0.677821  0.893330  5
2013-01-04 -0.072372  1.347171  0.052199  5
2013-01-05  1.015810 -1.678260  0.313091  5
2013-01-06  0.690490  0.144727  1.163184  5                   A         B         C   D
2013-01-01  0.000000  0.000000  0.278872   5
2013-01-02  0.644573  0.159547  0.283571  10
2013-01-03 -1.187613  0.837367  1.176901  15
2013-01-04 -1.259984  2.184539  1.229100  20
2013-01-05 -0.244175  0.506278  1.542191  25
2013-01-06  0.446316  0.651006  2.705375  30
