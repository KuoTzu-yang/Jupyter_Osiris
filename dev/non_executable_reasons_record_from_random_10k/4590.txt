3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
%matplotlib inline
import argparse
import colorsys
import imghdr
import os
import random

import matplotlib.pyplot as plt
from scipy.misc import imresize
import numpy as np
from keras import backend as K
from keras.models import load_model
from PIL import Image, ImageDraw, ImageFont
from moviepy.editor import VideoFileClip

from yad2k.models.keras_yolo import yolo_eval, yolo_head

# Code from Allanzelener repository (https://github.com/allanzelener/YAD2K)

# Define model assets location
model_path = 'model_data\\yolo-voc.h5'
assert model_path.endswith('.h5'), 'Keras model must be a .h5 file.'
anchors_path = 'model_data\\yolo-voc_anchors.txt'
classes_path = 'model_data\\pascal_classes.txt'
test_path = 'images\\'
output_path = 'images_out\\'

if not os.path.exists(output_path):
    print('Creating output path {}'.format(output_path))
    os.mkdir(output_path)

sess = K.get_session()

with open(classes_path) as f:
    class_names = f.readlines()
class_names = [c.strip() for c in class_names]

with open(anchors_path) as f:
    anchors = f.readline()
    anchors = [float(x) for x in anchors.split(',')]
    anchors = np.array(anchors).reshape(-1, 2)

yolo_model = load_model(model_path)

# Verify model, anchors, and classes are compatible
num_classes = len(class_names)
num_anchors = len(anchors)
# TODO: Assumes dim ordering is channel last
model_output_channels = yolo_model.layers[-1].output_shape[-1]
assert model_output_channels == num_anchors * (num_classes + 5), \
    'Mismatch between model and given anchor and class sizes. ' \
    'Specify matching anchors and classes with --anchors_path and ' \
    '--classes_path flags.'
print('{} model, anchors, and classes loaded.'.format(model_path))

# Check if model is fully convolutional, assuming channel last order.
model_image_size = yolo_model.layers[0].input_shape[1:3]
is_fixed_size = model_image_size != (None, None)

# Generate colors for drawing bounding boxes.
hsv_tuples = [(x / len(class_names), 1., 1.)for x in range(len(class_names))]
colors = list(map(lambda x: colorsys.hsv_to_rgb(*x), hsv_tuples))
colors = list(map(lambda x: (int(x[0] * 255), int(x[1] * 255), int(x[2] * 255)),colors))
random.seed(10101)  # Fixed seed for consistent colors across runs.
random.shuffle(colors)  # Shuffle colors to decorrelate adjacent classes.
random.seed(None)  # Reset seed to default.

# Generate output tensor targets for filtered bounding boxes.
# TODO: Wrap these backend operations with Keras layers.
yolo_outputs = yolo_head(yolo_model.output, anchors, len(class_names))
input_image_shape = K.placeholder(shape=(2, ))
boxes, scores, classes = yolo_eval(yolo_outputs,input_image_shape,score_threshold=0.3,iou_threshold=0.5)



------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-be08c5b7aa45>[0m in [0;36m<module>[0;34m()[0m
[1;32m     11[0m [0;32mfrom[0m [0mscipy[0m[0;34m.[0m[0mmisc[0m [0;32mimport[0m [0mimresize[0m[0;34m[0m[0m
[1;32m     12[0m [0;32mimport[0m [0mnumpy[0m [0;32mas[0m [0mnp[0m[0;34m[0m[0m
[0;32m---> 13[0;31m [0;32mfrom[0m [0mkeras[0m [0;32mimport[0m [0mbackend[0m [0;32mas[0m [0mK[0m[0;34m[0m[0m
[0m[1;32m     14[0m [0;32mfrom[0m [0mkeras[0m[0;34m.[0m[0mmodels[0m [0;32mimport[0m [0mload_model[0m[0;34m[0m[0m
[1;32m     15[0m [0;32mfrom[0m [0mPIL[0m [0;32mimport[0m [0mImage[0m[0;34m,[0m [0mImageDraw[0m[0;34m,[0m [0mImageFont[0m[0;34m[0m[0m

[0;31mImportError[0m: No module named 'keras'
ImportError: No module named 'keras'

Executability                            : False
