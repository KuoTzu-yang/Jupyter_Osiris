3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')

# import the function which I will need in this program.
from turtle import Turtle, Screen
import random
import time
import threading
import turtle
import datetime
i = 0

#Definit the screen of playground
playGround = Screen()
playGround.screensize(500,400)
playGround.bgcolor("black")
playGround.title("Traffic Light")

# give an boundary of the light
bdy = Turtle()
bdy.speed(10)
bdy.color("white")
bdy.penup()
bdy.setposition(-100, 200)
bdy.width(2)
bdy.left(180)
bdy.fd(15)
bdy.pendown()
bdy.right(90)
bdy.fd(15)
bdy.right(90)
bdy.fd(30)
bdy.right(90)
bdy.fd(80)
bdy.right(90)
bdy.fd(30)
bdy.right(90)
bdy.fd(80)
bdy.right(90)
bdy.fd(30)
bdy.hideturtle()

# Definit the red Light
redlight = Turtle()
redlight.penup()
redlight.shape("circle")
redlight.turtlesize(1)
redlight.color("red")
redlight.hideturtle()
redlight.setposition(-100, 200)
redlight.showturtle()

# Definit the yellow Light
yellowlight = Turtle()
yellowlight.penup()
yellowlight.shape("circle")
yellowlight.turtlesize(1)
yellowlight.color("yellow")
yellowlight.hideturtle()
yellowlight.setposition(-100, 175)
yellowlight.showturtle()

# Definit the green Light
greenlight = Turtle()
greenlight.penup()
greenlight.shape("circle")
greenlight.turtlesize(1)
greenlight.color("green")
greenlight.hideturtle()
greenlight.setposition(-100, 150)
greenlight.showturtle()

# Draw the road and pedestrian crossing
road = Turtle()
road.speed(10)
road.color("white")
road.penup()
road.setposition(-500, 100)
road.pendown()
road.width(10)
road.fd(1000)
road.right(90)
road.penup()
road.fd(200)
road.right(90)
road.pendown()
road.fd(1000)
road.width(5)
road.left(180)
for xd in range(10):
    road.penup()
    road.setposition(-40,-90+20 * xd)
    road.pendown()
    road.fd(150)
road.penup()
road.hideturtle()


#Definit the cars
#Definite the numbers of cars,appearence of cars,initialPosition of cars.
#Divede the road in 5 lanes and cars drive on their own lane.
numTurtles = 5
turtles = []
y = -100
def initialPosition():
    global y
    for turtle in turtles:
        turtle.penup()
        turtle.speed(1000)
        y = y + 35
        turtle.setposition(random.randrange(-450, -200), y)
        turtle.pendown()
        turtle.color("white")
        turtle.shape("turtle")
        turtle.penup()
        
for i in range(numTurtles):
    turtles.append(turtle.Turtle())

    
#Definite people
#Definite the numbers of people,appearence of people,initialPosition of people.
#Give a random initial location for people, they can at the both side of the road.I set a random variable "updown"
#The "updown" is used to distribute people to different side of road and judge which side they stand then walk through the road.
numPeoples = 20
peoples = []
def initialPosition_people():
    for people in peoples:
        updown = random.choice([1,0])
        people.penup()
        people.speed(1000)
        if updown == 1:
            people.setposition(random.randrange(-10,100),random.randrange(120,250))
            people.right(90)
        else:
            people.setposition(random.randrange(-10,100),random.randrange(-160,-110))
            people.left(90)
            
        people.pendown()
        people.color("orange")
        people.shape("circle")
        people.turtlesize(0.4)
        people.penup()
    
for i in range(numPeoples):
    peoples.append(turtle.Turtle())



# Definit the traffic light change
# Three traffic light:red,yellow and green
# When they turndown, they show "grey" color

def redlight_on():
    redlight.color("red")

def redlight_down():
    redlight.color("grey")

def yellowlight_on():
    yellowlight.color("yellow")

def yellowlight_down():
    yellowlight.color("grey")

def greenlight_on():
    greenlight.color("green")

def greenlight_down():
    greenlight.color("grey")

# Preparation before fomal beginning.
time.sleep(1)
redlight_down()
yellowlight_down()
greenlight_down()


#Definit the position range of cars and people which would be affected by the traffic lights
#When cars and people near the pedestrian crossing, their'movement should be affected by the traffic lights.
#When cars and people run out of the boundary, they should come back the initial position randomly.

def runone():
    global i
    for turtle in turtles:
        if abs(turtle.xcor() + 75) > 30 or i == 3:
            if turtle.xcor() > 400:
                turtle.hideturtle()
                turtle.setposition(random.randrange(-600,-400),turtle.ycor())
                turtle.showturtle()
            else: 
                turtle.fd(random.randrange(30,49))

                
    for people in peoples:
        if people.heading() == 90.0:
            if abs(people.ycor() + 110) > 10 or i == 1:
                if people.ycor() > 160:
                    people.hideturtle()
                    people.setposition(random.randrange(-10, 100), random.randrange(-160,-110))
                    people.showturtle()
                else:
                    people.fd(random.randrange(15, 20))
        else:
            if abs(people.ycor() - 110) > 10 or i == 1:
                if people.ycor() < -160:
                    people.hideturtle()
                    people.setposition(random.randrange(-10, 100), random.randrange(110,160))
                    people.showturtle()
                else:
                    people.fd(random.randrange(10, 15))

                    
#Set the sleeptime of traffic light
#sleeptime means how many seconds for each light to keep.
#Make sleeptime as a variable 
#Extract the time of now from computer.
#Use the subtraction to get the timedelta,and then judge if the timedelta is less than sleeptime.
#If the timedelta is less than sleeptime, act the function of "runone"

def run(sleeptime):
    t = datetime.datetime.now()
    while (datetime.datetime.now()- t).seconds + ((datetime.datetime.now()- t).microseconds)*0.000001 < sleeptime:
        playGround.ontimer(runone(),3)
        time.sleep(0.003)


        
#Definite the loop of traffic light change.
#The global i is used to symbolize which light is on.

def interval():
    global i
    redlight_on()
    i = 1
    run(6)
    redlight_down()

    yellowlight_on()
    i = 2
    run(3)
    yellowlight_down()

    greenlight_on()
    i = 3
    run(6)
    greenlight_down()
    interval()
    
    yellowlight_on()
    i = 2
    run(3)
    yellowlight_down()    

    
    
initialPosition()
initialPosition_people()
interval()


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mTclError[0m                                  Traceback (most recent call last)
[0;32m<ipython-input-1-a00a012559fd>[0m in [0;36m<module>[0;34m[0m
[1;32m     12[0m [0;34m[0m[0m
[1;32m     13[0m [0;31m#Definit the screen of playground[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 14[0;31m [0mplayGround[0m [0;34m=[0m [0mScreen[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     15[0m [0mplayGround[0m[0;34m.[0m[0mscreensize[0m[0;34m([0m[0;36m500[0m[0;34m,[0m[0;36m400[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     16[0m [0mplayGround[0m[0;34m.[0m[0mbgcolor[0m[0;34m([0m[0;34m"black"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py36/lib/python3.6/turtle.py[0m in [0;36mScreen[0;34m()[0m
[1;32m   3660[0m     else return the existing one."""
[1;32m   3661[0m     [0;32mif[0m [0mTurtle[0m[0;34m.[0m[0m_screen[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3662[0;31m         [0mTurtle[0m[0;34m.[0m[0m_screen[0m [0;34m=[0m [0m_Screen[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3663[0m     [0;32mreturn[0m [0mTurtle[0m[0;34m.[0m[0m_screen[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3664[0m [0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py36/lib/python3.6/turtle.py[0m in [0;36m__init__[0;34m(self)[0m
[1;32m   3676[0m         [0;31m# preserved (perhaps by passing it as an optional parameter)[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3677[0m         [0;32mif[0m [0m_Screen[0m[0;34m.[0m[0m_root[0m [0;32mis[0m [0;32mNone[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 3678[0;31m             [0m_Screen[0m[0;34m.[0m[0m_root[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_root[0m [0;34m=[0m [0m_Root[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   3679[0m             [0mself[0m[0;34m.[0m[0m_root[0m[0;34m.[0m[0mtitle[0m[0;34m([0m[0m_Screen[0m[0;34m.[0m[0m_title[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   3680[0m             [0mself[0m[0;34m.[0m[0m_root[0m[0;34m.[0m[0mondestroy[0m[0;34m([0m[0mself[0m[0;34m.[0m[0m_destroy[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py36/lib/python3.6/turtle.py[0m in [0;36m__init__[0;34m(self)[0m
[1;32m    432[0m     [0;34m"""Root class for Screen based on Tkinter."""[0m[0;34m[0m[0;34m[0m[0m
[1;32m    433[0m     [0;32mdef[0m [0m__init__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 434[0;31m         [0mTK[0m[0;34m.[0m[0mTk[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    435[0m [0;34m[0m[0m
[1;32m    436[0m     [0;32mdef[0m [0msetupcanvas[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mwidth[0m[0;34m,[0m [0mheight[0m[0;34m,[0m [0mcwidth[0m[0;34m,[0m [0mcheight[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py36/lib/python3.6/tkinter/__init__.py[0m in [0;36m__init__[0;34m(self, screenName, baseName, className, useTk, sync, use)[0m
[1;32m   2021[0m                 [0mbaseName[0m [0;34m=[0m [0mbaseName[0m [0;34m+[0m [0mext[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2022[0m         [0minteractive[0m [0;34m=[0m [0;36m0[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 2023[0;31m         [0mself[0m[0;34m.[0m[0mtk[0m [0;34m=[0m [0m_tkinter[0m[0;34m.[0m[0mcreate[0m[0;34m([0m[0mscreenName[0m[0;34m,[0m [0mbaseName[0m[0;34m,[0m [0mclassName[0m[0;34m,[0m [0minteractive[0m[0;34m,[0m [0mwantobjects[0m[0;34m,[0m [0museTk[0m[0;34m,[0m [0msync[0m[0;34m,[0m [0muse[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   2024[0m         [0;32mif[0m [0museTk[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m   2025[0m             [0mself[0m[0;34m.[0m[0m_loadtk[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;31mTclError[0m: no display name and no $DISPLAY environment variable
TclError: no display name and no $DISPLAY environment variable

Executability                            : False
