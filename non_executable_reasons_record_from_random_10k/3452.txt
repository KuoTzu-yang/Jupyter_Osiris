3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
# Built from YouTube tutorial by sentdex
# https://www.youtube.com/playlist?list=PLQVvvaa0QuDf2JswnfiGkliBInZnIC4HL

import nltk
import random
from nltk.classify.scikitlearn import SklearnClassifier
from sklearn.naive_bayes import MultinomialNB, BernoulliNB
from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC
from nltk.classify import ClassifierI
import pickle
from statistics import mode
from nltk.tokenize import word_tokenize


class VoteClassifier(ClassifierI):
    def __init__(self, *classifiers):
        self._classifiers = classifiers

    def classify(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)
        return mode(votes)

    def confidence(self, features):
        votes = []
        for c in self._classifiers:
            v = c.classify(features)
            votes.append(v)

        choice_votes = votes.count(mode(votes))
        conf = choice_votes / len(votes)
        return conf
  

short_pos = open("positive.txt", encoding = "ISO-8859-1", mode="r").read() # read positive sentiment doc
short_neg = open("negative.txt",encoding = "ISO-8859-1",mode="r").read() # negative sentiment doc

all_words = []
documents = []

#  j is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'): #for each line in pos doc
    documents.append((p, "pos")) #add line to doc list
    words = word_tokenize(p) # tokenize words
    pos = nltk.pos_tag(words) #list of words with positive tag
    for w in pos:
        if w[1][0] in allowed_word_types: #if pos word is adj
            all_words.append(w[0].lower()) #add to all_words list

for p in short_neg.split('\n'):
    documents.append( (p, "neg") )
    words = word_tokenize(p)
    pos = nltk.pos_tag(words)
    for w in pos:
        if w[1][0] in allowed_word_types:
            all_words.append(w[0].lower())

            
save_documents = open("pickled_algos/documents.pickle","wb")
pickle.dump(documents, save_documents)
save_documents.close()

all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

save_word_features = open("pickled_algos/word_features5k.pickle","wb")
pickle.dump(word_features, save_word_features)
save_word_features.close()


def find_features(document):
    words = word_tokenize(document)
    features = {}
    for w in word_features:
        features[w] = (w in words)

    return features

featuresets = [(find_features(rev), category) for (rev, category) in documents]

save_featuresets = open("pickled_algos/featuresets.pickle","wb")
pickle.dump(featuresets, save_featuresets)
save_featuresets.close()

random.shuffle(featuresets)
print(len(featuresets))

testing_set = featuresets[10000:]
training_set = featuresets[:10000]


classifier = nltk.NaiveBayesClassifier.train(training_set)
print("Original Naive Bayes Algo accuracy percent:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

###############
save_classifier = open("pickled_algos/originalnaivebayes5k.pickle","wb")
pickle.dump(classifier, save_classifier)
save_classifier.close()

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier accuracy percent:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

save_classifier = open("pickled_algos/MNB_classifier5k.pickle","wb")
pickle.dump(MNB_classifier, save_classifier)
save_classifier.close()

BernoulliNB_classifier = SklearnClassifier(BernoulliNB())
BernoulliNB_classifier.train(training_set)
print("BernoulliNB_classifier accuracy percent:", (nltk.classify.accuracy(BernoulliNB_classifier, testing_set))*100)

save_classifier = open("pickled_algos/BernoulliNB_classifier5k.pickle","wb")
pickle.dump(BernoulliNB_classifier, save_classifier)
save_classifier.close()

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier accuracy percent:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

save_classifier = open("pickled_algos/LogisticRegression_classifier5k.pickle","wb")
pickle.dump(LogisticRegression_classifier, save_classifier)
save_classifier.close()


LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier accuracy percent:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

save_classifier = open("pickled_algos/LinearSVC_classifier5k.pickle","wb")
pickle.dump(LinearSVC_classifier, save_classifier)
save_classifier.close()


##NuSVC_classifier = SklearnClassifier(NuSVC())
##NuSVC_classifier.train(training_set)
##print("NuSVC_classifier accuracy percent:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)


SGDC_classifier = SklearnClassifier(SGDClassifier())
SGDC_classifier.train(training_set)
print("SGDClassifier accuracy percent:",nltk.classify.accuracy(SGDC_classifier, testing_set)*100)

save_classifier = open("pickled_algos/SGDC_classifier5k.pickle","wb")
pickle.dump(SGDC_classifier, save_classifier)
save_classifier.close()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mLookupError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-bef711697b06>[0m in [0;36m<module>[0;34m()[0m
[1;32m     50[0m [0;32mfor[0m [0mp[0m [0;32min[0m [0mshort_pos[0m[0;34m.[0m[0msplit[0m[0;34m([0m[0;34m'\n'[0m[0;34m)[0m[0;34m:[0m [0;31m#for each line in pos doc[0m[0;34m[0m[0m
[1;32m     51[0m     [0mdocuments[0m[0;34m.[0m[0mappend[0m[0;34m([0m[0;34m([0m[0mp[0m[0;34m,[0m [0;34m"pos"[0m[0;34m)[0m[0;34m)[0m [0;31m#add line to doc list[0m[0;34m[0m[0m
[0;32m---> 52[0;31m     [0mwords[0m [0;34m=[0m [0mword_tokenize[0m[0;34m([0m[0mp[0m[0;34m)[0m [0;31m# tokenize words[0m[0;34m[0m[0m
[0m[1;32m     53[0m     [0mpos[0m [0;34m=[0m [0mnltk[0m[0;34m.[0m[0mpos_tag[0m[0;34m([0m[0mwords[0m[0;34m)[0m [0;31m#list of words with positive tag[0m[0;34m[0m[0m
[1;32m     54[0m     [0;32mfor[0m [0mw[0m [0;32min[0m [0mpos[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py35/lib/python3.5/site-packages/nltk/tokenize/__init__.py[0m in [0;36mword_tokenize[0;34m(text, language, preserve_line)[0m
[1;32m    126[0m     [0;34m:[0m[0mtype[0m [0mpreserver_line[0m[0;34m:[0m [0mbool[0m[0;34m[0m[0m
[1;32m    127[0m     """
[0;32m--> 128[0;31m     [0msentences[0m [0;34m=[0m [0;34m[[0m[0mtext[0m[0;34m][0m [0;32mif[0m [0mpreserve_line[0m [0;32melse[0m [0msent_tokenize[0m[0;34m([0m[0mtext[0m[0;34m,[0m [0mlanguage[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    129[0m     return [token for sent in sentences
[1;32m    130[0m             for token in _treebank_word_tokenizer.tokenize(sent)]

[0;32m~/anaconda3/envs/Osiris_py35/lib/python3.5/site-packages/nltk/tokenize/__init__.py[0m in [0;36msent_tokenize[0;34m(text, language)[0m
[1;32m     92[0m     [0;34m:[0m[0mparam[0m [0mlanguage[0m[0;34m:[0m [0mthe[0m [0mmodel[0m [0mname[0m [0;32min[0m [0mthe[0m [0mPunkt[0m [0mcorpus[0m[0;34m[0m[0m
[1;32m     93[0m     """
[0;32m---> 94[0;31m     [0mtokenizer[0m [0;34m=[0m [0mload[0m[0;34m([0m[0;34m'tokenizers/punkt/{0}.pickle'[0m[0;34m.[0m[0mformat[0m[0;34m([0m[0mlanguage[0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m     95[0m     [0;32mreturn[0m [0mtokenizer[0m[0;34m.[0m[0mtokenize[0m[0;34m([0m[0mtext[0m[0;34m)[0m[0;34m[0m[0m
[1;32m     96[0m [0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py35/lib/python3.5/site-packages/nltk/data.py[0m in [0;36mload[0;34m(resource_url, format, cache, verbose, logic_parser, fstruct_reader, encoding)[0m
[1;32m    834[0m [0;34m[0m[0m
[1;32m    835[0m     [0;31m# Load the resource.[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 836[0;31m     [0mopened_resource[0m [0;34m=[0m [0m_open[0m[0;34m([0m[0mresource_url[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    837[0m [0;34m[0m[0m
[1;32m    838[0m     [0;32mif[0m [0mformat[0m [0;34m==[0m [0;34m'raw'[0m[0;34m:[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py35/lib/python3.5/site-packages/nltk/data.py[0m in [0;36m_open[0;34m(resource_url)[0m
[1;32m    952[0m [0;34m[0m[0m
[1;32m    953[0m     [0;32mif[0m [0mprotocol[0m [0;32mis[0m [0;32mNone[0m [0;32mor[0m [0mprotocol[0m[0;34m.[0m[0mlower[0m[0;34m([0m[0;34m)[0m [0;34m==[0m [0;34m'nltk'[0m[0;34m:[0m[0;34m[0m[0m
[0;32m--> 954[0;31m         [0;32mreturn[0m [0mfind[0m[0;34m([0m[0mpath_[0m[0;34m,[0m [0mpath[0m [0;34m+[0m [0;34m[[0m[0;34m''[0m[0;34m][0m[0;34m)[0m[0;34m.[0m[0mopen[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    955[0m     [0;32melif[0m [0mprotocol[0m[0;34m.[0m[0mlower[0m[0;34m([0m[0;34m)[0m [0;34m==[0m [0;34m'file'[0m[0;34m:[0m[0;34m[0m[0m
[1;32m    956[0m         [0;31m# urllib might not use mode='rb', so handle this one ourselves:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py35/lib/python3.5/site-packages/nltk/data.py[0m in [0;36mfind[0;34m(resource_name, paths)[0m
[1;32m    673[0m     [0msep[0m [0;34m=[0m [0;34m'*'[0m [0;34m*[0m [0;36m70[0m[0;34m[0m[0m
[1;32m    674[0m     [0mresource_not_found[0m [0;34m=[0m [0;34m'\n%s\n%s\n%s\n'[0m [0;34m%[0m [0;34m([0m[0msep[0m[0;34m,[0m [0mmsg[0m[0;34m,[0m [0msep[0m[0;34m)[0m[0;34m[0m[0m
[0;32m--> 675[0;31m     [0;32mraise[0m [0mLookupError[0m[0;34m([0m[0mresource_not_found[0m[0;34m)[0m[0;34m[0m[0m
[0m[1;32m    676[0m [0;34m[0m[0m
[1;32m    677[0m [0;34m[0m[0m

[0;31mLookupError[0m: 
**********************************************************************
  Resource [93mpunkt[0m not found.
  Please use the NLTK Downloader to obtain the resource:

  [31m>>> import nltk
  >>> nltk.download('punkt')
  [0m
  Searched in:
    - '/home/dabao/nltk_data'
    - '/usr/share/nltk_data'
    - '/usr/local/share/nltk_data'
    - '/usr/lib/nltk_data'
    - '/usr/local/lib/nltk_data'
    - '/home/dabao/anaconda3/envs/Osiris_py35/nltk_data'
    - '/home/dabao/anaconda3/envs/Osiris_py35/share/nltk_data'
    - '/home/dabao/anaconda3/envs/Osiris_py35/lib/nltk_data'
    - ''
**********************************************************************

LookupError: 
**********************************************************************
  Resource [93mpunkt[0m not found.
  Please use the NLTK Downloader to obtain the resource:

  [31m>>> import nltk
  >>> nltk.download('punkt')
  [0m
  Searched in:
    - '/home/dabao/nltk_data'
    - '/usr/share/nltk_data'
    - '/usr/local/share/nltk_data'
    - '/usr/lib/nltk_data'
    - '/usr/local/lib/nltk_data'
    - '/home/dabao/anaconda3/envs/Osiris_py35/nltk_data'
    - '/home/dabao/anaconda3/envs/Osiris_py35/share/nltk_data'
    - '/home/dabao/anaconda3/envs/Osiris_py35/lib/nltk_data'
    - ''
**********************************************************************


Executability                            : False
