3.6
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
from HelmholtzSolver3D import *
from ExampleBoundaries import Sphere

# Test Problem 1
# Dirichlet boundary condition with phi chose to be the same
# as a point-source at the center of the square.
#
frequency = 100.0 # frequency [Hz]
k = frequencyToWavenumber(frequency)

solver = ExteriorHelmholtzSolver3D(Sphere())

boundaryCondition = solver.dirichletBoundaryCondition()
for i in range(solver.aCenters.shape[0]):
    R = norm(solver.aCenters[i, :])
    boundaryCondition.f[i] = np.exp(1j * k * R) / R

boundaryIncidence = BoundaryIncidence(solver.numberOfElements())
boundaryIncidence.phi.fill(0.0)
boundaryIncidence.v.fill(0.0)

exteriorPoints = np.array([[0.0000, 0.0000,  2.0000],
                           [0.0500, 0.0000,  4.0000],
                           [0.1000, 0.0000,  8.0000],
                           [0.0500, 0.1000, -2.0000]], dtype=np.float32)

exteriorIncidentPhi = np.zeros(exteriorPoints.shape[0], dtype=np.complex64)

boundarySolution = solver.solveBoundary(k, boundaryCondition, boundaryIncidence)
sampleSolution = boundarySolution.solveSamples(exteriorIncidentPhi, exteriorPoints)
print("\n\nTest Problem 1")
print("==============\n")
print(boundarySolution)
print(sampleSolution)


# Test Problem 2
# Neumann boundary condition with v chosen to be the same
# as a point-source at the center of the square.
#
boundaryCondition = solver.neumannBoundaryCondition()
aCenter = solver.oGeometry.centers()
aNormal = solver.oGeometry.normals()
for i in range(solver.aCenters.shape[0]):
    R = norm(aCenter[i, :])
    dot = np.dot(solver.aCenters[i, :], aNormal[i])
    boundaryCondition.f[i] = np.exp(1j * k * R) * dot * (1j * k * R - 1.0) / R**3

boundarySolution = solver.solveBoundary(k, boundaryCondition, boundaryIncidence)
sampleSolution = boundarySolution.solveSamples(exteriorIncidentPhi, exteriorPoints)
print("\n\nTest Problem 2")
print("==============\n")
print(boundarySolution)
print(sampleSolution)


# Test Problem 3
# Dirichlet boundary condition on the full boundary.
# The 400Hz field in this case is generated by a point source
# at (0.5, 0.25)
boundaryCondition = solver.dirichletBoundaryCondition()
sourcePoint = np.array([0.0, 0.0, 3.0], dtype=np.float32)
for i in range(solver.aCenters.shape[0]):
    r = sourcePoint - solver.aCenters[i, :]
    R = norm(r)
    boundaryIncidence.phi[i] = np.exp(1j * k * R) / (4.0 * np.pi * R)
    boundaryCondition.f[i] = boundaryIncidence.phi[i]
    dot = -np.dot(r, aNormal[i])
    boundaryIncidence.v[i] = np.exp(1j * k * R) * dot * (1j * k * R - 1.0) / (4.0 * np.pi * R**3)

boundarySolution = solver.solveBoundary(k, boundaryCondition, boundaryIncidence)

for i in range(exteriorPoints.shape[0]):
    R = norm(exteriorPoints[i, :] - sourcePoint)
    exteriorIncidentPhi[i] = np.exp(1j * k * R) / (4.0 * np.pi * R)
    
sampleSolution = boundarySolution.solveSamples(exteriorIncidentPhi, exteriorPoints)
print("\n\nTest Problem 3")
print("==============\n")
print(boundarySolution)
print(sampleSolution)


# Test Problem 4
# Neumann boundary condition with v=0 on the full boundary.
# The 400Hz field in this case is generated by a point source
# at (0.5, 0.25)
boundaryCondition = solver.neumannBoundaryCondition()

sourcePoint = np.array([0.0, 0.0, 3.0], dtype=np.float32)
for i in range(solver.aCenters.shape[0]):
    r = sourcePoint - solver.aCenters[i, :]
    R = norm(r)
    dot = -np.dot(r, aNormal[i])
    boundaryIncidence.v[i] = np.exp(1j * k * R) * dot * (1j * k * R - 1.0) / (4.0 * np.pi * R**3)

boundarySolution = solver.solveBoundary(k, boundaryCondition, boundaryIncidence)

for i in range(exteriorPoints.shape[0]):
    R = norm(exteriorPoints[i, :] - sourcePoint)
    exteriorIncidentPhi[i] = np.exp(1j * k * R) / (4.0 * np.pi * R)
    
sampleSolution = boundarySolution.solveSamples(exteriorIncidentPhi, exteriorPoints)
print("\n\nTest Problem 4")
print("==============\n")
print(boundarySolution)
print(sampleSolution)

------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m<ipython-input-1-ba0ca2db4757>[0m in [0;36m<module>[0;34m[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mfrom[0m [0mHelmholtzSolver3D[0m [0;32mimport[0m [0;34m*[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0mExampleBoundaries[0m [0;32mimport[0m [0mSphere[0m[0;34m[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'HelmholtzSolver3D'
ModuleNotFoundError: No module named 'HelmholtzSolver3D'

Executability                            : False
