3.7
Executability                            : True
Reproducibility                          : number of matched cells: 3 ; number of cells: 5
Reproducibility                          : matched ratio: 0.6 ; index of matched cells: [0, 1, 3]
-------------------------------------------
Source Code of a Unmatched Cell 2
-------------------------------------------
plt.scatter(k1[:, 0], k1[:, 1])
plt.scatter(k2[:, 0], k2[:, 1])
plt.scatter(k3[:, 0], k3[:, 1])

-----------------
Original output:
<matplotlib.collections.PathCollection at 0x7f5b52cce400>

Executed output:
<matplotlib.collections.PathCollection at 0x7f0ef7a75908>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

-------------------------------------------
Source Code of a Unmatched Cell 4
-------------------------------------------
def weighted_covariance(x, y, likelihoods, mu_k):
    return np.sum(likelihoods * (x - mu_k[0]) * (y - mu_k[1])) / likelihoods.sum()

class EM:
    def __init__(self, k):
        self.k = k
        self.z = np.arange(k)
        self.mu = np.random.choice(data.flatten(), k * 2).reshape((k, 2))  # 2 dimensional
        self.cov = np.stack([np.array([[1., 0.], [0., 1.]]) for _ in range(k)])
        self.pi = np.ones(k) / k
        self.log_likelihoods = None
        
    def expectation_step(self, x):
        for z_i in self.z:
            mu_i = self.mu[z_i]
            cov_i = self.cov[z_i]
            self.log_likelihoods[z_i, :] = self.pi[z_i] + stats.multivariate_normal(mu_i, cov_i).logpdf(x)
        # normalize by marginalizing K
        self.log_likelihoods = self.log_likelihoods - np.log(np.exp(self.log_likelihoods).sum(0))
    
    def maximization_step(self, x):
        for z_i in self.z:
            likelihoods = np.exp(self.log_likelihoods[z_i])
            # weighted average
            self.mu[z_i] = ((x * likelihoods[:, None]) / likelihoods.sum()).sum(0)
            
            # weighted variance
            cov = weighted_covariance(x[:, 0], x[:, 1], likelihoods, self.mu[z_i])
                       
            cov = np.array([[weighted_covariance(x[:, 0], x[:, 0], likelihoods, self.mu[z_i]), cov],
                                     [cov, weighted_covariance(x[:, 1], x[:, 1], likelihoods, self.mu[z_i])]])
            
            if np.all(np.linalg.eigvals(cov) > 0) and (1e-6 < np.linalg.det(cov)):
                self.cov[z_i] = cov
                
            # weighted pi
            self.pi[z_i] = likelihoods.sum() / x.shape[0]
            
    def fit(self, x):
        self.log_likelihoods = np.zeros((self.k, x.shape[0]))
        last_log_likelihood = np.inf
        while np.abs(self.log_likelihoods.sum() - last_log_likelihood) > 0.01:
            last_log_likelihood = self.log_likelihoods.sum()
            self.expectation_step(x)
            self.maximization_step(x)
                
    def predict(self, x):
        log_likelihoods = np.zeros((self.k, x.shape[0]))
        for z_i in self.z:
            mu_i = self.mu[z_i]
            cov_i = self.cov[z_i]
            log_likelihoods[z_i, :] = self.pi[z_i] + stats.multivariate_normal(mu_i, cov_i).logpdf(x)
        return log_likelihoods.argmax(0)
            
m = EM(3)
m.fit(data)
y = m.predict(data)

mask = y == 0
plt.scatter(data[mask][:, 0], data[mask][:, 1])
mask = y == 1
plt.scatter(data[mask][:, 0], data[mask][:, 1])
mask = y == 2
plt.scatter(data[mask][:, 0], data[mask][:, 1])


-----------------
Original output:
[0.33846154 0.36923077 0.29230769]
<matplotlib.collections.PathCollection at 0x7f5b4b5b23c8>

Executed output:
<matplotlib.collections.PathCollection at 0x7f0ef79c1c88>

