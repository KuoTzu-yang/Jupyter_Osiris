3.6
An error occurred while executing the following cell:
------------------
def salary_predictions():
    from sklearn.svm import SVC
    from sklearn.linear_model import LogisticRegression
    from sklearn.ensemble import GradientBoostingClassifier

    from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
    from sklearn.metrics import roc_auc_score
    from sklearn.model_selection import train_test_split
    from sklearn.model_selection import GridSearchCV
    from sklearn.metrics import classification_report
        ##checking nan

    def mangmnetsalry(node):
        n=node[1]['ManagementSalary']
        return n



    df=pd.DataFrame(G.nodes())
    df['degree_centrality']=list(nx.degree_centrality(G).values())
    df['closeness_centrality']=list(nx.closeness_centrality(G,normalized=True).values())
    df['between_centrality']=list(nx.betweenness_centrality(G,normalized=True,endpoints=False).values())
    df['pagerank']=list(nx.pagerank(G).values())
    # df['hubs']=list(nx.hits(G)[0].values())
    # df['authority']=list(nx.hits(G)[1].values())
    df['clustering']=list(nx.clustering(G).values())
    df['degree']=list(nx.degree(G).values())
    df['management']=[mangmnetsalry(node) for node in G.nodes(data=True)]
    trainset=df.loc[~df['management'].isnull(),:]
    predset=df.loc[df['management'].isnull(),:]
    predset.drop(['management'],inplace=True,axis=1)
    X_train,X_test,y_train,y_test=train_test_split(trainset.iloc[:,:7],trainset.iloc[:,7],random_state=0,train_size=0.8)

    clf_lr=LogisticRegression(penalty='l2')
    param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000] }
    clf_lr_gs=GridSearchCV(clf_lr,param_grid=param_grid,scoring='roc_auc')
    clf_lr_gs.fit(X_train,y_train)
    print('Grid best parameter (max. auc): ', clf_lr_gs.best_params_)
    print('Train set AUC(SVC): ', roc_auc_score(y_train, clf_lr_gs.decision_function(X_train)))
    # clf_lr=LogisticRegression(penalty='l2',C=100).fit(X_train,y_train)
    pred_lr=clf_lr_gs.decision_function(X_test)
    print('Test set AUC(LogisticReg): ', roc_auc_score(y_test, pred_lr))
    print('Test set F1(LogisticReg): ', f1_score(y_test, clf_lr_gs.predict(X_test)))
    print('\n\n',classification_report(y_test, clf_lr_gs.predict(X_test)))
    pred_lr_unknown=clf_lr_gs.predict_proba(predset)
    pred_lr_unknown=np.array([i[1] for i in pred_lr_unknown]).reshape((-1,1))

    clf_svc=SVC(probability=True)
    param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000],'gamma': [0.0001, 0.001,0.01,0.1,1,10],'kernel': ['rbf'] }
    clf_svc_gs=GridSearchCV(clf_svc,param_grid=param_grid,scoring='roc_auc')
    clf_svc_gs.fit(X_train,y_train)
    print('Grid best parameter (max. auc): ', clf_svc_gs.best_params_)
    print('Train set AUC(SVC): ', roc_auc_score(y_train, clf_svc_gs.decision_function(X_train)))
    pred_svc=clf_svc_gs.decision_function(X_test)
    print('Test set AUC(SVC): ', roc_auc_score(y_test, pred_svc))
    print('Test set F1(SVC): ', f1_score(y_test, clf_svc_gs.predict(X_test)))
    print('\n\n',classification_report(y_test, clf_svc_gs.predict(X_test)))
    pred_svc_unknown=clf_svc_gs.predict_proba(predset)
    pred_svc_unknown=np.array([i[1] for i in pred_svc_unknown]).reshape((-1,1))

    clf_gbm=GradientBoostingClassifier()
    param_grid = gb_grid_params = {'n_estimators':[100],
                                   'learning_rate': [0.1, 0.01],
                  'max_depth': [4, 8],
                  'min_samples_leaf': [20, 50,100],
                  'max_features': [1.0, 0.5, 0.1] 
                                  }
    clf_gbm_gs=GridSearchCV(clf_gbm,param_grid=param_grid,scoring='roc_auc')
    clf_gbm_gs.fit(X_train,y_train)
    print('Grid best parameter (max. auc): ', clf_gbm_gs.best_params_)
    print('Train set AUC(gbm): ', roc_auc_score(y_train, clf_gbm_gs.decision_function(X_train)))
    pred_gbm=clf_gbm_gs.decision_function(X_test)
    print('Test set AUC(gbm): ', roc_auc_score(y_test, pred_gbm))
    print('Test set F1(gbm): ', f1_score(y_test, clf_gbm_gs.predict(X_test)))
    print('\n\n',classification_report(y_test, clf_gbm_gs.predict(X_test)))
    pred_gbm_unknown=clf_gbm_gs.predict_proba(predset)
    pred_gbm_unknown=np.array([i[1] for i in pred_gbm_unknown]).reshape((-1,1))

    ensemble=list(np.mean(np.array(list(zip(pred_gbm_unknown,pred_lr_unknown,pred_svc_unknown))).reshape(-1,3),axis=1))
    lst=pd.Series(ensemble,index=predset.index)
    return lst
salary_predictions()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mAttributeError[0m                            Traceback (most recent call last)
[0;32m<ipython-input-6-3d935364a60e>[0m in [0;36m<module>[0;34m[0m
[1;32m     80[0m     [0mlst[0m[0;34m=[0m[0mpd[0m[0;34m.[0m[0mSeries[0m[0;34m([0m[0mensemble[0m[0;34m,[0m[0mindex[0m[0;34m=[0m[0mpredset[0m[0;34m.[0m[0mindex[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     81[0m     [0;32mreturn[0m [0mlst[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 82[0;31m [0msalary_predictions[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m<ipython-input-6-3d935364a60e>[0m in [0;36msalary_predictions[0;34m()[0m
[1;32m     17[0m [0;34m[0m[0m
[1;32m     18[0m [0;34m[0m[0m
[0;32m---> 19[0;31m     [0mdf[0m[0;34m=[0m[0mpd[0m[0;34m.[0m[0mDataFrame[0m[0;34m([0m[0mG[0m[0;34m.[0m[0mnodes[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     20[0m     [0mdf[0m[0;34m[[0m[0;34m'degree_centrality'[0m[0;34m][0m[0;34m=[0m[0mlist[0m[0;34m([0m[0mnx[0m[0;34m.[0m[0mdegree_centrality[0m[0;34m([0m[0mG[0m[0;34m)[0m[0;34m.[0m[0mvalues[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     21[0m     [0mdf[0m[0;34m[[0m[0;34m'closeness_centrality'[0m[0;34m][0m[0;34m=[0m[0mlist[0m[0;34m([0m[0mnx[0m[0;34m.[0m[0mcloseness_centrality[0m[0;34m([0m[0mG[0m[0;34m,[0m[0mnormalized[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m.[0m[0mvalues[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py36/lib/python3.6/site-packages/networkx/classes/graph.py[0m in [0;36mnodes[0;34m(self)[0m
[1;32m    752[0m [0;34m[0m[0m
[1;32m    753[0m         """
[0;32m--> 754[0;31m         [0mnodes[0m [0;34m=[0m [0mNodeView[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    755[0m         [0;31m# Lazy View creation: overload the (class) property on the instance[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m    756[0m         [0;31m# Then future G.nodes use the existing View[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/anaconda3/envs/Osiris_py36/lib/python3.6/site-packages/networkx/classes/reportviews.py[0m in [0;36m__init__[0;34m(self, graph)[0m
[1;32m    166[0m [0;34m[0m[0m
[1;32m    167[0m     [0;32mdef[0m [0m__init__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mgraph[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 168[0;31m         [0mself[0m[0;34m.[0m[0m_nodes[0m [0;34m=[0m [0mgraph[0m[0;34m.[0m[0m_node[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    169[0m [0;34m[0m[0m
[1;32m    170[0m     [0;31m# Mapping methods[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;31mAttributeError[0m: 'Graph' object has no attribute '_node'
AttributeError: 'Graph' object has no attribute '_node'

Executability                            : False
