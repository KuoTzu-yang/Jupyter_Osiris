3.6
Executability                            : True
Reproducibility                          : number of matched cells: 15 ; number of cells: 31
Reproducibility                          : matched ratio: 0.484 ; index of matched cells: [0, 1, 2, 3, 4, 5, 6, 7, 8, 18, 20, 24, 26, 27, 29]
-------------------------------------------
Source Code of a Unmatched Cell 9
-------------------------------------------
np.zeros((2,3))

-----------------
Original output:
array([[ 0.,  0.,  0.],
       [ 0.,  0.,  0.]])
Executed output:
array([[0., 0., 0.],
       [0., 0., 0.]])
-------------------------------------------
Source Code of a Unmatched Cell 10
-------------------------------------------
np.ones((3,4))

-----------------
Original output:
array([[ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.],
       [ 1.,  1.,  1.,  1.]])
Executed output:
array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
-------------------------------------------
Source Code of a Unmatched Cell 11
-------------------------------------------
np.linspace(start = 0, stop = 5, num = 10)    # 0에서 5까지의 거리를 10개의 포인트로 나눠줌. 이건 1-D array 임

-----------------
Original output:
array([ 0.        ,  0.55555556,  1.11111111,  1.66666667,  2.22222222,
        2.77777778,  3.33333333,  3.88888889,  4.44444444,  5.        ])
Executed output:
array([0.        , 0.55555556, 1.11111111, 1.66666667, 2.22222222,
       2.77777778, 3.33333333, 3.88888889, 4.44444444, 5.        ])
-------------------------------------------
Source Code of a Unmatched Cell 12
-------------------------------------------
np.eye(4)   # 단위 행렬 = identity matrix

-----------------
Original output:
array([[ 1.,  0.,  0.,  0.],
       [ 0.,  1.,  0.,  0.],
       [ 0.,  0.,  1.,  0.],
       [ 0.,  0.,  0.,  1.]])
Executed output:
array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])
-------------------------------------------
Source Code of a Unmatched Cell 13
-------------------------------------------
np.random.rand()   # 0-1 의 uniform distribution (정규 분포 아님)

-----------------
Original output:
0.27575550719160236
Executed output:
0.21684494062519177
-------------------------------------------
Source Code of a Unmatched Cell 14
-------------------------------------------
np.random.rand(5,5)

-----------------
Original output:
array([[ 0.56638007,  0.14241312,  0.06538426,  0.72496779,  0.63134708],
       [ 0.96263492,  0.35385955,  0.31664591,  0.13017851,  0.71570045],
       [ 0.51441381,  0.58375721,  0.01945336,  0.79748462,  0.87625029],
       [ 0.23950716,  0.30033195,  0.35657809,  0.69786189,  0.21118037],
       [ 0.43298919,  0.06822347,  0.15848058,  0.47135451,  0.89920097]])
Executed output:
array([[0.24314984, 0.39667872, 0.14443738, 0.41446205, 0.82913173],
       [0.96845274, 0.81618437, 0.13793169, 0.23327466, 0.07150835],
       [0.54153679, 0.58588279, 0.54120985, 0.5477928 , 0.5052481 ],
       [0.49018671, 0.91963544, 0.47936237, 0.11490863, 0.03564872],
       [0.39568676, 0.73070488, 0.86833012, 0.33607591, 0.89384519]])
-------------------------------------------
Source Code of a Unmatched Cell 15
-------------------------------------------
# normal distribution 또는 gausian distribution 쓰고 싶은경우

np.random.randn()

-----------------
Original output:
-1.6604619478753766
Executed output:
0.37831276971408134
-------------------------------------------
Source Code of a Unmatched Cell 16
-------------------------------------------
np.random.randn(4,4)

-----------------
Original output:
array([[-0.09980128,  0.88740287,  0.45495651, -0.15187799],
       [-0.86055658,  0.7187297 ,  0.46099584,  0.22773617],
       [-0.76610016, -0.55969299,  1.18123566,  0.80475642],
       [-0.01049258,  0.01480406,  1.25787458, -0.96581471]])
Executed output:
array([[ 1.4013466 , -0.51177691,  0.98610357, -0.63120114],
       [ 0.56922243,  0.32079214,  0.13243402,  0.73562238],
       [ 0.34209769,  1.13752008, -0.74335582,  0.66807172],
       [ 0.35805508, -0.6548658 ,  0.56712739, -0.91867372]])
-------------------------------------------
Source Code of a Unmatched Cell 17
-------------------------------------------
np.random.randint(1,100)   # randint(low, high=None, size=None, dtype='l')

                            # low is inclusive and high is exclusive 즉 1은 포함 100은 미포함

-----------------
Original output:
31
Executed output:
30
-------------------------------------------
Source Code of a Unmatched Cell 19
-------------------------------------------
ranarr = np.random.randint(low = 0, high = 50, size = 10)    # 0에서 50 사이의 10개의 넘버
ranarr

-----------------
Original output:
array([25,  5, 32, 30, 40, 16, 26, 15,  6,  4])
Executed output:
array([35, 18, 12, 14, 47, 20, 38, 14, 26, 13])
-------------------------------------------
Source Code of a Unmatched Cell 21
-------------------------------------------
ranarr.max()

-----------------
Original output:
40
Executed output:
47
-------------------------------------------
Source Code of a Unmatched Cell 22
-------------------------------------------
ranarr.min()

-----------------
Original output:
4
Executed output:
12
-------------------------------------------
Source Code of a Unmatched Cell 23
-------------------------------------------
ranarr

-----------------
Original output:
array([25,  5, 32, 30, 40, 16, 26, 15,  6,  4])
Executed output:
array([35, 18, 12, 14, 47, 20, 38, 14, 26, 13])
-------------------------------------------
Source Code of a Unmatched Cell 25
-------------------------------------------
ranarr.argmin()

-----------------
Original output:
9
Executed output:
2
-------------------------------------------
Source Code of a Unmatched Cell 28
-------------------------------------------
arrr.dtype

-----------------
Original output:
dtype('int32')
Executed output:
dtype('int64')
-------------------------------------------
Source Code of a Unmatched Cell 30
-------------------------------------------
randint(1,100)   # np.random.randint(1,100) 이거를 더 쉽게 쓰는거임

-----------------
Original output:
67
Executed output:
69
