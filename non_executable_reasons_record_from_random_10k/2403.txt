3.5
An error occurred while executing the following cell:
------------------
import warnings
warnings.filterwarnings('ignore')
import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data

#load data
mnist = input_data.read_data_sets("MNIST_data", one_hot=True)

batch_size = 100

batch_count = mnist.train.num_examples // batch_size

#define place holder
x = tf.placeholder(tf.float32, [None, 784])
y = tf.placeholder(tf.float32, [None, 10])
keep_prob = tf.placeholder(tf.float32)

#create a 4-level neural network
W1 = tf.Variable(tf.truncated_normal([784, 500], stddev=0.1))
b1 = tf.Variable(tf.zeros([500])+0.1)
L1 = tf.nn.tanh(tf.matmul(x, W1)+b1)
L1_dropout = tf.nn.dropout(L1, keep_prob)

W2 = tf.Variable(tf.random_normal([500, 300], stddev=0.1))
b2 = tf.Variable(tf.zeros([300])+0.1)
L2 = tf.nn.tanh(tf.matmul(L1_dropout, W2)+b2)
L2_dropout = tf.nn.dropout(L2, keep_prob)

W3 = tf.Variable(tf.random_normal([300, 10], stddev=0.1))
b3 = tf.Variable(tf.zeros([10])+0.1)
prediction = tf.nn.tanh(tf.matmul(L2_dropout, W3)+b3)



#交叉熵代价函数
# loss = tf.reduce_mean(tf.square(y - prediction))
loss = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(labels=y, logits=prediction))
# loss = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(labels=y, logits=prediction))

#学习率使用指数衰减法
global_step = tf.Variable(0)
learn_rate = tf.train.exponential_decay(0.001, global_step, 100, 0.95, staircase=True)

#train
# train = tf.train.GradientDescentOptimizer(0.2).minimize(loss)
train = tf.train.AdamOptimizer(learn_rate).minimize(loss, global_step=global_step)

init = tf.global_variables_initializer()

#比较预测值与实际值
correct_pred = tf.equal(tf.argmax(y, 1), tf.argmax(prediction, 1)) #argmax 返回沿着某个维度最大值的位置

#准确率
accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))

with tf.Session() as sess:
    sess.run(init)
    
    print("keep_prob 1.0")
    for step in range(20):
        for batch in range(batch_count):
            batch_xs, batch_ys = mnist.train.next_batch(batch_size)
            sess.run(train, feed_dict={x:batch_xs, y:batch_ys, keep_prob:1.0})
        
        test_acc = sess.run(accuracy, feed_dict={x:mnist.test.images, y:mnist.test.labels, keep_prob:1.0})
        train_acc = sess.run(accuracy, feed_dict={x:mnist.train.images, y:mnist.train.labels, keep_prob:1.0})
        print("step:" + str(step) + " test accurancy:" + str(test_acc) + " train accurancy:" + str(train_acc) + " learning rate:" + str(sess.run(learn_rate)))


------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
[0;32m<ipython-input-1-f1d9289ad94b>[0m in [0;36m<module>[0;34m()[0m
[1;32m      1[0m [0;32mimport[0m [0mwarnings[0m[0;34m[0m[0m
[1;32m      2[0m [0mwarnings[0m[0;34m.[0m[0mfilterwarnings[0m[0;34m([0m[0;34m'ignore'[0m[0;34m)[0m[0;34m[0m[0m
[0;32m----> 3[0;31m [0;32mimport[0m [0mtensorflow[0m [0;32mas[0m [0mtf[0m[0;34m[0m[0m
[0m[1;32m      4[0m [0;32mfrom[0m [0mtensorflow[0m[0;34m.[0m[0mexamples[0m[0;34m.[0m[0mtutorials[0m[0;34m.[0m[0mmnist[0m [0;32mimport[0m [0minput_data[0m[0;34m[0m[0m
[1;32m      5[0m [0;34m[0m[0m

[0;31mImportError[0m: No module named 'tensorflow'
ImportError: No module named 'tensorflow'

Executability                            : False
