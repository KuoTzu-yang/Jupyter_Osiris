3.6
Executability                            : True
Reproducibility                          : number of matched cells: 11 ; number of cells: 14
Reproducibility                          : matched ratio: 0.786 ; index of matched cells: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11]
-------------------------------------------
Source Code of a Unmatched Cell 10
-------------------------------------------
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

LR = LinearRegression()

# Lista para armazenar os erros das bases
error_df = list()

# Aplique .fit() na base de treino e predict na base de treino e teste
LR = LR.fit(X_train, y_train)
y_train_pred = LR.predict(X_train)
y_test_pred = LR.predict(X_test)

error_df.append(pd.Series({'train': mean_squared_error(y_train, y_train_pred),
                           'test' : mean_squared_error(y_test,  y_test_pred)},
                           name='no enc'))

# Repita para a base data_ohc
LR = LR.fit(X_train_ohc, y_train_ohc)
y_train_ohc_pred = LR.predict(X_train_ohc)
y_test_ohc_pred = LR.predict(X_test_ohc)

error_df.append(pd.Series({'train': mean_squared_error(y_train_ohc, y_train_ohc_pred),
                           'test' : mean_squared_error(y_test_ohc,  y_test_ohc_pred)},
                          name='one-hot enc'))

# Juntar os resultados em uma tabela
error_df = pd.concat(error_df, axis=1)
error_df

-----------------
Original output:
             no enc   one-hot enc
test   1.372182e+09  4.376256e+17
train  1.131507e+09  3.177286e+08
Executed output:
             no enc   one-hot enc
train  1.131507e+09  3.177289e+08
test   1.372182e+09  3.900498e+19
-------------------------------------------
Source Code of a Unmatched Cell 12
-------------------------------------------
from sklearn.preprocessing import StandardScaler, MinMaxScaler, MaxAbsScaler


scalers = {'standard': StandardScaler(),
           'minmax': MinMaxScaler(),
           'maxabs': MaxAbsScaler()}

training_test_sets = {
    'not_encoded': (X_train, y_train, X_test, y_test),
    'one_hot_encoded': (X_train_ohc, y_train_ohc, X_test_ohc, y_test_ohc)}


# Lista de colunas numéricas
mask = X_train.dtypes == np.float
float_columns = X_train.columns[mask]

# modelo de regressão
LR = LinearRegression()

# itera sobre todas as combinações de escala e bases
errors = {}
for encoding_label, (_X_train, _y_train, _X_test, _y_test) in training_test_sets.items():
    for scaler_label, scaler in scalers.items():
        trainingset = _X_train.copy()  # vamos fazer uma cópia para não bagunçar o original
        testset = _X_test.copy()
        trainingset[float_columns] = scaler.fit_transform(trainingset[float_columns])
        testset[float_columns] = scaler.transform(testset[float_columns])
        LR.fit(trainingset, _y_train)
        predictions = LR.predict(testset)
        key = encoding_label + ' - ' + scaler_label + 'scaling'
        errors[key] = mean_squared_error(_y_test, predictions)

errors = pd.Series(errors)
print(errors.to_string())
print('-' * 80)
for key, error_val in errors.items():
    print(key, error_val)

-----------------
Original output:
not_encoded - maxabsscaling          1.372345e+09
not_encoded - minmaxscaling          1.372477e+09
not_encoded - standardscaling        1.372182e+09
one_hot_encoded - maxabsscaling      8.065328e+09
one_hot_encoded - minmaxscaling      8.065328e+09
one_hot_encoded - standardscaling    7.400751e+26
--------------------------------------------------------------------------------
not_encoded - maxabsscaling 1372345364.2130904
not_encoded - minmaxscaling 1372476786.636954
not_encoded - standardscaling 1372182358.9345078
one_hot_encoded - maxabsscaling 8065327607.302927
one_hot_encoded - minmaxscaling 8065327607.357659
one_hot_encoded - standardscaling 7.400750510605734e+26

Executed output:
not_encoded - standardscaling        1.372182e+09
not_encoded - minmaxscaling          1.372148e+09
not_encoded - maxabsscaling          1.373131e+09
one_hot_encoded - standardscaling    8.065328e+09
one_hot_encoded - minmaxscaling      8.065328e+09
one_hot_encoded - maxabsscaling      8.065328e+09
--------------------------------------------------------------------------------
not_encoded - standardscaling 1372182358.934504
not_encoded - minmaxscaling 1372148404.3078587
not_encoded - maxabsscaling 1373131355.9005742
one_hot_encoded - standardscaling 8065327607.247271
one_hot_encoded - minmaxscaling 8065327607.244779
one_hot_encoded - maxabsscaling 8065327607.351426

-------------------------------------------
Source Code of a Unmatched Cell 13
-------------------------------------------
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

ax = plt.axes()
ax.plot(y_test, y_test_pred, ls='', marker='o')

ax.set(xlabel='Valores reais', 
       ylabel='Valores preditos')

-----------------
Original output:
[Text(0,0.5,'Valores preditos'), Text(0.5,0,'Valores reais')]

Executed output:
[Text(0, 0.5, 'Valores preditos'), Text(0.5, 0, 'Valores reais')]

